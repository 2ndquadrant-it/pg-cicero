msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2011-05-26 12:10+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:5(title)
msgid "GiST Indexes"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:8(primary)
msgid "index"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:9(secondary)
msgid "GiST"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:13(title)
msgid "Introduction"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:15(para)
msgid "<acronym>GiST</acronym> stands for Generalized Search Tree. It is a balanced, tree-structured access method, that acts as a base template in which to implement arbitrary indexing schemes. B-trees, R-trees and many other indexing schemes can be implemented in <acronym>GiST</acronym>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:22(para)
msgid "One advantage of <acronym>GiST</acronym> is that it allows the development of custom data types with the appropriate access methods, by an expert in the domain of the data type, rather than a database expert."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:28(para)
msgid "Some of the information here is derived from the University of California at Berkeley's GiST Indexing Project <ulink url=\"http://gist.cs.berkeley.edu/\">web site</ulink> and Marcel Kornacker's thesis, <ulink url=\"http://www.sai.msu.su/~megera/postgres/gist/papers/concurrency/access-methods-for-next-generation.pdf.gz\"> Access Methods for Next-Generation Database Systems</ulink>. The <acronym>GiST</acronym> implementation in <productname>PostgreSQL</productname> is primarily maintained by Teodor Sigaev and Oleg Bartunov, and there is more information on their <ulink url=\"http://www.sai.msu.su/~megera/postgres/gist/\">web site</ulink>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:45(title)
msgid "Extensibility"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:47(para)
msgid "Traditionally, implementing a new index access method meant a lot of difficult work. It was necessary to understand the inner workings of the database, such as the lock manager and Write-Ahead Log. The <acronym>GiST</acronym> interface has a high level of abstraction, requiring the access method implementer only to implement the semantics of the data type being accessed. The <acronym>GiST</acronym> layer itself takes care of concurrency, logging and searching the tree structure."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:57(para)
msgid "This extensibility should not be confused with the extensibility of the other standard search trees in terms of the data they can handle. For example, <productname>PostgreSQL</productname> supports extensible B-trees and hash indexes. That means that you can use <productname>PostgreSQL</productname> to build a B-tree or hash over any data type you want. But B-trees only support range predicates (<literal>&lt;</literal>, <literal>=</literal>, <literal>&gt;</literal>), and hash indexes only support equality queries."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:68(para)
msgid "So if you index, say, an image collection with a <productname>PostgreSQL</productname> B-tree, you can only issue queries such as <quote>is imagex equal to imagey</quote>, <quote>is imagex less than imagey</quote> and <quote>is imagex greater than imagey</quote>. Depending on how you define <quote>equals</quote>, <quote>less than</quote> and <quote>greater than</quote> in this context, this could be useful. However, by using a <acronym>GiST</acronym> based index, you could create ways to ask domain-specific questions, perhaps <quote>find all images of horses</quote> or <quote>find all over-exposed images</quote>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:80(para)
msgid "All it takes to get a <acronym>GiST</acronym> access method up and running is to implement seven user-defined methods, which define the behavior of keys in the tree. Of course these methods have to be pretty fancy to support fancy queries, but for all the standard queries (B-trees, R-trees, etc.) they're relatively straightforward. In short, <acronym>GiST</acronym> combines extensibility along with generality, code reuse, and a clean interface."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:93(title)
msgid "Implementation"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:95(para)
msgid "There are seven methods that an index operator class for <acronym>GiST</acronym> must provide. Correctness of the index is ensured by proper implementation of the <function>same</function>, <function>consistent</function> and <function>union</function> methods, while efficiency (size and speed) of the index will depend on the <function>penalty</function> and <function>picksplit</function> methods. The remaining two methods are <function>compress</function> and <function>decompress</function>, which allow an index to have internal tree data of a different type than the data it indexes. The leaves are to be of the indexed data type, while the other tree nodes can be of any C struct (but you still have to follow <productname>PostgreSQL</productname> data type rules here, see about <literal>varlena</literal> for variable sized data). If the tree's internal data type exists at the SQL level, the <literal>STORAGE</literal> option of the <command>CREATE OPERATOR CLASS</command> command can be used."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:114(function)
msgid "consistent"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:116(para)
msgid "Given an index entry <literal>p</literal> and a query value <literal>q</literal>, this function determines whether the index entry is <quote>consistent</quote> with the query; that is, could the predicate <quote><replaceable>indexed_column</replaceable><replaceable>indexable_operator</replaceable><literal>q</literal></quote> be true for any row represented by the index entry? For a leaf index entry this is equivalent to testing the indexable condition, while for an internal tree node this determines whether it is necessary to scan the subtree of the index represented by the tree node. When the result is <literal>true</literal>, a <literal>recheck</literal> flag must also be returned. This indicates whether the predicate is certainly true or only possibly true. If <literal>recheck</literal> = <literal>false</literal> then the index has tested the predicate condition exactly, whereas if <literal>recheck</literal> = <literal>true</literal> the row is only a candidate match. In that case the system will automatically evaluate the <replaceable>indexable_operator</replaceable> against the actual row value to see if it is really a match. This convention allows <acronym>GiST</acronym> to support both lossless and lossy index structures."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:141(programlisting)
#, no-wrap
msgid "\nCREATE OR REPLACE FUNCTION my_consistent(internal, data_type, smallint, oid, internal)\nRETURNS bool\nAS 'MODULE_PATHNAME'\nLANGUAGE C STRICT;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:150(programlisting)
#, no-wrap
msgid "\nDatum       my_consistent(PG_FUNCTION_ARGS);\nPG_FUNCTION_INFO_V1(my_consistent);\n\nDatum\nmy_consistent(PG_FUNCTION_ARGS)\n{\n    GISTENTRY  *entry = (GISTENTRY *) PG_GETARG_POINTER(0);\n    data_type  *query = PG_GETARG_DATA_TYPE_P(1);\n    StrategyNumber strategy = (StrategyNumber) PG_GETARG_UINT16(2);\n    /* Oid subtype = PG_GETARG_OID(3); */\n    bool       *recheck = (bool *) PG_GETARG_POINTER(4);\n    data_type  *key = DatumGetDataType(entry-&gt;key);\n    bool        retval;\n\n    /*\n     * determine return value as a function of strategy, key and query.\n     *\n     * Use GIST_LEAF(entry) to know where you're called in the index tree,\n     * which comes handy when supporting the = operator for example (you could\n     * check for non empty union() in non-leaf nodes and equality in leaf\n     * nodes).\n     */\n\n    *recheck = true;        /* or false if check is exact */\n\n    PG_RETURN_BOOL(retval);\n}\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:138(para)
msgid "The <acronym>SQL</acronym> declaration of the function must look like this: <placeholder-1/> And the matching code in the C module could then follow this skeleton: <placeholder-2/> Here, <varname>key</varname> is an element in the index and <varname>query</varname> the value being looked up in the index. The <literal>StrategyNumber</literal> parameter indicates which operator of your operator class is being applied â€” it matches one of the operator numbers in the <command>CREATE OPERATOR CLASS</command> command. Depending on what operators you have included in the class, the data type of <varname>query</varname> could vary with the operator, but the above skeleton assumes it doesn't."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:193(function)
msgid "union"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:195(para)
msgid "This method consolidates information in the tree. Given a set of entries, this function generates a new index entry that represents all the given entries."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:204(programlisting)
#, no-wrap
msgid "\nCREATE OR REPLACE FUNCTION my_union(internal, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C STRICT;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:213(programlisting)
#, no-wrap
msgid "\nDatum       my_union(PG_FUNCTION_ARGS);\nPG_FUNCTION_INFO_V1(my_union);\n\nDatum\nmy_union(PG_FUNCTION_ARGS)\n{\n    GistEntryVector *entryvec = (GistEntryVector *) PG_GETARG_POINTER(0);\n    GISTENTRY  *ent = entryvec-&gt;vector;\n    data_type  *out,\n               *tmp,\n               *old;\n    int         numranges,\n                i = 0;\n\n    numranges = entryvec-&gt;n;\n    tmp = DatumGetDataType(ent[0].key);\n    out = tmp;\n\n    if (numranges == 1)\n    {\n        out = data_type_deep_copy(tmp);\n\n        PG_RETURN_DATA_TYPE_P(out);\n    }\n\n    for (i = 1; i &lt; numranges; i++)\n    {\n        old = out;\n        tmp = DatumGetDataType(ent[i].key);\n        out = my_union_implementation(out, tmp);\n    }\n\n    PG_RETURN_DATA_TYPE_P(out);\n}\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:201(para) /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:275(para) /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:380(para) /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:429(para)
msgid "The <acronym>SQL</acronym> declaration of the function must look like this: <placeholder-1/> And the matching code in the C module could then follow this skeleton: <placeholder-2/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:251(para)
msgid "As you can see, in this skeleton we're dealing with a data type where <literal>union(X, Y, Z) = union(union(X, Y), Z)</literal>. It's easy enough to support data types where this is not the case, by implementing the proper union algorithm in this <acronym>GiST</acronym> support method."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:259(para)
msgid "The <function>union</function> implementation function should return a pointer to newly <function>palloc()</function>ed memory. You can't just return whatever the input is."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:268(function)
msgid "compress"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:270(para)
msgid "Converts the data item into a format suitable for physical storage in an index page."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:278(programlisting)
#, no-wrap
msgid "\nCREATE OR REPLACE FUNCTION my_compress(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C STRICT;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:287(programlisting)
#, no-wrap
msgid "\nDatum       my_compress(PG_FUNCTION_ARGS);\nPG_FUNCTION_INFO_V1(my_compress);\n\nDatum\nmy_compress(PG_FUNCTION_ARGS)\n{\n    GISTENTRY  *entry = (GISTENTRY *) PG_GETARG_POINTER(0);\n    GISTENTRY  *retval;\n\n    if (entry-&gt;leafkey)\n    {\n        /* replace entry-&gt;key with a compressed version */\n        compressed_data_type *compressed_data = palloc(sizeof(compressed_data_type));\n\n        /* fill *compressed_data from entry-&gt;key ... */\n\n        retval = palloc(sizeof(GISTENTRY));\n        gistentryinit(*retval, PointerGetDatum(compressed_data),\n                      entry-&gt;rel, entry-&gt;page, entry-&gt;offset, FALSE);\n    }\n    else\n    {\n        /* typically we needn't do anything with non-leaf entries */\n        retval = entry;\n    }\n\n    PG_RETURN_POINTER(retval);\n}\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:319(para)
msgid "You have to adapt <replaceable>compressed_data_type</replaceable> to the specific type you're converting to in order to compress your leaf nodes, of course."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:325(para)
msgid "Depending on your needs, you could also need to care about compressing <literal>NULL</literal> values in there, storing for example <literal>(Datum) 0</literal> like <literal>gist_circle_compress</literal> does."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:334(function)
msgid "decompress"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:336(para)
msgid "The reverse of the <function>compress</function> method. Converts the index representation of the data item into a format that can be manipulated by the database."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:345(programlisting)
#, no-wrap
msgid "\nCREATE OR REPLACE FUNCTION my_decompress(internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C STRICT;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:354(programlisting)
#, no-wrap
msgid "\nDatum       my_decompress(PG_FUNCTION_ARGS);\nPG_FUNCTION_INFO_V1(my_decompress);\n\nDatum\nmy_decompress(PG_FUNCTION_ARGS)\n{\n    PG_RETURN_POINTER(PG_GETARG_POINTER(0));\n}\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:342(para)
msgid "The <acronym>SQL</acronym> declaration of the function must look like this: <placeholder-1/> And the matching code in the C module could then follow this skeleton: <placeholder-2/> The above skeleton is suitable for the case where no decompression is needed."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:372(function)
msgid "penalty"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:374(para)
msgid "Returns a value indicating the <quote>cost</quote> of inserting the new entry into a particular branch of the tree. Items will be inserted down the path of least <function>penalty</function> in the tree."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:383(programlisting)
#, no-wrap
msgid "\nCREATE OR REPLACE FUNCTION my_penalty(internal, internal, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C STRICT;  -- in some cases penalty functions need not be strict\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:392(programlisting)
#, no-wrap
msgid "\nDatum       my_penalty(PG_FUNCTION_ARGS);\nPG_FUNCTION_INFO_V1(my_penalty);\n\nDatum\nmy_penalty(PG_FUNCTION_ARGS)\n{\n    GISTENTRY  *origentry = (GISTENTRY *) PG_GETARG_POINTER(0);\n    GISTENTRY  *newentry = (GISTENTRY *) PG_GETARG_POINTER(1);\n    float      *penalty = (float *) PG_GETARG_POINTER(2);\n    data_type  *orig = DatumGetDataType(origentry-&gt;key);\n    data_type  *new = DatumGetDataType(newentry-&gt;key);\n\n    *penalty = my_penalty_implementation(orig, new);\n    PG_RETURN_POINTER(penalty);\n}\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:411(para)
msgid "The <function>penalty</function> function is crucial to good performance of the index. It'll get used at insertion time to determine which branch to follow when choosing where to add the new entry in the tree. At query time, the more balanced the index, the quicker the lookup."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:421(function)
msgid "picksplit"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:423(para)
msgid "When an index page split is necessary, this function decides which entries on the page are to stay on the old page, and which are to move to the new page."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:432(programlisting)
#, no-wrap
msgid "\nCREATE OR REPLACE FUNCTION my_picksplit(internal, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C STRICT;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:441(programlisting)
#, no-wrap
msgid "\nDatum       my_picksplit(PG_FUNCTION_ARGS);\nPG_FUNCTION_INFO_V1(my_picksplit);\n\nDatum\nmy_picksplit(PG_FUNCTION_ARGS)\n{\n    GistEntryVector *entryvec = (GistEntryVector *) PG_GETARG_POINTER(0);\n    OffsetNumber maxoff = entryvec-&gt;n - 1;\n    GISTENTRY  *ent = entryvec-&gt;vector;\n    GIST_SPLITVEC *v = (GIST_SPLITVEC *) PG_GETARG_POINTER(1);\n    int         i,\n                nbytes;\n    OffsetNumber *left,\n               *right;\n    data_type  *tmp_union;\n    data_type  *unionL;\n    data_type  *unionR;\n    GISTENTRY **raw_entryvec;\n\n    maxoff = entryvec-&gt;n - 1;\n    nbytes = (maxoff + 1) * sizeof(OffsetNumber);\n\n    v-&gt;spl_left = (OffsetNumber *) palloc(nbytes);\n    left = v-&gt;spl_left;\n    v-&gt;spl_nleft = 0;\n\n    v-&gt;spl_right = (OffsetNumber *) palloc(nbytes);\n    right = v-&gt;spl_right;\n    v-&gt;spl_nright = 0;\n\n    unionL = NULL;\n    unionR = NULL;\n\n    /* Initialize the raw entry vector. */\n    raw_entryvec = (GISTENTRY **) malloc(entryvec-&gt;n * sizeof(void *));\n    for (i = FirstOffsetNumber; i &lt;= maxoff; i = OffsetNumberNext(i))\n        raw_entryvec[i] = &amp;(entryvec-&gt;vector[i]);\n\n    for (i = FirstOffsetNumber; i &lt;= maxoff; i = OffsetNumberNext(i))\n    {\n        int         real_index = raw_entryvec[i] - entryvec-&gt;vector;\n\n        tmp_union = DatumGetDataType(entryvec-&gt;vector[real_index].key);\n        Assert(tmp_union != NULL);\n\n        /*\n         * Choose where to put the index entries and update unionL and unionR\n         * accordingly. Append the entries to either v_spl_left or\n         * v_spl_right, and care about the counters.\n         */\n\n        if (my_choice_is_left(unionL, curl, unionR, curr))\n        {\n            if (unionL == NULL)\n                unionL = tmp_union;\n            else\n                unionL = my_union_implementation(unionL, tmp_union);\n\n            *left = real_index;\n            ++left;\n            ++(v-&gt;spl_nleft);\n        }\n        else\n        {\n            /*\n             * Same on the right\n             */\n        }\n    }\n\n    v-&gt;spl_ldatum = DataTypeGetDatum(unionL);\n    v-&gt;spl_rdatum = DataTypeGetDatum(unionR);\n    PG_RETURN_POINTER(v);\n}\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:519(para)
msgid "Like <function>penalty</function>, the <function>picksplit</function> function is crucial to good performance of the index. Designing suitable <function>penalty</function> and <function>picksplit</function> implementations is where the challenge of implementing well-performing <acronym>GiST</acronym> indexes lies."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:530(function)
msgid "same"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:532(para)
msgid "Returns true if two index entries are identical, false otherwise."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:539(programlisting)
#, no-wrap
msgid "\nCREATE OR REPLACE FUNCTION my_same(internal, internal, internal)\nRETURNS internal\nAS 'MODULE_PATHNAME'\nLANGUAGE C STRICT;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:548(programlisting)
#, no-wrap
msgid "\nDatum       my_same(PG_FUNCTION_ARGS);\nPG_FUNCTION_INFO_V1(my_same);\n\nDatum\nmy_same(PG_FUNCTION_ARGS)\n{\n    prefix_range *v1 = PG_GETARG_PREFIX_RANGE_P(0);\n    prefix_range *v2 = PG_GETARG_PREFIX_RANGE_P(1);\n    bool       *result = (bool *) PG_GETARG_POINTER(2);\n\n    *result = my_eq(v1, v2);\n    PG_RETURN_POINTER(result);\n}\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:536(para)
msgid "The <acronym>SQL</acronym> declaration of the function must look like this: <placeholder-1/> And the matching code in the C module could then follow this skeleton: <placeholder-2/> For historical reasons, the <function>same</function> function doesn't just return a Boolean result; instead it has to store the flag at the location indicated by the third argument."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:576(title)
msgid "Examples"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:590(filename)
msgid "btree_gist"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:592(para)
msgid "B-tree equivalent functionality for several data types"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:597(filename)
msgid "cube"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:599(para)
msgid "Indexing for multidimensional cubes"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:604(filename)
msgid "hstore"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:606(para)
msgid "Module for storing (key, value) pairs"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:611(filename)
msgid "intarray"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:613(para)
msgid "RD-Tree for one-dimensional array of int4 values"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:618(filename)
msgid "ltree"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:620(para)
msgid "Indexing for tree-like structures"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:625(filename)
msgid "pg_trgm"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:627(para)
msgid "Text similarity using trigram matching"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:632(filename)
msgid "seg"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:634(para)
msgid "Indexing for <quote>float ranges</quote>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:578(para)
msgid "The <productname>PostgreSQL</productname> source distribution includes several examples of index methods implemented using <acronym>GiST</acronym>. The core system currently provides text search support (indexing for <type>tsvector</type> and <type>tsquery</type>) as well as R-Tree equivalent functionality for some of the built-in geometric data types (see <filename>src/backend/access/gist/gistproc.c</filename>). The following <filename>contrib</filename> modules also contain <acronym>GiST</acronym> operator classes: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:643(title)
msgid "Crash Recovery"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:656(programlisting)
#, no-wrap
msgid "\nLOG:  index NNN/NNN/NNN needs VACUUM or REINDEX to finish crash recovery\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:660(programlisting)
#, no-wrap
msgid "\nLOG:  index \"FOO\" needs VACUUM or REINDEX to finish crash recovery\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:665(programlisting)
#, no-wrap
msgid "\nNOTICE:  index \"FOO\" needs VACUUM FULL or REINDEX to finish crash recovery\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:645(para)
msgid "Usually, replay of the WAL log is sufficient to restore the integrity of a GiST index following a database crash. However, there are some corner cases in which the index state is not fully rebuilt. The index will still be functionally correct, but there might be some performance degradation. When this occurs, the index can be repaired by <command>VACUUM</command>ing its table, or by rebuilding the index using <command>REINDEX</command>. In some cases a plain <command>VACUUM</command> is not sufficient, and either <command>VACUUM FULL</command> or <command>REINDEX</command> is needed. The need for one of these procedures is indicated by occurrence of this log message during crash recovery: <placeholder-1/> or this log message during routine index insertions: <placeholder-2/> If a plain <command>VACUUM</command> finds itself unable to complete recovery fully, it will return a notice: <placeholder-3/>"
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gist.xml:0(None)
msgid "translator-credits"
msgstr ""

