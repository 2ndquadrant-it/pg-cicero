msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2011-09-26 12:49+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: /tmp/cicero-POVb/ref/create_function.xml:8(refentrytitle) /tmp/cicero-POVb/ref/create_function.xml:14(refname) /tmp/cicero-POVb/ref/create_function.xml:19(primary) 
msgid "CREATE FUNCTION"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:9(manvolnum) 
msgid "7"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:10(refmiscinfo) 
msgid "SQL - Language Statements"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:15(refpurpose) 
msgid "define a new function"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:25(replaceable) /tmp/cicero-POVb/ref/create_function.xml:104(replaceable) 
msgid "name"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:25(replaceable) /tmp/cicero-POVb/ref/create_function.xml:114(replaceable) 
msgid "argmode"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:25(replaceable) /tmp/cicero-POVb/ref/create_function.xml:129(replaceable) 
msgid "argname"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:25(replaceable) /tmp/cicero-POVb/ref/create_function.xml:147(replaceable) 
msgid "argtype"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:25(replaceable) /tmp/cicero-POVb/ref/create_function.xml:173(replaceable) 
msgid "default_expr"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:26(replaceable) /tmp/cicero-POVb/ref/create_function.xml:188(replaceable) 
msgid "rettype"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:27(replaceable) /tmp/cicero-POVb/ref/create_function.xml:222(replaceable) 
msgid "column_name"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:27(replaceable) /tmp/cicero-POVb/ref/create_function.xml:235(replaceable) 
msgid "column_type"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:28(replaceable) /tmp/cicero-POVb/ref/create_function.xml:246(replaceable) 
msgid "lang_name"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:33(replaceable) /tmp/cicero-POVb/ref/create_function.xml:367(replaceable) 
msgid "execution_cost"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:34(replaceable) /tmp/cicero-POVb/ref/create_function.xml:383(replaceable) 
msgid "result_rows"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:35(replaceable) /tmp/cicero-POVb/ref/create_function.xml:396(replaceable) 
msgid "configuration_parameter"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:35(replaceable) /tmp/cicero-POVb/ref/create_function.xml:35(replaceable) /tmp/cicero-POVb/ref/create_function.xml:397(replaceable) 
msgid "value"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:36(replaceable) /tmp/cicero-POVb/ref/create_function.xml:428(replaceable) 
msgid "definition"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:37(replaceable) /tmp/cicero-POVb/ref/create_function.xml:449(replaceable) 
msgid "obj_file"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:37(replaceable) /tmp/cicero-POVb/ref/create_function.xml:449(replaceable) 
msgid "link_symbol"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:39(replaceable) /tmp/cicero-POVb/ref/create_function.xml:476(replaceable) 
msgid "attribute"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:23(synopsis) 
#, no-wrap
msgid "\nCREATE [ OR REPLACE ] FUNCTION\n    <placeholder-1/> ( [ [ <placeholder-2/> ] [ <placeholder-3/> ] <placeholder-4/> [ { DEFAULT | = } <placeholder-5/> ] [, ...] ] )\n    [ RETURNS <placeholder-6/>\n      | RETURNS TABLE ( <placeholder-7/> <placeholder-8/> [, ...] ) ]\n  { LANGUAGE <placeholder-9/>\n    | WINDOW\n    | IMMUTABLE | STABLE | VOLATILE\n    | CALLED ON NULL INPUT | RETURNS NULL ON NULL INPUT | STRICT\n    | [ EXTERNAL ] SECURITY INVOKER | [ EXTERNAL ] SECURITY DEFINER\n    | COST <placeholder-10/>\n    | ROWS <placeholder-11/>\n    | SET <placeholder-12/> { TO <placeholder-13/> | = <placeholder-14/> | FROM CURRENT }\n    | AS '<placeholder-15/>'\n    | AS '<placeholder-16/>', '<placeholder-17/>'\n  } ...\n    [ WITH ( <placeholder-18/> [, ...] ) ]\n"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:44(title) 
msgid "Description"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:46(para) 
msgid "<command>CREATE FUNCTION</command> defines a new function. <command>CREATE OR REPLACE FUNCTION</command> will either create a new function, or replace an existing definition. To be able to define a function, the user must have the <literal>USAGE</literal> privilege on the language."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:54(para) 
msgid "If a schema name is included, then the function is created in the specified schema. Otherwise it is created in the current schema. The name of the new function must not match any existing function with the same input argument types in the same schema. However, functions of different argument types can share a name (this is called <firstterm>overloading</firstterm>)."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:63(para) 
msgid "To replace the current definition of an existing function, use <command>CREATE OR REPLACE FUNCTION</command>. It is not possible to change the name or argument types of a function this way (if you tried, you would actually be creating a new, distinct function). Also, <command>CREATE OR REPLACE FUNCTION</command> will not let you change the return type of an existing function. To do that, you must drop and recreate the function. (When using <literal>OUT</literal> parameters, that means you cannot change the types of any <literal>OUT</literal> parameters except by dropping the function.)"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:75(para) 
msgid "When <command>CREATE OR REPLACE FUNCTION</command> is used to replace an existing function, the ownership and permissions of the function do not change. All other function properties are assigned the values specified or implied in the command. You must own the function to replace it (this includes being a member of the owning role)."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:83(para) 
msgid "If you drop and then recreate a function, the new function is not the same entity as the old; you will have to drop existing rules, views, triggers, etc. that refer to the old function. Use <command>CREATE OR REPLACE FUNCTION</command> to change a function definition without breaking objects that refer to the function. Also, <command>ALTER FUNCTION</command> can be used to change most of the auxiliary properties of an existing function."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:93(para) 
msgid "The user that creates the function becomes the owner of the function."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:99(title) 
msgid "Parameters"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:107(para) 
msgid "The name (optionally schema-qualified) of the function to create."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:117(para) 
msgid "The mode of an argument: <literal>IN</literal>, <literal>OUT</literal>, <literal>INOUT</literal>, or <literal>VARIADIC</literal>. If omitted, the default is <literal>IN</literal>. Only <literal>OUT</literal> arguments can follow a <literal>VARIADIC</literal> one. Also, <literal>OUT</literal> and <literal>INOUT</literal> arguments cannot be used together with the <literal>RETURNS TABLE</literal> notation."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:132(para) 
msgid "The name of an argument. Some languages (currently only PL/pgSQL) let you use the name in the function body. For other languages the name of an input argument is just extra documentation, so far as the function itself is concerned; but you can use input argument names when calling a function to improve readability (see <xref linkend=\"sql-syntax-calling-funcs\"/>). In any case, the name of an output argument is significant, because it defines the column name in the result row type. (If you omit the name for an output argument, the system will choose a default column name.)"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:150(para) 
msgid "The data type(s) of the function's arguments (optionally schema-qualified), if any. The argument types can be base, composite, or domain types, or can reference the type of a table column."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:155(para) 
msgid "Depending on the implementation language it might also be allowed to specify <quote>pseudotypes</quote> such as <type>cstring</type>. Pseudotypes indicate that the actual argument type is either incompletely specified, or outside the set of ordinary SQL data types."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:161(para) 
msgid "The type of a column is referenced by writing <literal><replaceable class=\"parameter\">table_name</replaceable>.<replaceable class=\"parameter\">column_name</replaceable>%TYPE</literal>. Using this feature can sometimes help make a function independent of changes to the definition of a table."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:176(para) 
msgid "An expression to be used as default value if the parameter is not specified. The expression has to be coercible to the argument type of the parameter. Only input (including <literal>INOUT</literal>) parameters can have a default value. All input parameters following a parameter with a default value must have default values as well."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:191(para) 
msgid "The return data type (optionally schema-qualified). The return type can be a base, composite, or domain type, or can reference the type of a table column. Depending on the implementation language it might also be allowed to specify <quote>pseudotypes</quote> such as <type>cstring</type>. If the function is not supposed to return a value, specify <type>void</type> as the return type."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:200(para) 
msgid "When there are <literal>OUT</literal> or <literal>INOUT</literal> parameters, the <literal>RETURNS</literal> clause can be omitted. If present, it must agree with the result type implied by the output parameters: <literal>RECORD</literal> if there are multiple output parameters, or the same type as the single output parameter."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:207(para) 
msgid "The <literal>SETOF</literal> modifier indicates that the function will return a set of items, rather than a single item."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:212(para) 
msgid "The type of a column is referenced by writing <literal><replaceable class=\"parameter\">table_name</replaceable>.<replaceable class=\"parameter\">column_name</replaceable>%TYPE</literal>."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:225(para) 
msgid "The name of an output column in the <literal>RETURNS TABLE</literal> syntax. This is effectively another way of declaring a named <literal>OUT</literal> parameter, except that <literal>RETURNS TABLE</literal> also implies <literal>RETURNS SETOF</literal>."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:238(para) 
msgid "The data type of an output column in the <literal>RETURNS TABLE</literal> syntax."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:249(para) 
msgid "The name of the language that the function is implemented in. Can be <literal>SQL</literal>, <literal>C</literal>, <literal>internal</literal>, or the name of a user-defined procedural language. For backward compatibility, the name can be enclosed by single quotes."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:260(literal) 
msgid "WINDOW"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:263(para) 
msgid "<literal>WINDOW</literal> indicates that the function is a <firstterm>window function</firstterm> rather than a plain function. This is currently only useful for functions written in C. The <literal>WINDOW</literal> attribute cannot be changed when replacing an existing function definition."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:273(literal) 
msgid "IMMUTABLE"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:274(literal) 
msgid "STABLE"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:275(literal) 
msgid "VOLATILE"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:278(para) 
msgid "These attributes inform the query optimizer about the behavior of the function. At most one choice can be specified. If none of these appear, <literal>VOLATILE</literal> is the default assumption."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:285(para) 
msgid "<literal>IMMUTABLE</literal> indicates that the function cannot modify the database and always returns the same result when given the same argument values; that is, it does not do database lookups or otherwise use information not directly present in its argument list. If this option is given, any call of the function with all-constant arguments can be immediately replaced with the function value."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:294(para) 
msgid "<literal>STABLE</literal> indicates that the function cannot modify the database, and that within a single table scan it will consistently return the same result for the same argument values, but that its result could change across SQL statements. This is the appropriate selection for functions whose results depend on database lookups, parameter variables (such as the current time zone), etc. (It is inappropriate for <literal>AFTER</literal> triggers that wish to query rows modified by the current command.) Also note that the <function>current_timestamp</function> family of functions qualify as stable, since their values do not change within a transaction."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:307(para) 
msgid "<literal>VOLATILE</literal> indicates that the function value can change even within a single table scan, so no optimizations can be made. Relatively few database functions are volatile in this sense; some examples are <literal>random()</literal>, <literal>currval()</literal>, <literal>timeofday()</literal>. But note that any function that has side-effects must be classified volatile, even if its result is quite predictable, to prevent calls from being optimized away; an example is <literal>setval()</literal>."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:317(para) 
msgid "For additional details see <xref linkend=\"xfunc-volatility\"/>."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:324(literal) 
msgid "CALLED ON NULL INPUT"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:325(literal) 
msgid "RETURNS NULL ON NULL INPUT"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:326(literal) 
msgid "STRICT"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:329(para) 
msgid "<literal>CALLED ON NULL INPUT</literal> (the default) indicates that the function will be called normally when some of its arguments are null. It is then the function author's responsibility to check for null values if necessary and respond appropriately."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:336(para) 
msgid "<literal>RETURNS NULL ON NULL INPUT</literal> or <literal>STRICT</literal> indicates that the function always returns null whenever any of its arguments are null. If this parameter is specified, the function is not executed when there are null arguments; instead a null result is assumed automatically."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:347(optional) /tmp/cicero-POVb/ref/create_function.xml:348(optional) 
msgid "EXTERNAL"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:347(literal) 
msgid "<placeholder-1/> SECURITY INVOKER"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:348(literal) 
msgid "<placeholder-1/> SECURITY DEFINER"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:351(para) 
msgid "<literal>SECURITY INVOKER</literal> indicates that the function is to be executed with the privileges of the user that calls it. That is the default. <literal>SECURITY DEFINER</literal> specifies that the function is to be executed with the privileges of the user that created it."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:358(para) 
msgid "The key word <literal>EXTERNAL</literal> is allowed for SQL conformance, but it is optional since, unlike in SQL, this feature applies to all functions not only external ones."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:370(para) 
msgid "A positive number giving the estimated execution cost for the function, in units of <xref linkend=\"guc-cpu-operator-cost\"/>. If the function returns a set, this is the cost per returned row. If the cost is not specified, 1 unit is assumed for C-language and internal functions, and 100 units for functions in all other languages. Larger values cause the planner to try to avoid evaluating the function more often than necessary."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:386(para) 
msgid "A positive number giving the estimated number of rows that the planner should expect the function to return. This is only allowed when the function is declared to return a set. The default assumption is 1000 rows."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:399(para) 
msgid "The <literal>SET</literal> clause causes the specified configuration parameter to be set to the specified value when the function is entered, and then restored to its prior value when the function exits. <literal>SET FROM CURRENT</literal> saves the session's current value of the parameter as the value to be applied when the function is entered."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:407(para) 
msgid "If a <literal>SET</literal> clause is attached to a function, then the effects of a <command>SET LOCAL</command> command executed inside the function for the same variable are restricted to the function: the configuration parameter's prior value is still restored at function exit. However, an ordinary <command>SET</command> command (without <literal>LOCAL</literal>) overrides the <literal>SET</literal> clause, much as it would do for a previous <command>SET LOCAL</command> command: the effects of such a command will persist after function exit, unless the current transaction is rolled back."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:419(para) 
msgid "See <xref linkend=\"sql-set\"/> and <xref linkend=\"runtime-config\"/> for more information about allowed parameter names and values."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:431(para) 
msgid "A string constant defining the function; the meaning depends on the language. It can be an internal function name, the path to an object file, an SQL command, or text in a procedural language."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:437(para) 
msgid "It is often helpful to use dollar quoting (see <xref linkend=\"sql-syntax-dollar-quoting\"/>) to write the function definition string, rather than the normal single quote syntax. Without dollar quoting, any single quotes or backslashes in the function definition must be escaped by doubling them."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:449(literal) 
msgid "<placeholder-1/>, <placeholder-2/>"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:452(para) 
msgid "This form of the <literal>AS</literal> clause is used for dynamically loadable C language functions when the function name in the C language source code is not the same as the name of the SQL function. The string <replaceable class=\"parameter\">obj_file</replaceable> is the name of the file containing the dynamically loadable object, and <replaceable class=\"parameter\">link_symbol</replaceable> is the function's link symbol, that is, the name of the function in the C language source code. If the link symbol is omitted, it is assumed to be the same as the name of the SQL function being defined."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:465(para) 
msgid "When repeated <command>CREATE FUNCTION</command> calls refer to the same object file, the file is only loaded once per session. To unload and reload the file (perhaps during development), start a new session."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:485(literal) 
msgid "isStrict"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:487(para) 
msgid "Equivalent to <literal>STRICT</literal> or <literal>RETURNS NULL ON NULL INPUT</literal>."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:494(literal) 
msgid "isCachable"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:496(para) 
msgid "<literal>isCachable</literal> is an obsolete equivalent of <literal>IMMUTABLE</literal>; it's still accepted for backwards-compatibility reasons."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:479(para) 
msgid "The historical way to specify optional pieces of information about the function. The following attributes can appear here: <placeholder-1/> Attribute names are not case-sensitive."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:512(para) 
msgid "Refer to <xref linkend=\"xfunc\"/> for further information on writing functions."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:520(title) 
msgid "Overloading"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:522(para) 
msgid "<productname>PostgreSQL</productname> allows function <firstterm>overloading</firstterm>; that is, the same name can be used for several different functions so long as they have distinct input argument types. However, the C names of all functions must be different, so you must give overloaded C functions different C names (for example, use the argument types as part of the C names)."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:536(programlisting) 
#, no-wrap
msgid "\nCREATE FUNCTION foo(int) ...\nCREATE FUNCTION foo(int, out text) ...\n"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:532(para) 
msgid "Two functions are considered the same if they have the same names and <emphasis>input</emphasis> argument types, ignoring any <literal>OUT</literal> parameters. Thus for example these declarations conflict: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:546(programlisting) 
#, no-wrap
msgid "\nCREATE FUNCTION foo(int) ...\nCREATE FUNCTION foo(int, int default 42) ...\n"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:542(para) 
msgid "Functions that have different argument type lists will not be considered to conflict at creation time, but if defaults are provided they might conflict in use. For example, consider <placeholder-1/> A call <literal>foo(10)</literal> will fail due to the ambiguity about which function should be called."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:557(title) 
msgid "Notes"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:559(para) 
msgid "The full <acronym>SQL</acronym> type syntax is allowed for input arguments and return value. However, some details of the type specification (e.g., the precision field for type <type>numeric</type>) are the responsibility of the underlying function implementation and are silently swallowed (i.e., not recognized or enforced) by the <command>CREATE FUNCTION</command> command."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:569(para) 
msgid "When replacing an existing function with <command>CREATE OR REPLACE FUNCTION</command>, there are restrictions on changing parameter names. You cannot change the name already assigned to any input parameter (although you can add names to parameters that had none before). If there is more than one output parameter, you cannot change the names of the output parameters, because that would change the column names of the anonymous composite type that describes the function's result. These restrictions are made to ensure that existing calls of the function do not stop working when it is replaced."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:581(para) 
msgid "If a function is declared <literal>STRICT</literal> with a <literal>VARIADIC</literal> argument, the strictness check tests that the variadic array <emphasis>as a whole</emphasis> is non-null. The function will still be called if the array has null elements."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:591(title) 
msgid "Examples"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:596(programlisting) 
#, no-wrap
msgid "\nCREATE FUNCTION add(integer, integer) RETURNS integer\n    AS 'select $1 + $2;'\n    LANGUAGE SQL\n    IMMUTABLE\n    RETURNS NULL ON NULL INPUT;\n"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:593(para) 
msgid "Here are some trivial examples to help you get started. For more information and examples, see <xref linkend=\"xfunc\"/>. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:608(programlisting) 
#, no-wrap
msgid "\nCREATE OR REPLACE FUNCTION increment(i integer) RETURNS integer AS $$\n        BEGIN\n                RETURN i + 1;\n        END;\n$$ LANGUAGE plpgsql;\n"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:605(para) 
msgid "Increment an integer, making use of an argument name, in <application>PL/pgSQL</application>: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:619(programlisting) 
#, no-wrap
msgid "\nCREATE FUNCTION dup(in int, out f1 int, out f2 text)\n    AS $$ SELECT $1, CAST($1 AS text) || ' is text' $$\n    LANGUAGE SQL;\n\nSELECT * FROM dup(42);\n"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:628(programlisting) 
#, no-wrap
msgid "\nCREATE TYPE dup_result AS (f1 int, f2 text);\n\nCREATE FUNCTION dup(int) RETURNS dup_result\n    AS $$ SELECT $1, CAST($1 AS text) || ' is text' $$\n    LANGUAGE SQL;\n\nSELECT * FROM dup(42);\n"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:639(programlisting) 
#, no-wrap
msgid "\nCREATE FUNCTION dup(int) RETURNS TABLE(f1 int, f2 text)\n    AS $$ SELECT $1, CAST($1 AS text) || ' is text' $$\n    LANGUAGE SQL;\n\nSELECT * FROM dup(42);\n"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:617(para) 
msgid "Return a record containing multiple output parameters: <placeholder-1/> You can do the same thing more verbosely with an explicitly named composite type: <placeholder-2/> Another way to return multiple columns is to use a <literal>TABLE</literal> function: <placeholder-3/> However, a <literal>TABLE</literal> function is different from the preceding examples, because it actually returns a <emphasis>set</emphasis> of records, not just one record."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:653(title) 
msgid "Writing <literal>SECURITY DEFINER</literal> Functions Safely"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:655(para) 
msgid "Because a <literal>SECURITY DEFINER</literal> function is executed with the privileges of the user that created it, care is needed to ensure that the function cannot be misused. For security, <xref linkend=\"guc-search-path\"/> should be set to exclude any schemas writable by untrusted users. This prevents malicious users from creating objects that mask objects used by the function. Particularly important in this regard is the temporary-table schema, which is searched first by default, and is normally writable by anyone. A secure arrangement can be had by forcing the temporary schema to be searched last. To do this, write <literal>pg_temp</literal> as the last entry in <varname>search_path</varname>. This function illustrates safe usage:"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:670(programlisting) 
#, no-wrap
msgid "\nCREATE FUNCTION check_password(uname TEXT, pass TEXT)\nRETURNS BOOLEAN AS $$\nDECLARE passed BOOLEAN;\nBEGIN\n        SELECT  (pwd = $2) INTO passed\n        FROM    pwds\n        WHERE   username = $1;\n\n        RETURN passed;\nEND;\n$$  LANGUAGE plpgsql\n    SECURITY DEFINER\n    -- Set a secure search_path: trusted schema(s), then 'pg_temp'.\n    SET search_path = admin, pg_temp;\n"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:687(para) 
msgid "Before <productname>PostgreSQL</productname> version 8.3, the <literal>SET</literal> option was not available, and so older functions may contain rather complicated logic to save, set, and restore <varname>search_path</varname>. The <literal>SET</literal> option is far easier to use for this purpose."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:695(para) 
msgid "Another point to keep in mind is that by default, execute privilege is granted to <literal>PUBLIC</literal> for newly created functions (see <xref linkend=\"sql-grant\"/> for more information). Frequently you will wish to restrict use of a security definer function to only some users. To do that, you must revoke the default <literal>PUBLIC</literal> privileges and then grant execute privilege selectively. To avoid having a window where the new function is accessible to all, create it and set the privileges within a single transaction. For example:"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:707(programlisting) 
#, no-wrap
msgid "\nBEGIN;\nCREATE FUNCTION check_password(uname TEXT, pass TEXT) ... SECURITY DEFINER;\nREVOKE ALL ON FUNCTION check_password(uname TEXT, pass TEXT) FROM PUBLIC;\nGRANT EXECUTE ON FUNCTION check_password(uname TEXT, pass TEXT) TO admins;\nCOMMIT;\n"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:718(title) 
msgid "Compatibility"
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:720(para) 
msgid "A <command>CREATE FUNCTION</command> command is defined in SQL:1999 and later. The <productname>PostgreSQL</productname> version is similar but not fully compatible. The attributes are not portable, neither are the different available languages."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:727(para) 
msgid "For compatibility with some other database systems, <replaceable class=\"parameter\">argmode</replaceable> can be written either before or after <replaceable class=\"parameter\">argname</replaceable>. But only the first way is standard-compliant."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:734(para) 
msgid "The SQL standard does not specify parameter defaults. The syntax with the <literal>DEFAULT</literal> key word is from Oracle, and it is somewhat in the spirit of the standard: SQL/PSM uses it for variable default values. The syntax with <literal>=</literal> is used in T-SQL and Firebird."
msgstr ""

#: /tmp/cicero-POVb/ref/create_function.xml:745(title) 
msgid "See Also"
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2.
#: /tmp/cicero-POVb/ref/create_function.xml:0(None) 
msgid "translator-credits"
msgstr ""

