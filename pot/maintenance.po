msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2011-09-26 12:29+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: /tmp/cicero-wtof/maintenance.xml:5(title) 
msgid "Routine Database Maintenance Tasks"
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:8(primary) 
msgid "maintenance"
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:12(primary) 
msgid "routine maintenance"
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:15(para) 
msgid "<productname>PostgreSQL</productname>, like any database software, requires that certain tasks be performed regularly to achieve optimum performance. The tasks discussed here are <emphasis>required</emphasis>, but they are repetitive in nature and can easily be automated using standard tools such as <application>cron</application> scripts or Windows' <application>Task Scheduler</application>. It is the database administrator's responsibility to set up appropriate scripts, and to check that they execute successfully."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:26(para) 
msgid "One obvious maintenance task is the creation of backup copies of the data on a regular schedule. Without a recent backup, you have no chance of recovery after a catastrophe (disk failure, fire, mistakenly dropping a critical table, etc.). The backup and recovery mechanisms available in <productname>PostgreSQL</productname> are discussed at length in <xref linkend=\"backup\"/>."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:35(para) 
msgid "The other main category of maintenance task is periodic <quote>vacuuming</quote> of the database. This activity is discussed in <xref linkend=\"routine-vacuuming\"/>. Closely related to this is updating the statistics that will be used by the query planner, as discussed in <xref linkend=\"vacuum-for-statistics\"/>."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:43(para) 
msgid "Another task that might need periodic attention is log file management. This is discussed in <xref linkend=\"logfile-maintenance\"/>."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:48(para) 
msgid "<ulink url=\"http://bucardo.org/wiki/Check_postgres\"><application>check_postgres</application></ulink> is available for monitoring database health and reporting unusual conditions. <application>check_postgres</application> integrates with Nagios and MRTG, but can be run standalone too."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:56(para) 
msgid "<productname>PostgreSQL</productname> is low-maintenance compared to some other database management systems. Nonetheless, appropriate attention to these tasks will go far towards ensuring a pleasant and productive experience with the system."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:64(title) 
msgid "Routine Vacuuming"
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:67(primary) 
msgid "vacuum"
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:70(para) 
msgid "<productname>PostgreSQL</productname> databases require periodic maintenance known as <firstterm>vacuuming</firstterm>. For many installations, it is sufficient to let vacuuming be performed by the <firstterm>autovacuum daemon</firstterm>, which is described in <xref linkend=\"autovacuum\"/>. You might need to adjust the autovacuuming parameters described there to obtain best results for your situation. Some database administrators will want to supplement or replace the daemon's activities with manually-managed <command>VACUUM</command> commands, which typically are executed according to a schedule by <application>cron</application> or <application>Task Scheduler</application> scripts. To set up manually-managed vacuuming properly, it is essential to understand the issues discussed in the next few subsections. Administrators who rely on autovacuuming may still wish to skim this material to help them understand and adjust autovacuuming."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:87(title) 
msgid "Vacuuming Basics"
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:96(simpara) 
msgid "To recover or reuse disk space occupied by updated or deleted rows."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:101(simpara) 
msgid "To update data statistics used by the <productname>PostgreSQL</productname> query planner."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:106(simpara) 
msgid "To protect against loss of very old data due to <firstterm>transaction ID wraparound</firstterm>."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:89(para) 
msgid "<productname>PostgreSQL</productname>'s <xref linkend=\"sql-vacuum\"/> command has to process each table on a regular basis for several reasons: <placeholder-1/> Each of these reasons dictates performing <command>VACUUM</command> operations of varying frequency and scope, as explained in the following subsections."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:115(para) 
msgid "There are two variants of <command>VACUUM</command>: standard <command>VACUUM</command> and <command>VACUUM FULL</command>. <command>VACUUM FULL</command> can reclaim more disk space but runs much more slowly. Also, the standard form of <command>VACUUM</command> can run in parallel with production database operations. (Commands such as <command>SELECT</command>, <command>INSERT</command>, <command>UPDATE</command>, and <command>DELETE</command> will continue to function normally, though you will not be able to modify the definition of a table with commands such as <command>ALTER TABLE</command> while it is being vacuumed.) <command>VACUUM FULL</command> requires exclusive lock on the table it is working on, and therefore cannot be done in parallel with other use of the table. Generally, therefore, administrators should strive to use standard <command>VACUUM</command> and avoid <command>VACUUM FULL</command>."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:132(para) 
msgid "<command>VACUUM</command> creates a substantial amount of I/O traffic, which can cause poor performance for other active sessions. There are configuration parameters that can be adjusted to reduce the performance impact of background vacuuming â€” see <xref linkend=\"runtime-config-resource-vacuum-cost\"/>."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:142(title) 
msgid "Recovering Disk Space"
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:145(primary) 
msgid "disk space"
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:148(para) 
msgid "In <productname>PostgreSQL</productname>, an <command>UPDATE</command> or <command>DELETE</command> of a row does not immediately remove the old version of the row. This approach is necessary to gain the benefits of multiversion concurrency control (<acronym>MVCC</acronym>, see <xref linkend=\"mvcc\"/>): the row version must not be deleted while it is still potentially visible to other transactions. But eventually, an outdated or deleted row version is no longer of interest to any transaction. The space it occupies must then be reclaimed for reuse by new rows, to avoid unbounded growth of disk space requirements. This is done by running <command>VACUUM</command>."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:161(para) 
msgid "The standard form of <command>VACUUM</command> removes dead row versions in tables and indexes and marks the space available for future reuse. However, it will not return the space to the operating system, except in the special case where one or more pages at the end of a table become entirely free and an exclusive table lock can be easily obtained. In contrast, <command>VACUUM FULL</command> actively compacts tables by writing a complete new version of the table file with no dead space. This minimizes the size of the table, but can take a long time. It also requires extra disk space for the new copy of the table, until the operation completes."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:174(para) 
msgid "The usual goal of routine vacuuming is to do standard <command>VACUUM</command>s often enough to avoid needing <command>VACUUM FULL</command>. The autovacuum daemon attempts to work this way, and in fact will never issue <command>VACUUM FULL</command>. In this approach, the idea is not to keep tables at their minimum size, but to maintain steady-state usage of disk space: each table occupies space equivalent to its minimum size plus however much space gets used up between vacuumings. Although <command>VACUUM FULL</command> can be used to shrink a table back to its minimum size and return the disk space to the operating system, there is not much point in this if the table will just grow again in the future. Thus, moderately-frequent standard <command>VACUUM</command> runs are a better approach than infrequent <command>VACUUM FULL</command> runs for maintaining heavily-updated tables."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:190(para) 
msgid "Some administrators prefer to schedule vacuuming themselves, for example doing all the work at night when load is low. The difficulty with doing vacuuming according to a fixed schedule is that if a table has an unexpected spike in update activity, it may get bloated to the point that <command>VACUUM FULL</command> is really necessary to reclaim space. Using the autovacuum daemon alleviates this problem, since the daemon schedules vacuuming dynamically in response to update activity. It is unwise to disable the daemon completely unless you have an extremely predictable workload. One possible compromise is to set the daemon's parameters so that it will only react to unusually heavy update activity, thus keeping things from getting out of hand, while scheduled <command>VACUUM</command>s are expected to do the bulk of the work when the load is typical."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:206(para) 
msgid "For those not using autovacuum, a typical approach is to schedule a database-wide <command>VACUUM</command> once a day during a low-usage period, supplemented by more frequent vacuuming of heavily-updated tables as necessary. (Some installations with extremely high update rates vacuum their busiest tables as often as once every few minutes.) If you have multiple databases in a cluster, don't forget to <command>VACUUM</command> each one; the program <xref linkend=\"app-vacuumdb\"/> might be helpful."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:218(para) 
msgid "Plain <command>VACUUM</command> may not be satisfactory when a table contains large numbers of dead row versions as a result of massive update or delete activity. If you have such a table and you need to reclaim the excess disk space it occupies, you will need to use <command>VACUUM FULL</command>, or alternatively <xref linkend=\"sql-cluster\"/> or one of the table-rewriting variants of <xref linkend=\"sql-altertable\"/>. These commands rewrite an entire new copy of the table and build new indexes for it. All these options require exclusive lock. Note that they also temporarily use extra disk space approximately equal to the size of the table, since the old copies of the table and indexes can't be released until the new ones are complete."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:236(para) 
msgid "If you have a table whose entire contents are deleted on a periodic basis, consider doing it with <xref linkend=\"sql-truncate\"/> rather than using <command>DELETE</command> followed by <command>VACUUM</command>. <command>TRUNCATE</command> removes the entire content of the table immediately, without requiring a subsequent <command>VACUUM</command> or <command>VACUUM FULL</command> to reclaim the now-unused disk space. The disadvantage is that strict MVCC semantics are violated."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:251(title) 
msgid "Updating Planner Statistics"
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:254(primary) 
msgid "statistics"
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:255(secondary) 
msgid "of the planner"
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:259(primary) 
msgid "ANALYZE"
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:262(para) 
msgid "The <productname>PostgreSQL</productname> query planner relies on statistical information about the contents of tables in order to generate good plans for queries. These statistics are gathered by the <xref linkend=\"sql-analyze\"/> command, which can be invoked by itself or as an optional step in <command>VACUUM</command>. It is important to have reasonably accurate statistics, otherwise poor choices of plans might degrade database performance."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:273(para) 
msgid "The autovacuum daemon, if enabled, will automatically issue <command>ANALYZE</command> commands whenever the content of a table has changed sufficiently. However, administrators might prefer to rely on manually-scheduled <command>ANALYZE</command> operations, particularly if it is known that update activity on a table will not affect the statistics of <quote>interesting</quote> columns. The daemon schedules <command>ANALYZE</command> strictly as a function of the number of rows inserted or updated; it has no knowledge of whether that will lead to meaningful statistical changes."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:285(para) 
msgid "As with vacuuming for space recovery, frequent updates of statistics are more useful for heavily-updated tables than for seldom-updated ones. But even for a heavily-updated table, there might be no need for statistics updates if the statistical distribution of the data is not changing much. A simple rule of thumb is to think about how much the minimum and maximum values of the columns in the table change. For example, a <type>timestamp</type> column that contains the time of row update will have a constantly-increasing maximum value as rows are added and updated; such a column will probably need more frequent statistics updates than, say, a column containing URLs for pages accessed on a website. The URL column might receive changes just as often, but the statistical distribution of its values probably changes relatively slowly."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:301(para) 
msgid "It is possible to run <command>ANALYZE</command> on specific tables and even just specific columns of a table, so the flexibility exists to update some statistics more frequently than others if your application requires it. In practice, however, it is usually best to just analyze the entire database, because it is a fast operation. <command>ANALYZE</command> uses a statistically random sampling of the rows of a table rather than reading every single row."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:312(para) 
msgid "Although per-column tweaking of <command>ANALYZE</command> frequency might not be very productive, you might find it worthwhile to do per-column adjustment of the level of detail of the statistics collected by <command>ANALYZE</command>. Columns that are heavily used in <literal>WHERE</literal> clauses and have highly irregular data distributions might require a finer-grain data histogram than other columns. See <command>ALTER TABLE SET STATISTICS</command>, or change the database-wide default using the <xref linkend=\"guc-default-statistics-target\"/> configuration parameter."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:323(para) 
msgid "Also, by default there is limited information available about the selectivity of functions. However, if you create an expression index that uses a function call, useful statistics will be gathered about the function, which can greatly improve query plans that use the expression index."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:334(title) 
msgid "Preventing Transaction ID Wraparound Failures"
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:337(primary) 
msgid "transaction ID"
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:338(secondary) 
msgid "wraparound"
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:341(para) 
msgid "<productname>PostgreSQL</productname>'s MVCC transaction semantics depend on being able to compare transaction ID (<acronym>XID</acronym>) numbers: a row version with an insertion XID greater than the current transaction's XID is <quote>in the future</quote> and should not be visible to the current transaction. But since transaction IDs have limited size (32 bits) a cluster that runs for a long time (more than 4 billion transactions) would suffer <firstterm>transaction ID wraparound</firstterm>: the XID counter wraps around to zero, and all of a sudden transactions that were in the past appear to be in the future â€” which means their output become invisible. In short, catastrophic data loss. (Actually the data is still there, but that's cold comfort if you cannot get at it.) To avoid this, it is necessary to vacuum every table in every database at least once every two billion transactions."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:357(para) 
msgid "The reason that periodic vacuuming solves the problem is that <productname>PostgreSQL</productname> reserves a special XID as <literal>FrozenXID</literal>. This XID does not follow the normal XID comparison rules and is always considered older than every normal XID. Normal XIDs are compared using modulo-2<superscript>31</superscript> arithmetic. This means that for every normal XID, there are two billion XIDs that are <quote>older</quote> and two billion that are <quote>newer</quote>; another way to say it is that the normal XID space is circular with no endpoint. Therefore, once a row version has been created with a particular normal XID, the row version will appear to be <quote>in the past</quote> for the next two billion transactions, no matter which normal XID we are talking about. If the row version still exists after more than two billion transactions, it will suddenly appear to be in the future. To prevent this, old row versions must be reassigned the XID <literal>FrozenXID</literal> sometime before they reach the two-billion-transactions-old mark. Once they are assigned this special XID, they will appear to be <quote>in the past</quote> to all normal transactions regardless of wraparound issues, and so such row versions will be valid until deleted, no matter how long that is. This reassignment of old XIDs is handled by <command>VACUUM</command>."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:381(para) 
msgid "<xref linkend=\"guc-vacuum-freeze-min-age\"/> controls how old an XID value has to be before it's replaced with <literal>FrozenXID</literal>. Larger values of this setting preserve transactional information longer, while smaller values increase the number of transactions that can elapse before the table must be vacuumed again."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:390(para) 
msgid "<command>VACUUM</command> normally skips pages that don't have any dead row versions, but those pages might still have row versions with old XID values. To ensure all old XIDs have been replaced by <literal>FrozenXID</literal>, a scan of the whole table is needed. <xref linkend=\"guc-vacuum-freeze-table-age\"/> controls when <command>VACUUM</command> does that: a whole table sweep is forced if the table hasn't been fully scanned for <varname>vacuum_freeze_table_age</varname> minus <varname>vacuum_freeze_min_age</varname> transactions. Setting it to 0 forces <command>VACUUM</command> to always scan all pages, effectively ignoring the visibility map."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:403(para) 
msgid "The maximum time that a table can go unvacuumed is two billion transactions minus the <varname>vacuum_freeze_min_age</varname> value at the time <command>VACUUM</command> last scanned the whole table. If it were to go unvacuumed for longer than that, data loss could result. To ensure that this does not happen, autovacuum is invoked on any table that might contain XIDs older than the age specified by the configuration parameter <xref linkend=\"guc-autovacuum-freeze-max-age\"/>. (This will happen even if autovacuum is disabled.)"
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:415(para) 
msgid "This implies that if a table is not otherwise vacuumed, autovacuum will be invoked on it approximately once every <varname>autovacuum_freeze_max_age</varname> minus <varname>vacuum_freeze_min_age</varname> transactions. For tables that are regularly vacuumed for space reclamation purposes, this is of little importance. However, for static tables (including tables that receive inserts, but no updates or deletes), there is no need to vacuum for space reclamation, so it can be useful to try to maximize the interval between forced autovacuums on very large static tables. Obviously one can do this either by increasing <varname>autovacuum_freeze_max_age</varname> or decreasing <varname>vacuum_freeze_min_age</varname>."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:430(para) 
msgid "The effective maximum for <varname>vacuum_freeze_table_age</varname> is 0.95 * <varname>autovacuum_freeze_max_age</varname>; a setting higher than that will be capped to the maximum. A value higher than <varname>autovacuum_freeze_max_age</varname> wouldn't make sense because an anti-wraparound autovacuum would be triggered at that point anyway, and the 0.95 multiplier leaves some breathing room to run a manual <command>VACUUM</command> before that happens. As a rule of thumb, <command>vacuum_freeze_table_age</command> should be set to a value somewhat below <varname>autovacuum_freeze_max_age</varname>, leaving enough gap so that a regularly scheduled <command>VACUUM</command> or an autovacuum triggered by normal delete and update activity is run in that window. Setting it too close could lead to anti-wraparound autovacuums, even though the table was recently vacuumed to reclaim space, whereas lower values lead to more frequent whole-table scans."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:447(para) 
msgid "The sole disadvantage of increasing <varname>autovacuum_freeze_max_age</varname> (and <varname>vacuum_freeze_table_age</varname> along with it) is that the <filename>pg_clog</filename> subdirectory of the database cluster will take more space, because it must store the commit status of all transactions back to the <varname>autovacuum_freeze_max_age</varname> horizon. The commit status uses two bits per transaction, so if <varname>autovacuum_freeze_max_age</varname> is set to its maximum allowed value of a little less than two billion, <filename>pg_clog</filename> can be expected to grow to about half a gigabyte. If this is trivial compared to your total database size, setting <varname>autovacuum_freeze_max_age</varname> to its maximum allowed value is recommended. Otherwise, set it depending on what you are willing to allow for <filename>pg_clog</filename> storage. (The default, 200 million transactions, translates to about 50MB of <filename>pg_clog</filename> storage.)"
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:464(para) 
msgid "One disadvantage of decreasing <varname>vacuum_freeze_min_age</varname> is that it might cause <command>VACUUM</command> to do useless work: changing a table row's XID to <literal>FrozenXID</literal> is a waste of time if the row is modified soon thereafter (causing it to acquire a new XID). So the setting should be large enough that rows are not frozen until they are unlikely to change any more. Another disadvantage of decreasing this setting is that details about exactly which transaction inserted or modified a row will be lost sooner. This information sometimes comes in handy, particularly when trying to analyze what went wrong after a database failure. For these two reasons, decreasing this setting is not recommended except for completely static tables."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:495(programlisting) 
#, no-wrap
msgid "\nSELECT relname, age(relfrozenxid) FROM pg_class WHERE relkind = 'r';\nSELECT datname, age(datfrozenxid) FROM pg_database;\n"
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:478(para) 
msgid "To track the age of the oldest XIDs in a database, <command>VACUUM</command> stores XID statistics in the system tables <structname>pg_class</structname> and <structname>pg_database</structname>. In particular, the <structfield>relfrozenxid</structfield> column of a table's <structname>pg_class</structname> row contains the freeze cutoff XID that was used by the last whole-table <command>VACUUM</command> for that table. All normal XIDs older than this cutoff XID are guaranteed to have been replaced by <literal>FrozenXID</literal> within the table. Similarly, the <structfield>datfrozenxid</structfield> column of a database's <structname>pg_database</structname> row is a lower bound on the normal XIDs appearing in that database â€” it is just the minimum of the per-table <structfield>relfrozenxid</structfield> values within the database. A convenient way to examine this information is to execute queries such as: <placeholder-1/> The <literal>age</literal> column measures the number of transactions from the cutoff XID to the current transaction's XID."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:504(para) 
msgid "<command>VACUUM</command> normally only scans pages that have been modified since the last vacuum, but <structfield>relfrozenxid</structfield> can only be advanced when the whole table is scanned. The whole table is scanned when <structfield>relfrozenxid</structfield> is more than <varname>vacuum_freeze_table_age</varname> transactions old, when <command>VACUUM</command>'s <literal>FREEZE</literal> option is used, or when all pages happen to require vacuuming to remove dead row versions. When <command>VACUUM</command> scans the whole table, after it's finished <literal>age(relfrozenxid)</literal> should be a little more than the <varname>vacuum_freeze_min_age</varname> setting that was used (more by the number of transactions started since the <command>VACUUM</command> started). If no whole-table-scanning <command>VACUUM</command> is issued on the table until <varname>autovacuum_freeze_max_age</varname> is reached, an autovacuum will soon be forced for the table."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:527(programlisting) 
#, no-wrap
msgid "\nWARNING:  database \"mydb\" must be vacuumed within 177009986 transactions\nHINT:  To avoid a database shutdown, execute a database-wide VACUUM in \"mydb\".\n"
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:541(programlisting) 
#, no-wrap
msgid "\nERROR:  database is not accepting commands to avoid wraparound data loss in database \"mydb\"\nHINT:  Stop the postmaster and use a standalone backend to VACUUM in \"mydb\".\n"
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:521(para) 
msgid "If for some reason autovacuum fails to clear old XIDs from a table, the system will begin to emit warning messages like this when the database's oldest XIDs reach ten million transactions from the wraparound point: <placeholder-1/> (A manual <command>VACUUM</command> should fix the problem, as suggested by the hint; but note that the <command>VACUUM</command> must be performed by a superuser, else it will fail to process system catalogs and thus not be able to advance the database's <structfield>datfrozenxid</structfield>.) If these warnings are ignored, the system will shut down and refuse to start any new transactions once there are fewer than 1 million transactions left until wraparound: <placeholder-2/> The 1-million-transaction safety margin exists to let the administrator recover without data loss, by manually executing the required <command>VACUUM</command> commands. However, since the system will not execute commands once it has gone into the safety shutdown mode, the only way to do this is to stop the server and use a single-user backend to execute <command>VACUUM</command>. The shutdown mode is not enforced by a single-user backend. See the <xref linkend=\"app-postgres\"/> reference page for details about using a single-user backend."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:559(title) 
msgid "The Autovacuum Daemon"
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:562(primary) 
msgid "autovacuum"
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:563(secondary) 
msgid "general information"
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:565(para) 
msgid "<productname>PostgreSQL</productname> has an optional but highly recommended feature called <firstterm>autovacuum</firstterm>, whose purpose is to automate the execution of <command>VACUUM</command> and <command>ANALYZE </command> commands. When enabled, autovacuum checks for tables that have had a large number of inserted, updated or deleted tuples. These checks use the statistics collection facility; therefore, autovacuum cannot be used unless <xref linkend=\"guc-track-counts\"/> is set to <literal>true</literal>. In the default configuration, autovacuuming is enabled and the related configuration parameters are appropriately set."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:579(para) 
msgid "The <quote>autovacuum daemon</quote> actually consists of multiple processes. There is a persistent daemon process, called the <firstterm>autovacuum launcher</firstterm>, which is in charge of starting <firstterm>autovacuum worker</firstterm> processes for all databases. The launcher will distribute the work across time, attempting to start one worker within each database every <xref linkend=\"guc-autovacuum-naptime\"/> seconds. (Therefore, if the installation has <replaceable>N</replaceable> databases, a new worker will be launched every <varname>autovacuum_naptime</varname>/<replaceable>N</replaceable> seconds.) A maximum of <xref linkend=\"guc-autovacuum-max-workers\"/> worker processes are allowed to run at the same time. If there are more than <varname>autovacuum_max_workers</varname> databases to be processed, the next database will be processed as soon as the first worker finishes. Each worker process will check each table within its database and execute <command>VACUUM</command> and/or <command>ANALYZE</command> as needed."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:597(para) 
msgid "If several large tables all become eligible for vacuuming in a short amount of time, all autovacuum workers might become occupied with vacuuming those tables for a long period. This would result in other tables and databases not being vacuumed until a worker became available. There is no limit on how many workers might be in a single database, but workers do try to avoid repeating work that has already been done by other workers. Note that the number of running workers does not count towards <xref linkend=\"guc-max-connections\"/> or <xref linkend=\"guc-superuser-reserved-connections\"/> limits."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:617(programlisting) 
#, no-wrap
msgid "\nvacuum threshold = vacuum base threshold + vacuum scale factor * number of tuples\n"
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:609(para) 
msgid "Tables whose <structfield>relfrozenxid</structfield> value is more than <xref linkend=\"guc-autovacuum-freeze-max-age\"/> transactions old are always vacuumed (this also applies to those tables whose freeze max age has been modified via storage parameters; see below). Otherwise, if the number of tuples obsoleted since the last <command>VACUUM</command> exceeds the <quote>vacuum threshold</quote>, the table is vacuumed. The vacuum threshold is defined as: <placeholder-1/> where the vacuum base threshold is <xref linkend=\"guc-autovacuum-vacuum-threshold\"/>, the vacuum scale factor is <xref linkend=\"guc-autovacuum-vacuum-scale-factor\"/>, and the number of tuples is <structname>pg_class</structname>.<structfield>reltuples</structfield>. The number of obsolete tuples is obtained from the statistics collector; it is a semi-accurate count updated by each <command>UPDATE</command> and <command>DELETE</command> operation. (It is only semi-accurate because some information might be lost under heavy load.) If the <structfield>relfrozenxid</structfield> value of the table is more than <varname>vacuum_freeze_table_age</varname> transactions old, the whole table is scanned to freeze old tuples and advance <structfield>relfrozenxid</structfield>, otherwise only pages that have been modified since the last vacuum are scanned."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:639(programlisting) 
#, no-wrap
msgid "\nanalyze threshold = analyze base threshold + analyze scale factor * number of tuples\n"
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:637(para) 
msgid "For analyze, a similar condition is used: the threshold, defined as: <placeholder-1/> is compared to the total number of tuples inserted, updated, or deleted since the last <command>ANALYZE</command>."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:646(para) 
msgid "Temporary tables cannot be accessed by autovacuum. Therefore, appropriate vacuum and analyze operations should be performed via session SQL commands."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:652(para) 
msgid "The default thresholds and scale factors are taken from <filename>postgresql.conf</filename>, but it is possible to override them on a table-by-table basis; see <xref linkend=\"sql-createtable-storage-parameters\" endterm=\"sql-createtable-storage-parameters-title\"/> for more information. If a setting has been changed via storage parameters, that value is used; otherwise the global settings are used. See <xref linkend=\"runtime-config-autovacuum\"/> for more details on the global settings."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:664(para) 
msgid "Besides the base threshold values and scale factors, there are six more autovacuum parameters that can be set for each table via storage parameters. The first parameter, <literal>autovacuum_enabled</literal>, can be set to <literal>false</literal> to instruct the autovacuum daemon to skip that particular table entirely. In this case autovacuum will only touch the table if it must do so to prevent transaction ID wraparound. Another two parameters, <varname>autovacuum_vacuum_cost_delay</varname> and <varname>autovacuum_vacuum_cost_limit</varname>, are used to set table-specific values for the cost-based vacuum delay feature (see <xref linkend=\"runtime-config-resource-vacuum-cost\"/>). <varname>autovacuum_freeze_min_age</varname>, <varname>autovacuum_freeze_max_age</varname> and <varname>autovacuum_freeze_table_age</varname> are used to set values for <xref linkend=\"guc-vacuum-freeze-min-age\"/>, <xref linkend=\"guc-autovacuum-freeze-max-age\"/> and <xref linkend=\"guc-vacuum-freeze-table-age\"/> respectively."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:686(para) 
msgid "When multiple workers are running, the cost limit is <quote>balanced</quote> among all the running workers, so that the total impact on the system is the same, regardless of the number of workers actually running."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:697(title) 
msgid "Routine Reindexing"
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:700(primary) 
msgid "reindex"
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:703(para) 
msgid "In some situations it is worthwhile to rebuild indexes periodically with the <xref linkend=\"sql-reindex\"/> command."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:709(para) 
msgid "B-tree index pages that have become completely empty are reclaimed for re-use. However, there is still a possibility of inefficient use of space: if all but a few index keys on a page have been deleted, the page remains allocated. Therefore, a usage pattern in which most, but not all, keys in each range are eventually deleted will see poor use of space. For such usage patterns, periodic reindexing is recommended."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:719(para) 
msgid "The potential for bloat in non-B-tree indexes has not been well researched. It is a good idea to periodically monitor the index's physical size when using any non-B-tree index type."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:725(para) 
msgid "Also, for B-tree indexes, a freshly-constructed index is slightly faster to access than one that has been updated many times because logically adjacent pages are usually also physically adjacent in a newly built index. (This consideration does not apply to non-B-tree indexes.) It might be worthwhile to reindex periodically just to improve access speed."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:736(title) 
msgid "Log File Maintenance"
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:739(primary) 
msgid "server log"
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:740(secondary) 
msgid "log file maintenance"
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:743(para) 
msgid "It is a good idea to save the database server's log output somewhere, rather than just discarding it via <filename>/dev/null</filename>. The log output is invaluable when diagnosing problems. However, the log output tends to be voluminous (especially at higher debug levels) so you won't want to save it indefinitely. You need to <emphasis>rotate</emphasis> the log files so that new log files are started and old ones removed after a reasonable period of time."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:754(para) 
msgid "If you simply direct the <systemitem>stderr</systemitem> of <command>postgres</command> into a file, you will have log output, but the only way to truncate the log file is to stop and restart the server. This might be acceptable if you are using <productname>PostgreSQL</productname> in a development environment, but few production servers would find this behavior acceptable."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:764(para) 
msgid "A better approach is to send the server's <systemitem>stderr</systemitem> output to some type of log rotation program. There is a built-in log rotation facility, which you can use by setting the configuration parameter <varname>logging_collector</varname> to <literal>true</literal> in <filename>postgresql.conf</filename>. The control parameters for this program are described in <xref linkend=\"runtime-config-logging-where\"/>. You can also use this approach to capture the log data in machine readable <acronym>CSV</acronym> (comma-separated values) format."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:789(programlisting) 
#, no-wrap
msgid "\npg_ctl start | rotatelogs /var/log/pgsql_log 86400\n"
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:776(para) 
msgid "Alternatively, you might prefer to use an external log rotation program if you have one that you are already using with other server software. For example, the <application>rotatelogs</application> tool included in the <productname>Apache</productname> distribution can be used with <productname>PostgreSQL</productname>. To do this, just pipe the server's <systemitem>stderr</systemitem> output to the desired program. If you start the server with <command>pg_ctl</command>, then <systemitem>stderr</systemitem> is already redirected to <systemitem>stdout</systemitem>, so you just need a pipe command, for example: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:794(para) 
msgid "Another production-grade approach to managing log output is to send it to <application>syslog</application> and let <application>syslog</application> deal with file rotation. To do this, set the configuration parameter <varname>log_destination</varname> to <literal>syslog</literal> (to log to <application>syslog</application> only) in <filename>postgresql.conf</filename>. Then you can send a <literal>SIGHUP</literal> signal to the <application>syslog</application> daemon whenever you want to force it to start writing a new log file. If you want to automate log rotation, the <application>logrotate</application> program can be configured to work with log files from <application>syslog</application>."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:808(para) 
msgid "On many systems, however, <application>syslog</application> is not very reliable, particularly with large log messages; it might truncate or drop messages just when you need them the most. Also, on <productname>Linux</productname>, <application>syslog</application> will flush each message to disk, yielding poor performance. (You can use a <quote><literal>-</literal></quote> at the start of the file name in the <application>syslog</application> configuration file to disable syncing.)"
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:817(para) 
msgid "Note that all the solutions described above take care of starting new log files at configurable intervals, but they do not handle deletion of old, no-longer-useful log files. You will probably want to set up a batch job to periodically delete old log files. Another possibility is to configure the rotation program so that old log files are overwritten cyclically."
msgstr ""

#: /tmp/cicero-wtof/maintenance.xml:826(para) 
msgid "<ulink url=\"http://pgfouine.projects.postgresql.org/\">pgFouine</ulink> is an external project that does sophisticated log file analysis. <ulink url=\"http://bucardo.org/wiki/Check_postgres\">check_postgres</ulink> provides Nagios alerts when important messages appear in the log files, as well as detection of many other extraordinary conditions."
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2.
#: /tmp/cicero-wtof/maintenance.xml:0(None) 
msgid "translator-credits"
msgstr ""

