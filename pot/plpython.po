msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2011-09-11 06:57+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: /tmp/cicero-ivSD/plpython.xml:5(title) 
msgid "PL/Python - Python Procedural Language"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:7(primary) 
msgid "PL/Python"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:8(primary) 
msgid "Python"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:10(para) 
msgid "The <application>PL/Python</application> procedural language allows <productname>PostgreSQL</productname> functions to be written in the <ulink url=\"http://www.python.org\">Python language</ulink>."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:16(para) 
msgid "To install PL/Python in a particular database, use <literal>CREATE EXTENSION plpythonu</literal>, or from the shell command line use <literal>createlang plpythonu <replaceable>dbname</replaceable></literal> (but see also <xref linkend=\"plpython-python23\"/>)."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:24(para) 
msgid "If a language is installed into <literal>template1</literal>, all subsequently created databases will have the language installed automatically."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:30(para) 
msgid "As of <productname>PostgreSQL</productname> 7.4, PL/Python is only available as an <quote>untrusted</quote> language, meaning it does not offer any way of restricting what users can do in it. It has therefore been renamed to <literal>plpythonu</literal>. The trusted variant <literal>plpython</literal> might become available again in future, if a new secure execution mechanism is developed in Python. The writer of a function in untrusted PL/Python must take care that the function cannot be used to do anything unwanted, since it will be able to do anything that could be done by a user logged in as the database administrator. Only superusers can create functions in untrusted languages such as <literal>plpythonu</literal>."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:45(para) 
msgid "Users of source packages must specially enable the build of PL/Python during the installation process. (Refer to the installation instructions for more information.) Users of binary packages might find PL/Python in a separate subpackage."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:54(title) 
msgid "Python 2 vs. Python 3"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:66(para) 
msgid "The PostgreSQL language named <literal>plpython2u</literal> implements PL/Python based on the Python 2 language variant."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:73(para) 
msgid "The PostgreSQL language named <literal>plpython3u</literal> implements PL/Python based on the Python 3 language variant."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:80(para) 
msgid "The language named <literal>plpythonu</literal> implements PL/Python based on the default Python language variant, which is currently Python 2. (This default is independent of what any local Python installations might consider to be their <quote>default</quote>, for example, what <filename>/usr/bin/python</filename> might be.) The default will probably be changed to Python 3 in a distant future release of PostgreSQL, depending on the progress of the migration to Python 3 in the Python community."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:56(para) 
msgid "PL/Python supports both the Python 2 and Python 3 language variants. (The PostgreSQL installation instructions might contain more precise information about the exact supported minor versions of Python.) Because the Python 2 and Python 3 language variants are incompatible in some important aspects, the following naming and transitioning scheme is used by PL/Python to avoid mixing them: <placeholder-1/> It depends on the build configuration or the installed packages whether PL/Python for Python 2 or Python 3 or both are available."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:99(para) 
msgid "The built variant depends on which Python version was found during the installation or which version was explicitly set using the <envar>PYTHON</envar> environment variable; see <xref linkend=\"install-procedure\"/>. To make both variants of PL/Python available in one installation, the source tree has to be configured and built twice."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:114(para) 
msgid "Existing users and users who are currently not interested in Python 3 use the language name <literal>plpythonu</literal> and don't have to change anything for the foreseeable future. It is recommended to gradually <quote>future-proof</quote> the code via migration to Python 2.6/2.7 to simplify the eventual migration to Python 3."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:123(para) 
msgid "In practice, many PL/Python functions will migrate to Python 3 with few or no changes."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:130(para) 
msgid "Users who know that they have heavily Python 2 dependent code and don't plan to ever change it can make use of the <literal>plpython2u</literal> language name. This will continue to work into the very distant future, until Python 2 support might be completely dropped by PostgreSQL."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:140(para) 
msgid "Users who want to dive into Python 3 can use the <literal>plpython3u</literal> language name, which will keep working forever by today's standards. In the distant future, when Python 3 might become the default, they might like to remove the <quote>3</quote> for aesthetic reasons."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:150(para) 
msgid "Daredevils, who want to build a Python-3-only operating system environment, can change the contents of <link linkend=\"catalog-pg-pltemplate\"><structname>pg_pltemplate</structname></link> to make <literal>plpythonu</literal> be equivalent to <literal>plpython3u</literal>, keeping in mind that this would make their installation incompatible with most of the rest of the world."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:109(para) 
msgid "This results in the following usage and migration strategy: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:163(para) 
msgid "See also the document <ulink url=\"http://docs.python.org/py3k/whatsnew/3.0.html\">What's New In Python 3.0</ulink> for more information about porting to Python 3."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:170(para) 
msgid "It is not allowed to use PL/Python based on Python 2 and PL/Python based on Python 3 in the same session, because the symbols in the dynamic modules would clash, which could result in crashes of the PostgreSQL server process. There is a check that prevents mixing Python major versions in a session, which will abort the session if a mismatch is detected. It is possible, however, to use both PL/Python variants in the same database, from separate sessions."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:182(title) 
msgid "PL/Python Functions"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:188(programlisting) 
#, no-wrap
msgid "\nCREATE FUNCTION <replaceable>funcname</replaceable> (<replaceable>argument-list</replaceable>)\n  RETURNS <replaceable>return-type</replaceable>\nAS $$\n  # PL/Python function body\n$$ LANGUAGE plpythonu;\n"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:184(para) 
msgid "Functions in PL/Python are declared via the standard <xref linkend=\"sql-createfunction\"/> syntax: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:197(para) 
msgid "The body of a function is simply a Python script. When the function is called, its arguments are passed as elements of the list <varname>args</varname>; named arguments are also passed as ordinary variables to the Python script. Use of named arguments is usually more readable. The result is returned from the Python code in the usual way, with <literal>return</literal> or <literal>yield</literal> (in case of a result-set statement). If you do not provide a return value, Python returns the default <symbol>None</symbol>. <application>PL/Python</application> translates Python's <symbol>None</symbol> into the SQL null value."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:214(programlisting) 
#, no-wrap
msgid "\nCREATE FUNCTION pymax (a integer, b integer)\n  RETURNS integer\nAS $$\n  if a &gt; b:\n    return a\n  return b\n$$ LANGUAGE plpythonu;\n"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:227(programlisting) 
#, no-wrap
msgid "\ndef __plpython_procedure_pymax_23456():\n  if a &gt; b:\n    return a\n  return b\n"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:210(para) 
msgid "For example, a function to return the greater of two integers can be defined as: <placeholder-1/> The Python code that is given as the body of the function definition is transformed into a Python function. For example, the above results in: <placeholder-2/> assuming that 23456 is the OID assigned to the function by <productname>PostgreSQL</productname>."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:245(programlisting) 
#, no-wrap
msgid "\nCREATE FUNCTION pystrip(x text)\n  RETURNS text\nAS $$\n  x = x.strip()  # error\n  return x\n$$ LANGUAGE plpythonu;\n"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:260(programlisting) 
#, no-wrap
msgid "\nCREATE FUNCTION pystrip(x text)\n  RETURNS text\nAS $$\n  global x\n  x = x.strip()  # ok now\n  return x\n$$ LANGUAGE plpythonu;\n"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:238(para) 
msgid "The arguments are set as global variables. Because of the scoping rules of Python, this has the subtle consequence that an argument variable cannot be reassigned inside the function to the value of an expression that involves the variable name itself, unless the variable is redeclared as global in the block. For example, the following won't work: <placeholder-1/> because assigning to <varname>x</varname> makes <varname>x</varname> a local variable for the entire block, and so the <varname>x</varname> on the right-hand side of the assignment refers to a not-yet-assigned local variable <varname>x</varname>, not the PL/Python function parameter. Using the <literal>global</literal> statement, this can be made to work: <placeholder-2/> But it is advisable not to rely on this implementation detail of PL/Python. It is better to treat the function parameters as read-only."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:276(title) 
msgid "Data Values"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:277(para) 
msgid "Generally speaking, the aim of PL/Python is to provide a <quote>natural</quote> mapping between the PostgreSQL and the Python worlds. This informs the data mapping rules described below."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:285(title) 
msgid "Data Type Mapping"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:291(para) 
msgid "PostgreSQL <type>boolean</type> is converted to Python <type>bool</type>."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:297(para) 
msgid "PostgreSQL <type>smallint</type> and <type>int</type> are converted to Python <type>int</type>. PostgreSQL <type>bigint</type> is converted to <type>long</type> in Python 2 and to <type>int</type> in Python 3."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:307(para) 
msgid "PostgreSQL <type>real</type>, <type>double</type>, and <type>numeric</type> are converted to Python <type>float</type>. Note that for the <type>numeric</type> this loses information and can lead to incorrect results. This might be fixed in a future release."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:318(para) 
msgid "PostgreSQL <type>bytea</type> is converted to Python <type>str</type> in Python 2 and to <type>bytes</type> in Python 3. In Python 2, the string should be treated as a byte sequence without any character encoding."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:327(para) 
msgid "All other data types, including the PostgreSQL character string types, are converted to a Python <type>str</type>. In Python 2, this string will be in the PostgreSQL server encoding; in Python 3, it will be a Unicode string like all strings."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:336(para) /tmp/cicero-ivSD/plpython.xml:386(para) 
msgid "For nonscalar data types, see below."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:286(para) 
msgid "Function arguments are converted from their PostgreSQL type to a corresponding Python type: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:348(para) 
msgid "When the PostgreSQL return type is <type>boolean</type>, the return value will be evaluated for truth according to the <emphasis>Python</emphasis> rules. That is, 0 and empty string are false, but notably <literal>'f'</literal> is true."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:357(para) 
msgid "When the PostgreSQL return type is <type>bytea</type>, the return value will be converted to a string (Python 2) or bytes (Python 3) using the respective Python built-ins, with the result being converted <type>bytea</type>."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:366(para) 
msgid "For all other PostgreSQL return types, the returned Python value is converted to a string using the Python built-in <literal>str</literal>, and the result is passed to the input function of the PostgreSQL data type."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:373(para) 
msgid "Strings in Python 2 are required to be in the PostgreSQL server encoding when they are passed to PostgreSQL. Strings that are not valid in the current server encoding will raise an error, but not all encoding mismatches can be detected, so garbage data can still result when this is not done correctly. Unicode strings are converted to the correct encoding automatically, so it can be safer and more convenient to use those. In Python 3, all strings are Unicode strings."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:343(para) 
msgid "Function return values are converted to the declared PostgreSQL return data type as follows: <placeholder-1/> Note that logical mismatches between the declared PostgreSQL return type and the Python data type of the actual return object are not flagged; the value will be converted in any case."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:399(title) 
msgid "Null, None"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:412(programlisting) 
#, no-wrap
msgid "\nCREATE FUNCTION pymax (a integer, b integer)\n  RETURNS integer\nAS $$\n  if (a is None) or (b is None):\n    return None\n  if a &gt; b:\n    return a\n  return b\n$$ LANGUAGE plpythonu;\n"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:400(para) 
msgid "If an SQL null value<indexterm><primary>null value</primary><secondary sortas=\"PL/Python\">in PL/Python</secondary></indexterm> is passed to a function, the argument value will appear as <symbol>None</symbol> in Python. For example, the function definition of <function>pymax</function> shown in <xref linkend=\"plpython-funcs\"/> will return the wrong answer for null inputs. We could add <literal>STRICT</literal> to the function definition to make <productname>PostgreSQL</productname> do something more reasonable: if a null value is passed, the function will not be called at all, but will just return a null result automatically. Alternatively, we could check for null inputs in the function body: <placeholder-1/> As shown above, to return an SQL null value from a PL/Python function, return the value <symbol>None</symbol>. This can be done whether the function is strict or not."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:431(title) 
msgid "Arrays, Lists"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:437(programlisting) 
#, no-wrap
msgid "\nCREATE FUNCTION return_arr()\n  RETURNS int[]\nAS $$\nreturn (1, 2, 3, 4, 5)\n$$ LANGUAGE plpythonu;\n\nSELECT return_arr();\n return_arr  \n-------------\n {1,2,3,4,5}\n(1 row)\n"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:454(programlisting) 
#, no-wrap
msgid "\nCREATE FUNCTION return_str_arr()\n  RETURNS varchar[]\nAS $$\nreturn \"hello\"\n$$ LANGUAGE plpythonu;\n\nSELECT return_str_arr();\n return_str_arr\n----------------\n {h,e,l,l,o}\n(1 row)\n"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:432(para) 
msgid "SQL array values are passed into PL/Python as a Python list. To return an SQL array value out of a PL/Python function, return a Python sequence, for example a list or tuple: <placeholder-1/> Note that in Python, strings are sequences, which can have undesirable effects that might be familiar to Python programmers: <placeholder-2/>"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:471(title) 
msgid "Composite Types"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:478(programlisting) 
#, no-wrap
msgid "\nCREATE TABLE employee (\n  name text,\n  salary integer,\n  age integer\n);\n\nCREATE FUNCTION overpaid (e employee)\n  RETURNS boolean\nAS $$\n  if e[\"salary\"] &gt; 200000:\n    return True\n  if (e[\"age\"] &lt; 30) and (e[\"salary\"] &gt; 100000):\n    return True\n  return False\n$$ LANGUAGE plpythonu;\n"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:472(para) 
msgid "Composite-type arguments are passed to the function as Python mappings. The element names of the mapping are the attribute names of the composite type. If an attribute in the passed row has the null value, it has the value <symbol>None</symbol> in the mapping. Here is an example: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:501(programlisting) 
#, no-wrap
msgid "\nCREATE TYPE named_value AS (\n  name   text,\n  value  integer\n);\n"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:512(term) 
msgid "Sequence type (a tuple or list, but not a set because it is not indexable)"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:521(programlisting) 
#, no-wrap
msgid "\nCREATE FUNCTION make_pair (name text, value integer)\n  RETURNS named_value\nAS $$\n  return [ name, value ]\n  # or alternatively, as tuple: return ( name, value )\n$$ LANGUAGE plpythonu;\n"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:515(para) 
msgid "Returned sequence objects must have the same number of items as the composite result type has fields. The item with index 0 is assigned to the first field of the composite type, 1 to the second and so on. For example: <placeholder-1/> To return a SQL null for any column, insert <symbol>None</symbol> at the corresponding position."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:537(term) 
msgid "Mapping (dictionary)"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:543(programlisting) 
#, no-wrap
msgid "\nCREATE FUNCTION make_pair (name text, value integer)\n  RETURNS named_value\nAS $$\n  return { \"name\": name, \"value\": value }\n$$ LANGUAGE plpythonu;\n"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:539(para) 
msgid "The value for each result type column is retrieved from the mapping with the column name as key. Example: <placeholder-1/> Any extra dictionary key/value pairs are ignored. Missing keys are treated as errors. To return a SQL null value for any column, insert <symbol>None</symbol> with the corresponding column name as the key."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:560(term) 
msgid "Object (any object providing method <literal>__getattr__</literal>)"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:566(programlisting) 
#, no-wrap
msgid "\nCREATE FUNCTION make_pair (name text, value integer)\n  RETURNS named_value\nAS $$\n  class named_value:\n    def __init__ (self, n, v):\n      self.name = n\n      self.value = v\n  return named_value(name, value)\n\n  # or simply\n  class nv: pass\n  nv.name = name\n  nv.value = value\n  return nv\n$$ LANGUAGE plpythonu;\n"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:562(para) 
msgid "This works the same as a mapping. Example: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:497(para) 
msgid "There are multiple ways to return row or composite types from a Python function. The following examples assume we have: <placeholder-1/> A composite result can be returned as a: <placeholder-2/>"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:591(programlisting) 
#, no-wrap
msgid "\nCREATE FUNCTION multiout_simple(OUT i integer, OUT j integer) AS $$\nreturn (1, 2)\n$$ LANGUAGE plpythonu;\n\nSELECT * FROM multiout_simple();\n"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:589(para) 
msgid "Functions with <literal>OUT</literal> parameters are also supported. For example: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:602(title) 
msgid "Set-returning Functions"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:609(programlisting) 
#, no-wrap
msgid "\nCREATE TYPE greeting AS (\n  how text,\n  who text\n);\n"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:620(term) 
msgid "Sequence type (tuple, list, set)"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:623(programlisting) 
#, no-wrap
msgid "\nCREATE FUNCTION greet (how text)\n  RETURNS SETOF greeting\nAS $$\n  # return tuple containing lists as composite types\n  # all other combinations work also\n  return ( [ how, \"World\" ], [ how, \"PostgreSQL\" ], [ how, \"PL/Python\" ] )\n$$ LANGUAGE plpythonu;\n"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:637(term) 
msgid "Iterator (any object providing <symbol>__iter__</symbol> and <symbol>next</symbol> methods)"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:641(programlisting) 
#, no-wrap
msgid "\nCREATE FUNCTION greet (how text)\n  RETURNS SETOF greeting\nAS $$\n  class producer:\n    def __init__ (self, how, who):\n      self.how = how\n      self.who = who\n      self.ndx = -1\n\n    def __iter__ (self):\n      return self\n\n    def next (self):\n      self.ndx += 1\n      if self.ndx == len(self.who):\n        raise StopIteration\n      return ( self.how, self.who[self.ndx] )\n\n  return producer(how, [ \"World\", \"PostgreSQL\", \"PL/Python\" ])\n$$ LANGUAGE plpythonu;\n"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:668(term) 
msgid "Generator (<literal>yield</literal>)"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:671(programlisting) 
#, no-wrap
msgid "\nCREATE FUNCTION greet (how text)\n  RETURNS SETOF greeting\nAS $$\n  for who in [ \"World\", \"PostgreSQL\", \"PL/Python\" ]:\n    yield ( how, who )\n$$ LANGUAGE plpythonu;\n"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:681(para) 
msgid "Due to Python <ulink url=\"http://bugs.python.org/issue1483133\">bug #1483133</ulink>, some debug versions of Python 2.4 (configured and compiled with option <literal>--with-pydebug</literal>) are known to crash the <productname>PostgreSQL</productname> server when using an iterator to return a set result. Unpatched versions of Fedora 4 contain this bug. It does not happen in production versions of Python or on patched versions of Fedora 4."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:603(para) 
msgid "A <application>PL/Python</application> function can also return sets of scalar or composite types. There are several ways to achieve this because the returned object is internally turned into an iterator. The following examples assume we have composite type: <placeholder-1/> A set result can be returned from a: <placeholder-2/>"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:703(programlisting) 
#, no-wrap
msgid "\nCREATE FUNCTION multiout_simple_setof(n integer, OUT integer, OUT integer) RETURNS SETOF record AS $$\nreturn [(1, 2)] * n\n$$ LANGUAGE plpythonu;\n\nSELECT * FROM multiout_simple_setof(3);\n"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:699(para) 
msgid "Set-returning functions with <literal>OUT</literal> parameters (using <literal>RETURNS SETOF record</literal>) are also supported. For example: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:715(title) 
msgid "Sharing Data"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:716(para) 
msgid "The global dictionary <varname>SD</varname> is available to store data between function calls. This variable is private static data. The global dictionary <varname>GD</varname> is public data, available to all Python functions within a session. Use with care.<indexterm><primary>global data</primary><secondary>in PL/Python</secondary></indexterm>"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:725(para) 
msgid "Each function gets its own execution environment in the Python interpreter, so that global data and function arguments from <function>myfunc</function> are not available to <function>myfunc2</function>. The exception is the data in the <varname>GD</varname> dictionary, as mentioned above."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:735(title) 
msgid "Anonymous Code Blocks"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:741(programlisting) 
#, no-wrap
msgid "\nDO $$\n    # PL/Python code\n$$ LANGUAGE plpythonu;\n"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:737(para) 
msgid "PL/Python also supports anonymous code blocks called with the <xref linkend=\"sql-do\"/> statement: <placeholder-1/> An anonymous code block receives no arguments, and whatever value it might return is discarded. Otherwise it behaves just like a function."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:753(title) 
msgid "Trigger Functions"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:756(primary) 
msgid "trigger"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:757(secondary) 
msgid "in PL/Python"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:765(literal) 
msgid "TD[\"event\"]"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:767(para) 
msgid "contains the event as a string: <literal>INSERT</literal>, <literal>UPDATE</literal>, <literal>DELETE</literal>, or <literal>TRUNCATE</literal>."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:776(literal) 
msgid "TD[\"when\"]"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:778(para) 
msgid "contains one of <literal>BEFORE</literal>, <literal>AFTER</literal>, or <literal>INSTEAD OF</literal>."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:786(literal) 
msgid "TD[\"level\"]"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:788(para) 
msgid "contains <literal>ROW</literal> or <literal>STATEMENT</literal>."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:795(literal) 
msgid "TD[\"new\"]"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:796(literal) 
msgid "TD[\"old\"]"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:798(para) 
msgid "For a row-level trigger, one or both of these fields contain the respective trigger rows, depending on the trigger event."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:806(literal) 
msgid "TD[\"name\"]"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:808(para) 
msgid "contains the trigger name."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:815(literal) 
msgid "TD[\"table_name\"]"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:817(para) 
msgid "contains the name of the table on which the trigger occurred."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:824(literal) 
msgid "TD[\"table_schema\"]"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:826(para) 
msgid "contains the schema of the table on which the trigger occurred."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:833(literal) 
msgid "TD[\"relid\"]"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:835(para) 
msgid "contains the OID of the table on which the trigger occurred."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:842(literal) 
msgid "TD[\"args\"]"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:844(para) 
msgid "If the <command>CREATE TRIGGER</command> command included arguments, they are available in <literal>TD[\"args\"][0]</literal> to <literal>TD[\"args\"][<replaceable>n</replaceable>-1]</literal>."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:760(para) 
msgid "When a function is used as a trigger, the dictionary <literal>TD</literal> contains trigger-related values: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:854(para) 
msgid "If <literal>TD[\"when\"]</literal> is <literal>BEFORE</literal> or <literal>INSTEAD OF</literal> and <literal>TD[\"level\"]</literal> is <literal>ROW</literal>, you can return <literal>None</literal> or <literal>\"OK\"</literal> from the Python function to indicate the row is unmodified, <literal>\"SKIP\"</literal> to abort the event, or if <literal>TD[\"event\"]</literal> is <command>INSERT</command> or <command>UPDATE</command> you can return <literal>\"MODIFY\"</literal> to indicate you've modified the new row. Otherwise the return value is ignored."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:868(title) 
msgid "Database Access"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:870(para) 
msgid "The PL/Python language module automatically imports a Python module called <literal>plpy</literal>. The functions and constants in this module are available to you in the Python code as <literal>plpy.<replaceable>foo</replaceable></literal>."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:878(title) 
msgid "Database Access Functions"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:880(para) 
msgid "The <literal>plpy</literal> module provides two functions called <function>execute</function> and <function>prepare</function>. Calling <function>plpy.execute</function> with a query string and an optional limit argument causes that query to be run and the result to be returned in a result object. The result object emulates a list or dictionary object. The result object can be accessed by row number and column name. It has these additional methods: <function>nrows</function> which returns the number of rows returned by the query, and <function>status</function> which is the <function>SPI_execute()</function> return value. The result object can be modified."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:897(programlisting) 
#, no-wrap
msgid "\nrv = plpy.execute(\"SELECT * FROM my_table\", 5)\n"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:903(programlisting) 
#, no-wrap
msgid "\nfoo = rv[i][\"my_column\"]\n"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:895(para) 
msgid "For example: <placeholder-1/> returns up to 5 rows from <literal>my_table</literal>. If <literal>my_table</literal> has a column <literal>my_column</literal>, it would be accessed as: <placeholder-2/>"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:914(programlisting) 
#, no-wrap
msgid "\nplan = plpy.prepare(\"SELECT last_name FROM my_users WHERE first_name = $1\", [ \"text\" ])\n"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:920(programlisting) 
#, no-wrap
msgid "\nrv = plpy.execute(plan, [ \"name\" ], 5)\n"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:908(para) 
msgid "<indexterm><primary>preparing a query</primary><secondary>in PL/Python</secondary></indexterm> The second function, <function>plpy.prepare</function>, prepares the execution plan for a query. It is called with a query string and a list of parameter types, if you have parameter references in the query. For example: <placeholder-1/><literal>text</literal> is the type of the variable you will be passing for <literal>$1</literal>. After preparing a statement, you use the function <function>plpy.execute</function> to run it: <placeholder-2/> The third argument is the limit and is optional."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:926(para) 
msgid "Query parameters and result row fields are converted between PostgreSQL and Python data types as described in <xref linkend=\"plpython-data\"/>. The exception is that composite types are currently not supported: They will be rejected as query parameters and are converted to strings when appearing in a query result. As a workaround for the latter problem, the query can sometimes be rewritten so that the composite type result appears as a result row rather than as a field of the result row. Alternatively, the resulting string could be parsed apart by hand, but this approach is not recommended because it is not future-proof."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:948(programlisting) 
#, no-wrap
msgid "\nCREATE FUNCTION usesavedplan() RETURNS trigger AS $$\n    if SD.has_key(\"plan\"):\n        plan = SD[\"plan\"]\n    else:\n        plan = plpy.prepare(\"SELECT 1\")\n        SD[\"plan\"] = plan\n    # rest of function\n$$ LANGUAGE plpythonu;\n"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:940(para) 
msgid "When you prepare a plan using the PL/Python module it is automatically saved. Read the SPI documentation (<xref linkend=\"spi\"/>) for a description of what this means. In order to make effective use of this across function calls one needs to use one of the persistent storage dictionaries <literal>SD</literal> or <literal>GD</literal> (see <xref linkend=\"plpython-sharing\"/>). For example: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:963(title) 
msgid "Trapping Errors"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:974(programlisting) 
#, no-wrap
msgid "\nCREATE FUNCTION try_adding_joe() RETURNS text AS $$\n    try:\n        plpy.execute(\"INSERT INTO users(username) VALUES ('joe')\")\n    except plpy.SPIError:\n        return \"something went wrong\"\n    else:\n        return \"Joe added\"\n$$ LANGUAGE plpythonu;\n"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:965(para) 
msgid "Functions accessing the database might encounter errors, which will cause them to abort and raise an exception. Both <function>plpy.execute</function> and <function>plpy.prepare</function> can raise an instance of a subclass of <literal>plpy.SPIError</literal>, which by default will terminate the function. This error can be handled just like any other Python exception, by using the <literal>try/except</literal> construct. For example: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:1001(programlisting) 
#, no-wrap
msgid "\nCREATE FUNCTION insert_fraction(numerator int, denominator int) RETURNS text AS $$\nfrom plpy import spiexceptions\ntry:\n    plan = plpy.prepare(\"INSERT INTO fractions (frac) VALUES ($1 / $2)\", [\"int\", \"int\"])\n    plpy.execute(plan, [numerator, denominator])\nexcept spiexceptions.DivisionByZero:\n    return \"denominator cannot equal zero\"\nexcept spiexceptions.UniqueViolation:\n    return \"already have that fraction\"\nexcept plpy.SPIError, e:\n    return \"other error, SQLSTATE %s\" % e.sqlstate\nelse:\n    return \"fraction inserted\"\n$$ LANGUAGE plpythonu;\n"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:986(para) 
msgid "The actual class of the exception being raised corresponds to the specific condition that caused the error. Refer to <xref linkend=\"errcodes-table\"/> for a list of possible conditions. The module <literal>plpy.spiexceptions</literal> defines an exception class for each <productname>PostgreSQL</productname> condition, deriving their names from the condition name. For instance, <literal>division_by_zero</literal> becomes <literal>DivisionByZero</literal>, <literal>unique_violation</literal> becomes <literal>UniqueViolation</literal>, <literal>fdw_error</literal> becomes <literal>FdwError</literal>, and so on. Each of these exception classes inherits from <literal>SPIError</literal>. This separation makes it easier to handle specific errors, for instance: <placeholder-1/> Note that because all exceptions from the <literal>plpy.spiexceptions</literal> module inherit from <literal>SPIError</literal>, an <literal>except</literal> clause handling it will catch any database access error."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:1023(para) 
msgid "As an alternative way of handling different error conditions, you can catch the <literal>SPIError</literal> exception and determine the specific error condition inside the <literal>except</literal> block by looking at the <literal>sqlstate</literal> attribute of the exception object. This attribute is a string value containing the <quote>SQLSTATE</quote> error code. This approach provides approximately the same functionality"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:1036(title) 
msgid "Explicit Subtransactions"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:1038(para) 
msgid "Recovering from errors caused by database access as described in <xref linkend=\"plpython-trapping\"/> can lead to an undesirable situation where some operations succeed before one of them fails, and after recovering from that error the data is left in an inconsistent state. PL/Python offers a solution to this problem in the form of explicit subtransactions."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:1048(title) 
msgid "Subtransaction Context Managers"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:1053(programlisting) 
#, no-wrap
msgid "\nCREATE FUNCTION transfer_funds() RETURNS void AS $$\ntry:\n    plpy.execute(\"UPDATE accounts SET balance = balance - 100 WHERE account_name = 'joe'\")\n    plpy.execute(\"UPDATE accounts SET balance = balance + 100 WHERE account_name = 'mary'\")\nexcept plpy.SPIError, e:\n    result = \"error transferring funds: %s\" % e.args\nelse:\n    result = \"funds transferred correctly\"\nplan = plpy.prepare(\"INSERT INTO operations (result) VALUES ($1)\", [\"text\"])\nplpy.execute(plan, [result])\n$$ LANGUAGE plpythonu;\n"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:1050(para) 
msgid "Consider a function that implements a transfer between two accounts: <placeholder-1/> If the second <literal>UPDATE</literal> statement results in an exception being raised, this function will report the error, but the result of the first <literal>UPDATE</literal> will nevertheless be committed. In other words, the funds will be withdrawn from Joe's account, but will not be transferred to Mary's account."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:1084(programlisting) 
#, no-wrap
msgid "\nCREATE FUNCTION transfer_funds2() RETURNS void AS $$\ntry:\n    with plpy.subtransaction():\n        plpy.execute(\"UPDATE accounts SET balance = balance - 100 WHERE account_name = 'joe'\")\n        plpy.execute(\"UPDATE accounts SET balance = balance + 100 WHERE account_name = 'mary'\")\nexcept plpy.SPIError, e:\n    result = \"error transferring funds: %s\" % e.args\nelse:\n    result = \"funds transferred correctly\"\nplan = plpy.prepare(\"INSERT INTO operations (result) VALUES ($1)\", [\"text\"])\nplpy.execute(plan, [result])\n$$ LANGUAGE plpythonu;\n"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:1074(para) 
msgid "To avoid such issues, you can wrap your <literal>plpy.execute</literal> calls in an explicit subtransaction. The <literal>plpy</literal> module provides a helper object to manage explicit subtransactions that gets created with the <literal>plpy.subtransaction()</literal> function. Objects created by this function implement the <ulink url=\"http://docs.python.org/library/stdtypes.html#context-manager-types\"> context manager interface</ulink>. Using explicit subtransactions we can rewrite our function as: <placeholder-1/> Note that the use of <literal>try/catch</literal> is still required. Otherwise the exception would propagate to the top of the Python stack and would cause the whole function to abort with a <productname>PostgreSQL</productname> error, so that the <literal>operations</literal> table would not have any row inserted into it. The subtransaction context manager does not trap errors, it only assures that all database operations executed inside its scope will be atomically committed or rolled back. A rollback of the subtransaction block occurs on any kind of exception exit, not only ones caused by errors originating from database access. A regular Python exception raised inside an explicit subtransaction block would also cause the subtransaction to be rolled back."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:1115(title) 
msgid "Older Python Versions"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:1127(programlisting) 
#, no-wrap
msgid "\nCREATE FUNCTION transfer_funds_old() RETURNS void AS $$\ntry:\n    subxact = plpy.subtransaction()\n    subxact.enter()\n    try:\n        plpy.execute(\"UPDATE accounts SET balance = balance - 100 WHERE account_name = 'joe'\")\n        plpy.execute(\"UPDATE accounts SET balance = balance + 100 WHERE account_name = 'mary'\")\n    except:\n        import sys\n        subxact.exit(*sys.exc_info())\n        raise\n    else:\n        subxact.exit(None, None, None)\nexcept plpy.SPIError, e:\n    result = \"error transferring funds: %s\" % e.args\nelse:\n    result = \"funds transferred correctly\"\n\nplan = plpy.prepare(\"INSERT INTO operations (result) VALUES ($1)\", [\"text\"])\nplpy.execute(plan, [result])\n$$ LANGUAGE plpythonu;\n"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:1117(para) 
msgid "Context managers syntax using the <literal>with</literal> keyword is available by default in Python 2.6. If using PL/Python with an older Python version, it is still possible to use explicit subtransactions, although not as transparently. You can call the subtransaction manager's <literal>__enter__</literal> and <literal>__exit__</literal> functions using the <literal>enter</literal> and <literal>exit</literal> convenience aliases. The example function that transfers funds could be written as: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:1153(para) 
msgid "Although context managers were implemented in Python 2.5, to use the <literal>with</literal> syntax in that version you need to use a <ulink url=\"http://docs.python.org/release/2.5/ref/future.html\">future statement</ulink>. Because of implementation details, however, you cannot use future statements in PL/Python functions."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:1166(title) 
msgid "Utility Functions"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:1167(para) 
msgid "The <literal>plpy</literal> module also provides the functions <literal>plpy.debug(<replaceable>msg</replaceable>)</literal>, <literal>plpy.log(<replaceable>msg</replaceable>)</literal>, <literal>plpy.info(<replaceable>msg</replaceable>)</literal>, <literal>plpy.notice(<replaceable>msg</replaceable>)</literal>, <literal>plpy.warning(<replaceable>msg</replaceable>)</literal>, <literal>plpy.error(<replaceable>msg</replaceable>)</literal>, and <literal>plpy.fatal(<replaceable>msg</replaceable>)</literal>.<indexterm><primary>elog</primary><secondary>in PL/Python</secondary></indexterm><function>plpy.error</function> and <function>plpy.fatal</function> actually raise a Python exception which, if uncaught, propagates out to the calling query, causing the current transaction or subtransaction to be aborted. <literal>raise plpy.Error(<replaceable>msg</replaceable>)</literal> and <literal>raise plpy.Fatal(<replaceable>msg</replaceable>)</literal> are equivalent to calling <function>plpy.error</function> and <function>plpy.fatal</function>, respectively. The other functions only generate messages of different priority levels. Whether messages of a particular priority are reported to the client, written to the server log, or both is controlled by the <xref linkend=\"guc-log-min-messages\"/> and <xref linkend=\"guc-client-min-messages\"/> configuration variables. See <xref linkend=\"runtime-config\"/> for more information."
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:1203(programlisting) 
#, no-wrap
msgid "\nplpy.execute(\"UPDATE tbl SET %s = %s WHERE key = %s\" % (\n    plpy.quote_ident(colname),\n    plpy.quote_nullable(newvalue),\n    plpy.quote_literal(keyvalue)))\n"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:1194(para) 
msgid "Another set of utility functions are <literal>plpy.quote_literal(<replaceable>string</replaceable>)</literal>, <literal>plpy.quote_nullable(<replaceable>string</replaceable>)</literal>, and <literal>plpy.quote_ident(<replaceable>string</replaceable>)</literal>. They are equivalent to the built-in quoting functions described in <xref linkend=\"functions-string\"/>. They are useful when constructing ad-hoc queries. A PL/Python equivalent of dynamic SQL from <xref linkend=\"plpgsql-quote-literal-example\"/> would be: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:1213(title) 
msgid "Environment Variables"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:1226(envar) 
msgid "PYTHONHOME"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:1230(envar) 
msgid "PYTHONPATH"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:1234(envar) 
msgid "PYTHONY2K"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:1238(envar) 
msgid "PYTHONOPTIMIZE"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:1242(envar) 
msgid "PYTHONDEBUG"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:1246(envar) 
msgid "PYTHONVERBOSE"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:1250(envar) 
msgid "PYTHONCASEOK"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:1254(envar) 
msgid "PYTHONDONTWRITEBYTECODE"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:1258(envar) 
msgid "PYTHONIOENCODING"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:1262(envar) 
msgid "PYTHONUSERBASE"
msgstr ""

#: /tmp/cicero-ivSD/plpython.xml:1215(para) 
msgid "Some of the environment variables that are accepted by the Python interpreter can also be used to affect PL/Python behavior. They would need to be set in the environment of the main PostgreSQL server process, for example in a start script. The available environment variables depend on the version of Python; see the Python documentation for details. At the time of this writing, the following environment variables have an affect on PL/Python, assuming an adequate Python version: <placeholder-1/> (It appears to be a Python implementation detail beyond the control of PL/Python that some of the environment variables listed on the <command>python</command> man page are only effective in a command-line interpreter and not an embedded Python interpreter.)"
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2.
#: /tmp/cicero-ivSD/plpython.xml:0(None) 
msgid "translator-credits"
msgstr ""

