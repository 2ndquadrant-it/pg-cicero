msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2011-05-26 12:11+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5(title)
msgid "<application>ECPG</application> - Embedded <acronym>SQL</acronym> in C"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:7(primary)
msgid "embedded SQL"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:7(secondary)
msgid "in C"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:8(primary)
msgid "C"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:9(primary)
msgid "ECPG"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:11(para)
msgid "This chapter describes the embedded <acronym>SQL</acronym> package for <productname>PostgreSQL</productname>. It was written by Linus Tolke (<email>linus@epact.se</email>) and Michael Meskes (<email>meskes@postgresql.org</email>). Originally it was written to work with <acronym>C</acronym>. It also works with <acronym>C++</acronym>, but it does not recognize all <acronym>C++</acronym> constructs yet."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:20(para)
msgid "This documentation is quite incomplete. But since this interface is standardized, additional information can be found in many resources about SQL."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:27(title)
msgid "The Concept"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:29(para)
msgid "An embedded SQL program consists of code written in an ordinary programming language, in this case C, mixed with SQL commands in specially marked sections. To build the program, the source code is first passed through the embedded SQL preprocessor, which converts it to an ordinary C program, and afterwards it can be processed by a C compiler."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:38(para)
msgid "Embedded <acronym>SQL</acronym> has advantages over other methods for handling <acronym>SQL</acronym> commands from C code. First, it takes care of the tedious passing of information to and from variables in your <acronym>C</acronym> program. Second, the SQL code in the program is checked at build time for syntactical correctness. Third, embedded <acronym>SQL</acronym> in C is specified in the <acronym>SQL</acronym> standard and supported by many other <acronym>SQL</acronym> database systems. The <productname>PostgreSQL</productname> implementation is designed to match this standard as much as possible, and it is usually possible to port embedded <acronym>SQL</acronym> programs written for other SQL databases to <productname>PostgreSQL</productname> with relative ease."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:59(programlisting)
#, no-wrap
msgid "\nEXEC SQL ...;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:54(para)
msgid "As already stated, programs written for the embedded <acronym>SQL</acronym> interface are normal C programs with special code inserted to perform database-related actions. This special code always has the form: <placeholder-1/> These statements syntactically take the place of a C statement. Depending on the particular statement, they can appear at the global level or within a function. Embedded <acronym>SQL</acronym> statements follow the case-sensitivity rules of normal <acronym>SQL</acronym> code, and not those of C."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:69(para)
msgid "The following sections explain all the embedded SQL statements."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:75(title)
msgid "Connecting to the Database Server"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:79(programlisting)
#, no-wrap
msgid "\nEXEC SQL CONNECT TO <replaceable>target</replaceable> <optional>AS <replaceable>connection-name</replaceable></optional> <optional>USER <replaceable>user-name</replaceable></optional>;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:88(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:94(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:100(replaceable)
msgid "dbname"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:88(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:94(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:100(replaceable)
msgid "hostname"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:88(optional)
msgid "@<placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:88(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:94(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:100(replaceable)
msgid "port"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:88(optional) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:94(optional) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:100(optional)
msgid ":<placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:94(optional) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:100(optional)
msgid "/<placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:94(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:100(replaceable)
msgid "options"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:94(optional) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:100(optional)
msgid "?<placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:94(literal)
msgid "tcp:postgresql://<placeholder-1/><placeholder-2/><placeholder-3/><placeholder-4/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:100(literal)
msgid "unix:postgresql://<placeholder-1/><placeholder-2/><placeholder-3/><placeholder-4/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:105(simpara)
msgid "an SQL string literal containing one of the above forms"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:111(simpara)
msgid "a reference to a character variable containing one of the above forms (see examples)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:118(literal) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:226(literal)
msgid "DEFAULT"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:77(para)
msgid "One connects to a database using the following statement: <placeholder-1/> The <replaceable>target</replaceable> can be specified in the following ways: <placeholder-2/> If you specify the connection target literally (that is, not through a variable reference) and you don't quote the value, then the case-insensitivity rules of normal SQL are applied. In that case you can also double-quote the individual parameters separately as needed. In practice, it is probably less error-prone to use a (single-quoted) string literal or a variable reference. The connection target <literal>DEFAULT</literal> initiates a connection to the default database under the default user name. No separate user name or connection name can be specified in that case."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:140(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:146(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:152(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:158(replaceable)
msgid "username"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:146(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:152(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:158(replaceable)
msgid "password"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:146(literal)
msgid "<placeholder-1/>/<placeholder-2/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:152(literal)
msgid "<placeholder-1/> IDENTIFIED BY <placeholder-2/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:158(literal)
msgid "<placeholder-1/> USING <placeholder-2/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:134(para)
msgid "There are also different ways to specify the user name: <placeholder-1/> As above, the parameters <replaceable>username</replaceable> and <replaceable>password</replaceable> can be an SQL identifier, an SQL string literal, or a reference to a character variable."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:168(para)
msgid "The <replaceable>connection-name</replaceable> is used to handle multiple connections in one program. It can be omitted if a program uses only one connection. The most recently opened connection becomes the current connection, which is used by default when an SQL statement is to be executed (see later in this chapter)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:179(programlisting)
#, no-wrap
msgid "\nEXEC SQL CONNECT TO mydb@sql.mydomain.com;\n\nEXEC SQL CONNECT TO unix:postgresql://sql.mydomain.com/mydb AS myconnection USER john;\n\nEXEC SQL BEGIN DECLARE SECTION;\nconst char *target = \"mydb@sql.mydomain.com\";\nconst char *user = \"john\";\nEXEC SQL END DECLARE SECTION;\n ...\nEXEC SQL CONNECT TO :target USER :user;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:177(para)
msgid "Here are some examples of <command>CONNECT</command> statements: <placeholder-1/> The last form makes use of the variant referred to above as character variable reference. You will see in later sections how C variables can be used in SQL statements when you prefix them with a colon."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:197(para)
msgid "Be advised that the format of the connection target is not specified in the SQL standard. So if you want to develop portable applications, you might want to use something based on the last example above to encapsulate the connection target string somewhere."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:207(title)
msgid "Closing a Connection"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:211(programlisting)
#, no-wrap
msgid "\nEXEC SQL DISCONNECT <optional><replaceable>connection</replaceable></optional>;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:220(replaceable)
msgid "connection-name"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:232(literal)
msgid "CURRENT"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:238(literal)
msgid "ALL"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:209(para)
msgid "To close a connection, use the following statement: <placeholder-1/> The <replaceable>connection</replaceable> can be specified in the following ways: <placeholder-2/> If no connection name is specified, the current connection is closed."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:247(para)
msgid "It is good style that an application always explicitly disconnect from every connection it opened."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:254(title)
msgid "Running SQL Commands"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:256(para)
msgid "Any SQL command can be run from within an embedded SQL application. Below are some examples of how to do that."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:263(programlisting)
#, no-wrap
msgid "\nEXEC SQL CREATE TABLE foo (number integer, ascii char(16));\nEXEC SQL CREATE UNIQUE INDEX num1 ON foo(number);\nEXEC SQL COMMIT;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:261(para)
msgid "Creating a table: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:272(programlisting)
#, no-wrap
msgid "\nEXEC SQL INSERT INTO foo (number, ascii) VALUES (9999, 'doodad');\nEXEC SQL COMMIT;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:270(para)
msgid "Inserting rows: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:280(programlisting)
#, no-wrap
msgid "\nEXEC SQL DELETE FROM foo WHERE number = 9999;\nEXEC SQL COMMIT;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:278(para)
msgid "Deleting rows: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:288(programlisting)
#, no-wrap
msgid "\nEXEC SQL SELECT foo INTO :FooBar FROM table1 WHERE ascii = 'doodad';\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:286(para)
msgid "Single-row select: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:295(programlisting)
#, no-wrap
msgid "\nEXEC SQL DECLARE foo_bar CURSOR FOR\n    SELECT number, ascii FROM foo\n    ORDER BY ascii;\nEXEC SQL OPEN foo_bar;\nEXEC SQL FETCH foo_bar INTO :FooBar, DooDad;\n...\nEXEC SQL CLOSE foo_bar;\nEXEC SQL COMMIT;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:293(para)
msgid "Select using cursors: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:309(programlisting)
#, no-wrap
msgid "\nEXEC SQL UPDATE foo\n    SET ascii = 'foobar'\n    WHERE number = 9999;\nEXEC SQL COMMIT;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:307(para)
msgid "Updates: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:317(para)
msgid "The tokens of the form <literal>:<replaceable>something</replaceable></literal> are <firstterm>host variables</firstterm>, that is, they refer to variables in the C program. They are explained in <xref linkend=\"ecpg-variables\"/>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:325(para)
msgid "In the default mode, statements are committed only when <command>EXEC SQL COMMIT</command> is issued. The embedded SQL interface also supports autocommit of transactions (similar to <application>libpq</application> behavior) via the <option>-t</option> command-line option to <command>ecpg</command> (see below) or via the <literal>EXEC SQL SET AUTOCOMMIT TO ON</literal> statement. In autocommit mode, each command is automatically committed unless it is inside an explicit transaction block. This mode can be explicitly turned off using <literal>EXEC SQL SET AUTOCOMMIT TO OFF</literal>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:339(title)
msgid "Choosing a Connection"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:341(para)
msgid "The SQL statements shown in the previous section are executed on the current connection, that is, the most recently opened one. If an application needs to manage multiple connections, then there are two ways to handle this."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:351(programlisting)
#, no-wrap
msgid "\nEXEC SQL AT <replaceable>connection-name</replaceable> SELECT ...;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:348(para)
msgid "The first option is to explicitly choose a connection for each SQL statement, for example: <placeholder-1/> This option is particularly suitable if the application needs to use several connections in mixed order."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:358(para)
msgid "If your application uses multiple threads of execution, they cannot share a connection concurrently. You must either explicitly control access to the connection (using mutexes) or use a connection for each thread. If each thread uses its own connection, you will need to use the AT clause to specify which connection the thread will use."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:368(programlisting)
#, no-wrap
msgid "\nEXEC SQL SET CONNECTION <replaceable>connection-name</replaceable>;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:365(para)
msgid "The second option is to execute a statement to switch the current connection. That statement is: <placeholder-1/> This option is particularly convenient if many statements are to be executed on the same connection. It is not thread-aware."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:377(title)
msgid "Using Host Variables"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:379(para)
msgid "In <xref linkend=\"ecpg-commands\"/> you saw how you can execute SQL statements from an embedded SQL program. Some of those statements only used fixed values and did not provide a way to insert user-supplied values into statements or have the program process the values returned by the query. Those kinds of statements are not really useful in real applications. This section explains in detail how you can pass data between your C program and the embedded SQL statements using a simple mechanism called <firstterm>host variables</firstterm>. In an embedded SQL program we consider the SQL statements to be <firstterm>guests</firstterm> in the C program code which is the <firstterm>host language</firstterm>. Therefore the variables of the C program are called <firstterm>host variables</firstterm>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:396(title)
msgid "Overview"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:405(programlisting)
#, no-wrap
msgid "\nEXEC SQL INSERT INTO sometable VALUES (:v1, 'foo', :v2);\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:398(para)
msgid "Passing data between the C program and the SQL statements is particularly simple in embedded SQL. Instead of having the program paste the data into the statement, which entails various complications, such as properly quoting the value, you can simply write the name of a C variable into the SQL statement, prefixed by a colon. For example: <placeholder-1/> This statements refers to two C variables named <varname>v1</varname> and <varname>v2</varname> and also uses a regular SQL string literal, to illustrate that you are not restricted to use one kind of data or the other."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:414(para)
msgid "This style of inserting C variables in SQL statements works anywhere a value expression is expected in an SQL statement."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:421(title)
msgid "Declare Sections"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:423(para)
msgid "To pass data from the program to the database, for example as parameters in a query, or to pass data from the database back to the program, the C variables that are intended to contain this data need to be declared in specially marked sections, so the embedded SQL preprocessor is made aware of them."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:433(programlisting)
#, no-wrap
msgid "\nEXEC SQL BEGIN DECLARE SECTION;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:437(programlisting)
#, no-wrap
msgid "\nEXEC SQL END DECLARE SECTION;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:442(programlisting)
#, no-wrap
msgid "\nint   x = 4;\nchar  foo[16], bar[16];\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:451(programlisting)
#, no-wrap
msgid "\nEXEC SQL int i = 4;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:431(para)
msgid "This section starts with: <placeholder-1/> and ends with: <placeholder-2/> Between those lines, there must be normal C variable declarations, such as: <placeholder-3/> As you can see, you can optionally assign an initial value to the variable. The variable's scope is determined by the location of its declaring section within the program. You can also declare variables with the following syntax which implicitly creates a declare section: <placeholder-4/> You can have as many declare sections in a program as you like."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:457(para)
msgid "The declarations are also echoed to the output file as normal C variables, so there's no need to declare them again. Variables that are not intended to be used in SQL commands can be declared normally outside these special sections."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:464(para)
msgid "The definition of a structure or union also must be listed inside a <literal>DECLARE</literal> section. Otherwise the preprocessor cannot handle these types since it does not know the definition."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:472(title)
msgid "Different types of host variables"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:473(para)
msgid "As a host variable you can also use arrays, typedefs, structs and pointers. Moreover there are special types of host variables that exist only in ECPG."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:483(term)
msgid "Arrays"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:488(programlisting)
#, no-wrap
msgid "\nEXEC SQL BEGIN DECLARE SECTION;\n    char str[50];\nEXEC SQL END DECLARE SECTION;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:485(para)
msgid "One of the most common uses of an array declaration is probably the allocation of a char array as in: <placeholder-1/> Note that you have to take care of the length for yourself. If you use this host variable as the target variable of a query which returns a string with more than 49 characters, a buffer overflow occurs."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:501(term)
msgid "Typedefs"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:506(programlisting)
#, no-wrap
msgid "\nEXEC SQL BEGIN DECLARE SECTION;\n    typedef char mychartype[40];\n    typedef long serial_t;\nEXEC SQL END DECLARE SECTION;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:513(programlisting)
#, no-wrap
msgid "\nEXEC SQL TYPE serial_t IS long;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:503(para)
msgid "Use the <literal>typedef</literal> keyword to map new types to already existing types. <placeholder-1/> Note that you could also use: <placeholder-2/> This declaration does not need to be part of a declare section."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:522(term)
msgid "Pointers"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:524(para)
msgid "You can declare pointers to the most common types. Note however that you cannot use pointers as target variables of queries without auto-allocation. See <xref linkend=\"ecpg-descriptors\"/> for more information on auto-allocation."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:530(programlisting)
#, no-wrap
msgid "\nEXEC SQL BEGIN DECLARE SECTION;\n    int   *intp;\n    char **charp;\nEXEC SQL END DECLARE SECTION;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:540(term)
msgid "Special types of variables"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:542(para)
msgid "ECPG contains some special types that help you to interact easily with data from the SQL server. For example it has implemented support for the <type>varchar</type>, <type>numeric</type>, <type>date</type>, <type>timestamp</type>, and <type>interval</type> types. <xref linkend=\"ecpg-pgtypes\"/> contains basic functions to deal with those types, such that you do not need to send a query to the SQL server just for adding an interval to a timestamp for example."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:554(programlisting)
#, no-wrap
msgid "\nVARCHAR var[180];\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:558(programlisting)
#, no-wrap
msgid "\nstruct varchar_var { int len; char arr[180]; } var;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:550(para)
msgid "The special type <type>VARCHAR</type> is converted into a named <type>struct</type> for every variable. A declaration like: <placeholder-1/> is converted into: <placeholder-2/> This structure is suitable for interfacing with SQL datums of type <type>varchar</type>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:479(para)
msgid "A few examples on host variables: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:571(title)
msgid "<command>SELECT INTO</command> and <command>FETCH INTO</command>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:573(para)
msgid "Now you should be able to pass data generated by your program into an SQL command. But how do you retrieve the results of a query? For that purpose, embedded SQL provides special variants of the usual commands <command>SELECT</command> and <command>FETCH</command>. These commands have a special <literal>INTO</literal> clause that specifies which host variables the retrieved values are to be stored in."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:585(programlisting)
#, no-wrap
msgid "\n/*\n * assume this table:\n * CREATE TABLE test1 (a int, b varchar(50));\n */\n\nEXEC SQL BEGIN DECLARE SECTION;\nint v1;\nVARCHAR v2;\nEXEC SQL END DECLARE SECTION;\n\n ...\n\nEXEC SQL SELECT a, b INTO :v1, :v2 FROM test;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:583(para)
msgid "Here is an example: <placeholder-1/> So the <literal>INTO</literal> clause appears between the select list and the <literal>FROM</literal> clause. The number of elements in the select list and the list after <literal>INTO</literal> (also called the target list) must be equal."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:609(programlisting)
#, no-wrap
msgid "\nEXEC SQL BEGIN DECLARE SECTION;\nint v1;\nVARCHAR v2;\nEXEC SQL END DECLARE SECTION;\n\n ...\n\nEXEC SQL DECLARE foo CURSOR FOR SELECT a, b FROM test;\n\n ...\n\ndo {\n    ...\n    EXEC SQL FETCH NEXT FROM foo INTO :v1, :v2;\n    ...\n} while (...);\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:607(para)
msgid "Here is an example using the command <command>FETCH</command>: <placeholder-1/> Here the <literal>INTO</literal> clause appears after all the normal clauses."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:631(para)
msgid "Both of these methods only allow retrieving one row at a time. If you need to process result sets that potentially contain more than one row, you need to use a cursor, as shown in the second example."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:639(title)
msgid "Indicators"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:652(programlisting)
#, no-wrap
msgid "\nEXEC SQL BEGIN DECLARE SECTION;\nVARCHAR val;\nint val_ind;\nEXEC SQL END DECLARE SECTION:\n\n ...\n\nEXEC SQL SELECT b INTO :val :val_ind FROM test1;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:641(para)
msgid "The examples above do not handle null values. In fact, the retrieval examples will raise an error if they fetch a null value from the database. To be able to pass null values to the database or retrieve null values from the database, you need to append a second host variable specification to each host variable that contains data. This second host variable is called the <firstterm>indicator</firstterm> and contains a flag that tells whether the datum is null, in which case the value of the real host variable is ignored. Here is an example that handles the retrieval of null values correctly: <placeholder-1/> The indicator variable <varname>val_ind</varname> will be zero if the value was not null, and it will be negative if the value was null."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:667(para)
msgid "The indicator has another function: if the indicator value is positive, it means that the value is not null, but it was truncated when it was stored in the host variable."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:676(title)
msgid "Dynamic SQL"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:678(para)
msgid "In many cases, the particular SQL statements that an application has to execute are known at the time the application is written. In some cases, however, the SQL statements are composed at run time or provided by an external source. In these cases you cannot embed the SQL statements directly into the C source code, but there is a facility that allows you to call arbitrary SQL statements that you provide in a string variable."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:691(programlisting)
#, no-wrap
msgid "\nEXEC SQL BEGIN DECLARE SECTION;\nconst char *stmt = \"CREATE TABLE test1 (...);\";\nEXEC SQL END DECLARE SECTION;\n\nEXEC SQL EXECUTE IMMEDIATE :stmt;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:688(para)
msgid "The simplest way to execute an arbitrary SQL statement is to use the command <command>EXECUTE IMMEDIATE</command>. For example: <placeholder-1/> You cannot execute statements that retrieve data (e.g., <command>SELECT</command>) this way."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:710(programlisting)
#, no-wrap
msgid "\nEXEC SQL BEGIN DECLARE SECTION;\nconst char *stmt = \"INSERT INTO test1 VALUES(?, ?);\";\nEXEC SQL END DECLARE SECTION;\n\nEXEC SQL PREPARE mystmt FROM :stmt;\n ...\nEXEC SQL EXECUTE mystmt USING 42, 'foobar';\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:702(para)
msgid "A more powerful way to execute arbitrary SQL statements is to prepare them once and execute the prepared statement as often as you like. It is also possible to prepare a generalized version of a statement and then execute specific versions of it by substituting parameters. When preparing the statement, write question marks where you want to substitute parameters later. For example: <placeholder-1/> If the statement you are executing returns values, then add an <literal>INTO</literal> clause: <placeholder-2/> An <command>EXECUTE</command> command can have an <literal>INTO</literal> clause, a <literal>USING</literal> clause, both, or neither."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:741(programlisting)
#, no-wrap
msgid "\nEXEC SQL DEALLOCATE PREPARE <replaceable>name</replaceable>;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:738(para)
msgid "When you don't need the prepared statement anymore, you should deallocate it: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:749(title)
msgid "pgtypes library"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:751(para)
msgid "The pgtypes library maps <productname>PostgreSQL</productname> database types to C equivalents that can be used in C programs. It also offers functions to do basic calculations with those types within C, i.e., without the help of the <productname>PostgreSQL</productname> server. See the following example: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:776(title)
msgid "The numeric type"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:777(para)
msgid "The numeric type offers to do calculations with arbitrary precision. See <xref linkend=\"datatype-numeric\"/> for the equivalent type in the <productname>PostgreSQL</productname> server. Because of the arbitrary precision this variable needs to be able to expand and shrink dynamically. That's why you can only create numeric variables on the heap, by means of the <function>PGTYPESnumeric_new</function> and <function>PGTYPESnumeric_free</function> functions. The decimal type, which is similar but limited in precision, can be created on the stack as well as on the heap."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:791(function)
msgid "PGTYPESnumeric_new"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:793(para)
msgid "Request a pointer to a newly allocated numeric variable. <synopsis>\nnumeric *PGTYPESnumeric_new(void);\n</synopsis>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:803(function)
msgid "PGTYPESnumeric_free"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:805(para)
msgid "Free a numeric type, release all of its memory. <synopsis>\nvoid PGTYPESnumeric_free(numeric *var);\n</synopsis>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:815(function)
msgid "PGTYPESnumeric_from_asc"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:817(para)
msgid "Parse a numeric type from its string notation. <synopsis>\nnumeric *PGTYPESnumeric_from_asc(char *str, char **endptr);\n</synopsis> Valid formats are for example: <literal>-2</literal>, <literal>.794</literal>, <literal>+3.44</literal>, <literal>592.49E07</literal> or <literal>-32.84e-4</literal>. If the value could be parsed successfully, a valid pointer is returned, else the NULL pointer. At the moment ECPG always parses the complete string and so it currently does not support to store the address of the first invalid character in <literal>*endptr</literal>. You can safely set <literal>endptr</literal> to NULL."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:838(function)
msgid "PGTYPESnumeric_to_asc"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:840(para)
msgid "Returns a pointer to a string allocated by <function>malloc</function> that contains the string representation of the numeric type <literal>num</literal>. <synopsis>\nchar *PGTYPESnumeric_to_asc(numeric *num, int dscale);\n</synopsis> The numeric value will be printed with <literal>dscale</literal> decimal digits, with rounding applied if necessary."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:853(function)
msgid "PGTYPESnumeric_add"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:855(para)
msgid "Add two numeric variables into a third one. <synopsis>\nint PGTYPESnumeric_add(numeric *var1, numeric *var2, numeric *result);\n</synopsis> The function adds the variables <literal>var1</literal> and <literal>var2</literal> into the result variable <literal>result</literal>. The function returns 0 on success and -1 in case of error."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:869(function)
msgid "PGTYPESnumeric_sub"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:871(para)
msgid "Subtract two numeric variables and return the result in a third one. <synopsis>\nint PGTYPESnumeric_sub(numeric *var1, numeric *var2, numeric *result);\n</synopsis> The function subtracts the variable <literal>var2</literal> from the variable <literal>var1</literal>. The result of the operation is stored in the variable <literal>result</literal>. The function returns 0 on success and -1 in case of error."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:885(function)
msgid "PGTYPESnumeric_mul"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:887(para)
msgid "Multiply two numeric variables and return the result in a third one. <synopsis>\nint PGTYPESnumeric_mul(numeric *var1, numeric *var2, numeric *result);\n</synopsis> The function multiplies the variables <literal>var1</literal> and <literal>var2</literal>. The result of the operation is stored in the variable <literal>result</literal>. The function returns 0 on success and -1 in case of error."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:901(function)
msgid "PGTYPESnumeric_div"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:903(para)
msgid "Divide two numeric variables and return the result in a third one. <synopsis>\nint PGTYPESnumeric_div(numeric *var1, numeric *var2, numeric *result);\n</synopsis> The function divides the variables <literal>var1</literal> by <literal>var2</literal>. The result of the operation is stored in the variable <literal>result</literal>. The function returns 0 on success and -1 in case of error."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:917(function)
msgid "PGTYPESnumeric_cmp"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:929(para)
msgid "1, if <literal>var1</literal> is bigger than <literal>var2</literal>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:934(para)
msgid "-1, if <literal>var1</literal> is smaller than <literal>var2</literal>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:939(para)
msgid "0, if <literal>var1</literal> and <literal>var2</literal> are equal"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:919(para)
msgid "Compare two numeric variables. <synopsis>\nint PGTYPESnumeric_cmp(numeric *var1, numeric *var2)\n</synopsis> This function compares two numeric variables. In case of error, <literal>INT_MAX</literal> is returned. On success, the function returns one of three possible results: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:949(function)
msgid "PGTYPESnumeric_from_int"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:951(para)
msgid "Convert an int variable to a numeric variable. <synopsis>\nint PGTYPESnumeric_from_int(signed int int_val, numeric *var);\n</synopsis> This function accepts a variable of type signed int and stores it in the numeric variable <literal>var</literal>. Upon success, 0 is returned and -1 in case of a failure."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:964(function)
msgid "PGTYPESnumeric_from_long"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:966(para)
msgid "Convert a long int variable to a numeric variable. <synopsis>\nint PGTYPESnumeric_from_long(signed long int long_val, numeric *var);\n</synopsis> This function accepts a variable of type signed long int and stores it in the numeric variable <literal>var</literal>. Upon success, 0 is returned and -1 in case of a failure."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:979(function)
msgid "PGTYPESnumeric_copy"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:981(para)
msgid "Copy over one numeric variable into another one. <synopsis>\nint PGTYPESnumeric_copy(numeric *src, numeric *dst);\n</synopsis> This function copies over the value of the variable that <literal>src</literal> points to into the variable that <literal>dst</literal> points to. It returns 0 on success and -1 if an error occurs."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:994(function)
msgid "PGTYPESnumeric_from_double"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:996(para)
msgid "Convert a variable of type double to a numeric. <synopsis>\nint  PGTYPESnumeric_from_double(double d, numeric *dst);\n</synopsis> This function accepts a variable of type double and stores the result in the variable that <literal>dst</literal> points to. It returns 0 on success and -1 if an error occurs."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1009(function)
msgid "PGTYPESnumeric_to_double"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1011(para)
msgid "Convert a variable of type numeric to double. <synopsis>\nint PGTYPESnumeric_to_double(numeric *nv, double *dp)\n</synopsis> The function converts the numeric value from the variable that <literal>nv</literal> points to into the double variable that <literal>dp</literal> points to. It returns 0 on success and -1 if an error occurs, including overflow. On overflow, the global variable <literal>errno</literal> will be set to <literal>PGTYPES_NUM_OVERFLOW</literal> additionally."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1026(function)
msgid "PGTYPESnumeric_to_int"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1028(para)
msgid "Convert a variable of type numeric to int. <synopsis>\nint PGTYPESnumeric_to_int(numeric *nv, int *ip);\n</synopsis> The function converts the numeric value from the variable that <literal>nv</literal> points to into the integer variable that <literal>ip</literal> points to. It returns 0 on success and -1 if an error occurs, including overflow. On overflow, the global variable <literal>errno</literal> will be set to <literal>PGTYPES_NUM_OVERFLOW</literal> additionally."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1043(function)
msgid "PGTYPESnumeric_to_long"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1045(para)
msgid "Convert a variable of type numeric to long. <synopsis>\nint PGTYPESnumeric_to_long(numeric *nv, long *lp);\n</synopsis> The function converts the numeric value from the variable that <literal>nv</literal> points to into the long integer variable that <literal>lp</literal> points to. It returns 0 on success and -1 if an error occurs, including overflow. On overflow, the global variable <literal>errno</literal> will be set to <literal>PGTYPES_NUM_OVERFLOW</literal> additionally."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1061(function)
msgid "PGTYPESnumeric_to_decimal"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1063(para)
msgid "Convert a variable of type numeric to decimal. <synopsis>\nint PGTYPESnumeric_to_decimal(numeric *src, decimal *dst);\n</synopsis> The function converts the numeric value from the variable that <literal>src</literal> points to into the decimal variable that <literal>dst</literal> points to. It returns 0 on success and -1 if an error occurs, including overflow. On overflow, the global variable <literal>errno</literal> will be set to <literal>PGTYPES_NUM_OVERFLOW</literal> additionally."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1079(function)
msgid "PGTYPESnumeric_from_decimal"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1081(para)
msgid "Convert a variable of type decimal to numeric. <synopsis>\nint PGTYPESnumeric_from_decimal(decimal *src, numeric *dst);\n</synopsis> The function converts the decimal value from the variable that <literal>src</literal> points to into the numeric variable that <literal>dst</literal> points to. It returns 0 on success and -1 if an error occurs. Since the decimal type is implemented as a limited version of the numeric type, overflow cannot occur with this conversion."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:787(para)
msgid "The following functions can be used to work with the numeric type: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1099(title)
msgid "The date type"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1100(para)
msgid "The date type in C enables your programs to deal with data of the SQL type date. See <xref linkend=\"datatype-datetime\"/> for the equivalent type in the <productname>PostgreSQL</productname> server."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1109(function)
msgid "PGTYPESdate_from_timestamp"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1111(para)
msgid "Extract the date part from a timestamp. <synopsis>\ndate PGTYPESdate_from_timestamp(timestamp dt);\n</synopsis> The function receives a timestamp as its only argument and returns the extracted date part from this timestamp."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1123(function)
msgid "PGTYPESdate_from_asc"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1125(para)
msgid "Parse a date from its textual representation. <synopsis>\ndate PGTYPESdate_from_asc(char *str, char **endptr);\n</synopsis> The function receives a C char* string <literal>str</literal> and a pointer to a C char* string <literal>endptr</literal>. At the moment ECPG always parses the complete string and so it currently does not support to store the address of the first invalid character in <literal>*endptr</literal>. You can safely set <literal>endptr</literal> to NULL."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1136(para)
msgid "Note that the function always assumes MDY-formatted dates and there is currently no variable to change that within ECPG."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1140(para)
msgid "<xref linkend=\"ecpg-pgtypesdate-from-asc-table\"/> shows the allowed input formats."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1144(title)
msgid "Valid input formats for <function>PGTYPESdate_from_asc</function>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1148(entry) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1623(entry)
msgid "Input"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1149(entry) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1406(entry) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1497(entry) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1624(entry)
msgid "Result"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1154(literal) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1155(literal) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1159(literal) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1163(literal) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1175(literal) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1179(literal) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1183(literal) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1187(literal) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1191(literal) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1199(literal)
msgid "January 8, 1999"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1158(literal)
msgid "1999-01-08"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1162(literal)
msgid "1/8/1999"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1166(literal)
msgid "1/18/1999"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1167(literal)
msgid "January 18, 1999"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1170(literal)
msgid "01/02/03"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1171(literal)
msgid "February 1, 2003"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1174(literal)
msgid "1999-Jan-08"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1178(literal)
msgid "Jan-08-1999"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1182(literal)
msgid "08-Jan-1999"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1186(literal)
msgid "99-Jan-08"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1190(literal)
msgid "08-Jan-99"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1194(literal)
msgid "08-Jan-06"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1195(literal)
msgid "January 8, 2006"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1198(literal)
msgid "Jan-08-99"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1202(literal)
msgid "19990108"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1203(literal) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1207(literal)
msgid "ISO 8601; January 8, 1999"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1206(literal)
msgid "990108"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1210(literal)
msgid "1999.008"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1211(literal)
msgid "year and day of year"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1214(literal)
msgid "J2451187"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1215(literal)
msgid "Julian day"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1218(literal)
msgid "January 8, 99 BC"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1219(literal)
msgid "year 99 before the Common Era"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1228(function)
msgid "PGTYPESdate_to_asc"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1230(para)
msgid "Return the textual representation of a date variable. <synopsis>\nchar *PGTYPESdate_to_asc(date dDate);\n</synopsis> The function receives the date <literal>dDate</literal> as its only parameter. It will output the date in the form <literal>1999-01-18</literal>, i.e., in the <literal>YYYY-MM-DD</literal> format."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1243(function)
msgid "PGTYPESdate_julmdy"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1245(para)
msgid "Extract the values for the day, the month and the year from a variable of type date. <synopsis>\nvoid PGTYPESdate_julmdy(date d, int *mdy);\n</synopsis> The function receives the date <literal>d</literal> and a pointer to an array of 3 integer values <literal>mdy</literal>. The variable name indicates the sequential order: <literal>mdy[0]</literal> will be set to contain the number of the month, <literal>mdy[1]</literal> will be set to the value of the day and <literal>mdy[2]</literal> will contain the year."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1262(function)
msgid "PGTYPESdate_mdyjul"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1264(para)
msgid "Create a date value from an array of 3 integers that specify the day, the month and the year of the date. <synopsis>\nvoid PGTYPESdate_mdyjul(int *mdy, date *jdate);\n</synopsis> The function receives the array of the 3 integers (<literal>mdy</literal>) as its first argument and as its second argument a pointer to a variable of type date that should hold the result of the operation."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1278(function)
msgid "PGTYPESdate_dayofweek"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1290(para) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3794(para)
msgid "0 - Sunday"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1295(para) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3799(para)
msgid "1 - Monday"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1300(para) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3804(para)
msgid "2 - Tuesday"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1305(para) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3809(para)
msgid "3 - Wednesday"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1310(para) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3814(para)
msgid "4 - Thursday"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1315(para) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3819(para)
msgid "5 - Friday"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1320(para) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3824(para)
msgid "6 - Saturday"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1280(para)
msgid "Return a number representing the day of the week for a date value. <synopsis>\nint PGTYPESdate_dayofweek(date d);\n</synopsis> The function receives the date variable <literal>d</literal> as its only argument and returns an integer that indicates the day of the week for this date. <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1330(function)
msgid "PGTYPESdate_today"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1332(para)
msgid "Get the current date. <synopsis>\nvoid PGTYPESdate_today(date *d);\n</synopsis> The function receives a pointer to a date variable (<literal>d</literal>) that it sets to the current date."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1344(function)
msgid "PGTYPESdate_fmt_asc"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1346(para)
msgid "Convert a variable of type date to its textual representation using a format mask. <synopsis>\nint PGTYPESdate_fmt_asc(date dDate, char *fmtstring, char *outbuf);\n</synopsis> The function receives the date to convert (<literal>dDate</literal>), the format mask (<literal>fmtstring</literal>) and the string that will hold the textual representation of the date (<literal>outbuf</literal>)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1356(para) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3748(para)
msgid "On success, 0 is returned and a negative value if an error occurred."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1363(para)
msgid "<literal>dd</literal> - The number of the day of the month."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1368(para)
msgid "<literal>mm</literal> - The number of the month of the year."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1373(para)
msgid "<literal>yy</literal> - The number of the year as a two digit number."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1378(para)
msgid "<literal>yyyy</literal> - The number of the year as a four digit number."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1383(para)
msgid "<literal>ddd</literal> - The name of the day (abbreviated)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1388(para)
msgid "<literal>mmm</literal> - The name of the month (abbreviated)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1359(para)
msgid "The following literals are the field specifiers you can use: <placeholder-1/> All other characters are copied 1:1 to the output string."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1395(para)
msgid "<xref linkend=\"ecpg-pgtypesdate-fmt-asc-example-table\"/> indicates a few possible formats. This will give you an idea of how to use this function. All output lines are based on the same date: November 23, 1959."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1401(title)
msgid "Valid input formats for <function>PGTYPESdate_fmt_asc</function>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1405(entry) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1495(entry)
msgid "Format"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1411(literal) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1562(literal)
msgid "mmddyy"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1412(literal)
msgid "112359"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1415(literal) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1502(literal) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1507(literal) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1512(literal) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1517(literal)
msgid "ddmmyy"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1416(literal)
msgid "231159"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1419(literal)
msgid "yymmdd"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1420(literal)
msgid "591123"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1423(literal) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1527(literal) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1537(literal) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1552(literal)
msgid "yy/mm/dd"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1424(literal)
msgid "59/11/23"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1427(literal)
msgid "yy mm dd"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1428(literal)
msgid "59 11 23"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1431(literal)
msgid "yy.mm.dd"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1432(literal)
msgid "59.11.23"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1435(literal)
msgid ".mm.yyyy.dd."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1436(literal)
msgid ".11.1959.23."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1439(literal)
msgid "mmm. dd, yyyy"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1440(literal)
msgid "Nov. 23, 1959"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1443(literal)
msgid "mmm dd yyyy"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1444(literal)
msgid "Nov 23 1959"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1447(literal)
msgid "yyyy dd mm"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1448(literal)
msgid "1959 23 11"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1451(literal)
msgid "ddd, mmm. dd, yyyy"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1452(literal)
msgid "Mon, Nov. 23, 1959"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1455(literal)
msgid "(ddd) mmm. dd, yyyy"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1456(literal)
msgid "(Mon) Nov. 23, 1959"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1465(function)
msgid "PGTYPESdate_defmt_asc"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1467(para)
msgid "Use a format mask to convert a C <type>char*</type> string to a value of type date. <synopsis>\nint PGTYPESdate_defmt_asc(date *d, char *fmt, char *str);\n</synopsis> The function receives a pointer to the date value that should hold the result of the operation (<literal>d</literal>), the format mask to use for parsing the date (<literal>fmt</literal>) and the C char* string containing the textual representation of the date (<literal>str</literal>). The textual representation is expected to match the format mask. However you do not need to have a 1:1 mapping of the string to the format mask. The function only analyzes the sequential order and looks for the literals <literal>yy</literal> or <literal>yyyy</literal> that indicate the position of the year, <literal>mm</literal> to indicate the position of the month and <literal>dd</literal> to indicate the position of the day."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1486(para)
msgid "<xref linkend=\"ecpg-rdefmtdate-example-table\"/> indicates a few possible formats. This will give you an idea of how to use this function."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1491(title)
msgid "Valid input formats for <function>rdefmtdate</function>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1496(entry)
msgid "String"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1503(literal)
msgid "21-2-54"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1504(literal)
msgid "1954-02-21"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1508(literal)
msgid "2-12-54"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1509(literal)
msgid "1954-12-02"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1513(literal)
msgid "20111954"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1514(literal)
msgid "1954-11-20"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1518(literal)
msgid "130464"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1519(literal)
msgid "1964-04-13"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1522(literal) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1532(literal) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1547(literal) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1557(literal)
msgid "mmm.dd.yyyy"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1523(literal)
msgid "MAR-12-1967"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1524(literal)
msgid "1967-03-12"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1528(literal)
msgid "1954, February 3rd"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1529(literal)
msgid "1954-02-03"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1533(literal)
msgid "041269"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1534(literal)
msgid "1969-04-12"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1538(literal)
msgid "In the year 2525, in the month of July, mankind will be alive on the 28th day"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1539(literal) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1544(literal)
msgid "2525-07-28"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1542(literal)
msgid "dd-mm-yy"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1543(literal)
msgid "I said on the 28th of July in the year 2525"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1548(literal)
msgid "9/14/58"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1549(literal)
msgid "1958-09-14"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1553(literal)
msgid "47/03/29"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1554(literal)
msgid "1947-03-29"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1558(literal)
msgid "oct 28 1975"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1559(literal)
msgid "1975-10-28"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1563(literal)
msgid "Nov 14th, 1985"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1564(literal)
msgid "1985-11-14"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1105(para)
msgid "The following functions can be used to work with the date type: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1576(title)
msgid "The timestamp type"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1577(para)
msgid "The timestamp type in C enables your programs to deal with data of the SQL type timestamp. See <xref linkend=\"datatype-datetime\"/> for the equivalent type in the <productname>PostgreSQL</productname> server."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1586(function)
msgid "PGTYPEStimestamp_from_asc"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1588(para)
msgid "Parse a timestamp from its textual representation into a timestamp variable. <synopsis>\ntimestamp PGTYPEStimestamp_from_asc(char *str, char **endptr);\n</synopsis> The function receives the string to parse (<literal>str</literal>) and a pointer to a C char* (<literal>endptr</literal>). At the moment ECPG always parses the complete string and so it currently does not support to store the address of the first invalid character in <literal>*endptr</literal>. You can safely set <literal>endptr</literal> to NULL."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1601(para)
msgid "The function returns the parsed timestamp on success. On error, <literal>PGTYPESInvalidTimestamp</literal> is returned and <varname>errno</varname> is set to <literal>PGTYPES_TS_BAD_TIMESTAMP</literal>. See <xref linkend=\"PGTYPESInvalidTimestamp\"/> for important notes on this value."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1607(para)
msgid "In general, the input string can contain any combination of an allowed date specification, a whitespace character and an allowed time specification. Note that timezones are not supported by ECPG. It can parse them but does not apply any calculation as the <productname>PostgreSQL</productname> server does for example. Timezone specifiers are silently discarded."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1615(para)
msgid "<xref linkend=\"ecpg-pgtypestimestamp-from-asc-example-table\"/> contains a few examples for input strings."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1619(title)
msgid "Valid input formats for <function>PGTYPEStimestamp_from_asc</function>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1629(literal) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1630(literal) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1634(literal)
msgid "1999-01-08 04:05:06"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1633(literal)
msgid "January 8 04:05:06 1999 PST"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1637(literal)
msgid "1999-Jan-08 04:05:06.789-8"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1638(literal)
msgid "1999-01-08 04:05:06.789 (time zone specifier ignored)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1641(literal)
msgid "J2451187 04:05-08:00"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1642(literal)
msgid "1999-01-08 04:05:00 (time zone specifier ignored)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1651(function)
msgid "PGTYPEStimestamp_to_asc"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1653(para)
msgid "Converts a date to a C char* string. <synopsis>\nchar *PGTYPEStimestamp_to_asc(timestamp tstamp);\n</synopsis> The function receives the timestamp <literal>tstamp</literal> as its only argument and returns an allocated string that contains the textual representation of the timestamp."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1666(function)
msgid "PGTYPEStimestamp_current"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1668(para)
msgid "Retrieve the current timestamp. <synopsis>\nvoid PGTYPEStimestamp_current(timestamp *ts);\n</synopsis> The function retrieves the current timestamp and saves it into the timestamp variable that <literal>ts</literal> points to."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1680(function)
msgid "PGTYPEStimestamp_fmt_asc"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1682(para)
msgid "Convert a timestamp variable to a C char* using a format mask. <synopsis>\nint PGTYPEStimestamp_fmt_asc(timestamp *ts, char *output, int str_len, char *fmtstr);\n</synopsis> The function receives a pointer to the timestamp to convert as its first argument (<literal>ts</literal>), a pointer to the output buffer (<literal>output</literal>), the maximal length that has been allocated for the output buffer (<literal>str_len</literal>) and the format mask to use for the conversion (<literal>fmtstr</literal>)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1693(para) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2028(para) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2075(para) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2095(para) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3916(para) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3937(para) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3958(para) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3984(para)
msgid "Upon success, the function returns 0 and a negative value if an error occurred."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1707(para)
msgid "<literal>%A</literal> - is replaced by national representation of the full weekday name."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1713(para)
msgid "<literal>%a</literal> - is replaced by national representation of the abbreviated weekday name."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1719(para)
msgid "<literal>%B</literal> - is replaced by national representation of the full month name."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1725(para)
msgid "<literal>%b</literal> - is replaced by national representation of the abbreviated month name."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1731(para)
msgid "<literal>%C</literal> - is replaced by (year / 100) as decimal number; single digits are preceded by a zero."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1737(para)
msgid "<literal>%c</literal> - is replaced by national representation of time and date."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1743(para)
msgid "<literal>%D</literal> - is equivalent to <literal>%m/%d/%y</literal>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1749(para)
msgid "<literal>%d</literal> - is replaced by the day of the month as a decimal number (01-31)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1755(para)
msgid "<literal>%E*</literal><literal>%O*</literal> - POSIX locale extensions. The sequences <literal>%Ec</literal><literal>%EC</literal><literal>%Ex</literal><literal>%EX</literal><literal>%Ey</literal><literal>%EY</literal><literal>%Od</literal><literal>%Oe</literal><literal>%OH</literal><literal>%OI</literal><literal>%Om</literal><literal>%OM</literal><literal>%OS</literal><literal>%Ou</literal><literal>%OU</literal><literal>%OV</literal><literal>%Ow</literal><literal>%OW</literal><literal>%Oy</literal> are supposed to provide alternative representations."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1779(para)
msgid "Additionally <literal>%OB</literal> implemented to represent alternative months names (used standalone, without day mentioned)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1785(para)
msgid "<literal>%e</literal> - is replaced by the day of month as a decimal number (1-31); single digits are preceded by a blank."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1791(para)
msgid "<literal>%F</literal> - is equivalent to <literal>%Y-%m-%d</literal>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1796(para)
msgid "<literal>%G</literal> - is replaced by a year as a decimal number with century. This year is the one that contains the greater part of the week (Monday as the first day of the week)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1803(para)
msgid "<literal>%g</literal> - is replaced by the same year as in <literal>%G</literal>, but as a decimal number without century (00-99)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1810(para)
msgid "<literal>%H</literal> - is replaced by the hour (24-hour clock) as a decimal number (00-23)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1816(para)
msgid "<literal>%h</literal> - the same as <literal>%b</literal>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1821(para)
msgid "<literal>%I</literal> - is replaced by the hour (12-hour clock) as a decimal number (01-12)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1827(para)
msgid "<literal>%j</literal> - is replaced by the day of the year as a decimal number (001-366)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1833(para)
msgid "<literal>%k</literal> - is replaced by the hour (24-hour clock) as a decimal number (0-23); single digits are preceded by a blank."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1839(para)
msgid "<literal>%l</literal> - is replaced by the hour (12-hour clock) as a decimal number (1-12); single digits are preceded by a blank."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1845(para)
msgid "<literal>%M</literal> - is replaced by the minute as a decimal number (00-59)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1851(para)
msgid "<literal>%m</literal> - is replaced by the month as a decimal number (01-12)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1857(para)
msgid "<literal>%n</literal> - is replaced by a newline."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1862(para)
msgid "<literal>%O*</literal> - the same as <literal>%E*</literal>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1867(para)
msgid "<literal>%p</literal> - is replaced by national representation of either \"ante meridiem\" or \"post meridiem\" as appropriate."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1873(para)
msgid "<literal>%R</literal> - is equivalent to <literal>%H:%M</literal>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1878(para)
msgid "<literal>%r</literal> - is equivalent to <literal>%I:%M:%S %p</literal>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1884(para)
msgid "<literal>%S</literal> - is replaced by the second as a decimal number (00-60)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1890(para)
msgid "<literal>%s</literal> - is replaced by the number of seconds since the Epoch, UTC."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1896(para)
msgid "<literal>%T</literal> - is equivalent to <literal>%H:%M:%S</literal>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1901(para)
msgid "<literal>%t</literal> - is replaced by a tab."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1906(para)
msgid "<literal>%U</literal> - is replaced by the week number of the year (Sunday as the first day of the week) as a decimal number (00-53)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1912(para)
msgid "<literal>%u</literal> - is replaced by the weekday (Monday as the first day of the week) as a decimal number (1-7)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1918(para)
msgid "<literal>%V</literal> - is replaced by the week number of the year (Monday as the first day of the week) as a decimal number (01-53). If the week containing January 1 has four or more days in the new year, then it is week 1; otherwise it is the last week of the previous year, and the next week is week 1."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1927(para)
msgid "<literal>%v</literal> - is equivalent to <literal>%e-%b-%Y</literal>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1933(para)
msgid "<literal>%W</literal> - is replaced by the week number of the year (Monday as the first day of the week) as a decimal number (00-53)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1939(para)
msgid "<literal>%w</literal> - is replaced by the weekday (Sunday as the first day of the week) as a decimal number (0-6)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1945(para)
msgid "<literal>%X</literal> - is replaced by national representation of the time."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1951(para)
msgid "<literal>%x</literal> - is replaced by national representation of the date."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1957(para)
msgid "<literal>%Y</literal> - is replaced by the year with century as a decimal number."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1963(para)
msgid "<literal>%y</literal> - is replaced by the year without century as a decimal number (00-99)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1969(para)
msgid "<literal>%Z</literal> - is replaced by the time zone name."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1974(para)
msgid "<literal>%z</literal> - is replaced by the time zone offset from UTC; a leading plus sign stands for east of UTC, a minus sign for west of UTC, hours and minutes follow with two digits each and no delimiter between them (common form for RFC 822 date headers)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1982(para)
msgid "<literal>%+</literal> - is replaced by national representation of the date and time."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1988(para)
msgid "<literal>%-*</literal> - GNU libc extension. Do not do any padding when performing numerical outputs."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1994(para)
msgid "$_* - GNU libc extension. Explicitly specify space for padding."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1999(para)
msgid "<literal>%0*</literal> - GNU libc extension. Explicitly specify zero for padding."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2005(para)
msgid "<literal>%%</literal> - is replaced by <literal>%</literal>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1697(para)
msgid "You can use the following format specifiers for the format mask. The format specifiers are the same ones that are used in the <function>strftime</function> function in <productname>libc</productname>. Any non-format specifier will be copied into the output buffer. <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2015(function)
msgid "PGTYPEStimestamp_sub"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2017(para)
msgid "Subtract one timestamp from another one and save the result in a variable of type interval. <synopsis>\nint PGTYPEStimestamp_sub(timestamp *ts1, timestamp *ts2, interval *iv);\n</synopsis> The function will subtract the timestamp variable that <literal>ts2</literal> points to from the timestamp variable that <literal>ts1</literal> points to and will store the result in the interval variable that <literal>iv</literal> points to."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2036(function)
msgid "PGTYPEStimestamp_defmt_asc"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2038(para)
msgid "Parse a timestamp value from its textual representation using a formatting mask. <synopsis>\nint PGTYPEStimestamp_defmt_asc(char *str, char *fmt, timestamp *d);\n</synopsis> The function receives the textual representation of a timestamp in the variable <literal>str</literal> as well as the formatting mask to use in the variable <literal>fmt</literal>. The result will be stored in the variable that <literal>d</literal> points to."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2049(para)
msgid "If the formatting mask <literal>fmt</literal> is NULL, the function will fall back to the default formatting mask which is <literal>%Y-%m-%d %H:%M:%S</literal>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2054(para)
msgid "This is the reverse function to <xref linkend=\"PGTYPEStimestampfmtasc\"/>. See the documentation there in order to find out about the possible formatting mask entries."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2063(function)
msgid "PGTYPEStimestamp_add_interval"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2065(para)
msgid "Add an interval variable to a timestamp variable. <synopsis>\nint PGTYPEStimestamp_add_interval(timestamp *tin, interval *span, timestamp *tout);\n</synopsis> The function receives a pointer to a timestamp variable <literal>tin</literal> and a pointer to an interval variable <literal>span</literal>. It adds the interval to the timestamp and saves the resulting timestamp in the variable that <literal>tout</literal> points to."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2083(function)
msgid "PGTYPEStimestamp_sub_interval"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2085(para)
msgid "Subtract an interval variable from a timestamp variable. <synopsis>\nint PGTYPEStimestamp_sub_interval(timestamp *tin, interval *span, timestamp *tout);\n</synopsis> The function subtracts the interval variable that <literal>span</literal> points to from the timestamp variable that <literal>tin</literal> points to and saves the result into the variable that <literal>tout</literal> points to."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:1582(para)
msgid "The following functions can be used to work with the timestamp type: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2106(title)
msgid "The interval type"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2107(para)
msgid "The interval type in C enables your programs to deal with data of the SQL type interval. See <xref linkend=\"datatype-datetime\"/> for the equivalent type in the <productname>PostgreSQL</productname> server."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2117(function)
msgid "PGTYPESinterval_new"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2119(para)
msgid "Return a pointer to a newly allocated interval variable. <synopsis>\ninterval *PGTYPESinterval_new(void);\n</synopsis>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2129(function)
msgid "PGTYPESinterval_free"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2131(para)
msgid "Release the memory of a previously allocated interval variable. <synopsis>\nvoid PGTYPESinterval_new(interval *intvl);\n</synopsis>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2141(function)
msgid "PGTYPESinterval_from_asc"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2143(para)
msgid "Parse an interval from its textual representation. <synopsis>\ninterval *PGTYPESinterval_from_asc(char *str, char **endptr);\n</synopsis> The function parses the input string <literal>str</literal> and returns a pointer to an allocated interval variable. At the moment ECPG always parses the complete string and so it currently does not support to store the address of the first invalid character in <literal>*endptr</literal>. You can safely set <literal>endptr</literal> to NULL."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2159(function)
msgid "PGTYPESinterval_to_asc"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2161(para)
msgid "Convert a variable of type interval to its textual representation. <synopsis>\nchar *PGTYPESinterval_to_asc(interval *span);\n</synopsis> The function converts the interval variable that <literal>span</literal> points to into a C char*. The output looks like this example: <literal>@ 1 day 12 hours 59 mins 10 secs</literal>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2174(function)
msgid "PGTYPESinterval_copy"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2176(para)
msgid "Copy a variable of type interval. <synopsis>\nint PGTYPESinterval_copy(interval *intvlsrc, interval *intvldest);\n</synopsis> The function copies the interval variable that <literal>intvlsrc</literal> points to into the variable that <literal>intvldest</literal> points to. Note that you need to allocate the memory for the destination variable before."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2112(para)
msgid "The following functions can be used to work with the interval type: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2193(title)
msgid "The decimal type"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2194(para)
msgid "The decimal type is similar to the numeric type. However it is limited to a maximum precision of 30 significant digits. In contrast to the numeric type which can be created on the heap only, the decimal type can be created either on the stack or on the heap (by means of the functions <function>PGTYPESdecimal_new</function> and <function>PGTYPESdecimal_free</function>). There are a lot of other functions that deal with the decimal type in the <productname>Informix</productname> compatibility mode described in <xref linkend=\"ecpg-informix-compat\"/>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2210(function)
msgid "PGTYPESdecimal_new"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2212(para)
msgid "Request a pointer to a newly allocated decimal variable. <synopsis>\ndecimal *PGTYPESdecimal_new(void);\n</synopsis>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2222(function)
msgid "PGTYPESdecimal_free"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2224(para)
msgid "Free a decimal type, release all of its memory. <synopsis>\nvoid PGTYPESdecimal_free(decimal *var);\n</synopsis>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2205(para)
msgid "The following functions can be used to work with the decimal type and are not only contained in the <literal>libcompat</literal> library. <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2237(title)
msgid "errno values of pgtypeslib"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2241(literal)
msgid "PGTYPES_NUM_BAD_NUMERIC"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2243(para)
msgid "An argument should contain a numeric variable (or point to a numeric variable) but in fact its in-memory representation was invalid."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2251(literal)
msgid "PGTYPES_NUM_OVERFLOW"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2253(para)
msgid "An overflow occurred. Since the numeric type can deal with almost arbitrary precision, converting a numeric variable into other types might cause overflow."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2262(literal)
msgid "PGTYPES_NUM_UNDERFLOW"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2264(para)
msgid "An underflow occurred. Since the numeric type can deal with almost arbitrary precision, converting a numeric variable into other types might cause underflow."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2273(literal)
msgid "PGTYPES_NUM_DIVIDE_ZERO"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2275(para)
msgid "A division by zero has been attempted."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2282(literal)
msgid "PGTYPES_DATE_BAD_DATE"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2291(literal)
msgid "PGTYPES_DATE_ERR_EARGS"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2300(literal)
msgid "PGTYPES_DATE_ERR_ENOSHORTDATE"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2309(literal)
msgid "PGTYPES_INTVL_BAD_INTERVAL"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2318(literal)
msgid "PGTYPES_DATE_ERR_ENOTDMY"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2327(literal)
msgid "PGTYPES_DATE_BAD_DAY"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2336(literal)
msgid "PGTYPES_DATE_BAD_MONTH"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2345(literal)
msgid "PGTYPES_TS_BAD_TIMESTAMP"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2357(title)
msgid "Special constants of pgtypeslib"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2361(literal)
msgid "PGTYPESInvalidTimestamp"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2363(para)
msgid "A value of type timestamp representing an invalid time stamp. This is returned by the function <function>PGTYPEStimestamp_from_asc</function> on parse error. Note that due to the internal representation of the <type>timestamp</type> data type, <literal>PGTYPESInvalidTimestamp</literal> is also a valid timestamp at the same time. It is set to <literal>1899-12-31 23:59:59</literal>. In order to detect errors, make sure that your application does not only test for <literal>PGTYPESInvalidTimestamp</literal> but also for <literal>errno != 0</literal> after each call to <function>PGTYPEStimestamp_from_asc</function>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2383(title)
msgid "Using Descriptor Areas"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2385(para)
msgid "An SQL descriptor area is a more sophisticated method for processing the result of a <command>SELECT</command>, <command>FETCH</command> or a <command>DESCRIBE</command> statement. An SQL descriptor area groups the data of one row of data together with metadata items into one data structure. The metadata is particularly useful when executing dynamic SQL statements, where the nature of the result columns might not be known ahead of time. PostgreSQL provides two ways to use Descriptor Areas: the named SQL Descriptor Areas and the C-structure SQLDAs."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2398(title)
msgid "Named SQL Descriptor Areas"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2400(para)
msgid "A named SQL descriptor area consists of a header, which contains information concerning the entire descriptor, and one or more item descriptor areas, which basically each describe one column in the result row."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2409(programlisting)
#, no-wrap
msgid "\nEXEC SQL ALLOCATE DESCRIPTOR <replaceable>identifier</replaceable>;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2416(programlisting)
#, no-wrap
msgid "\nEXEC SQL DEALLOCATE DESCRIPTOR <replaceable>identifier</replaceable>;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2407(para)
msgid "Before you can use an SQL descriptor area, you need to allocate one: <placeholder-1/> The identifier serves as the <quote>variable name</quote> of the descriptor area. <remark>The scope of the allocated descriptor is WHAT?.</remark> When you don't need the descriptor anymore, you should deallocate it: <placeholder-2/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2424(programlisting)
#, no-wrap
msgid "\nEXEC SQL FETCH NEXT FROM mycursor INTO SQL DESCRIPTOR mydesc;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2421(para)
msgid "To use a descriptor area, specify it as the storage target in an <literal>INTO</literal> clause, instead of listing host variables: <placeholder-1/> If the result set is empty, the Descriptor Area will still contain the metadata from the query, i.e. the field names."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2434(programlisting)
#, no-wrap
msgid " \nEXEC SQL BEGIN DECLARE SECTION;\nchar *sql_stmt = \"SELECT * FROM table1\";\nEXEC SQL END DECLARE SECTION;\n\nEXEC SQL PREPARE stmt1 FROM :sql_stmt;\nEXEC SQL DESCRIBE stmt1 INTO SQL DESCRIPTOR mydesc;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2431(para)
msgid "For not yet executed prepared queries, the <command>DESCRIBE</command> statement can be used to get the metadata of the result set: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2444(para)
msgid "Before PostgreSQL 9.0, the <literal>SQL</literal> keyword was optional, so using <literal>DESCRIPTOR</literal> and <literal>SQL DESCRIPTOR</literal> produced named SQL Descriptor Areas. Now it is mandatory, omitting the <literal>SQL</literal> keyword produces SQLDA Descriptor Areas, see <xref linkend=\"ecpg-sqlda-descriptors\"/>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2452(para)
msgid "In <command>DESCRIBE</command> and <command>FETCH</command> statements, the <literal>INTO</literal> and <literal>USING</literal> keywords can be used to similarly: they produce the result set and the metadata in a Descriptor Area."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2464(programlisting)
#, no-wrap
msgid "\nEXEC SQL GET DESCRIPTOR <replaceable>name</replaceable> :<replaceable>hostvar</replaceable> = <replaceable>field</replaceable>;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2473(programlisting)
#, no-wrap
msgid "\nEXEC SQL GET DESCRIPTOR <replaceable>name</replaceable> VALUE <replaceable>num</replaceable> :<replaceable>hostvar</replaceable> = <replaceable>field</replaceable>;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2481(term)
msgid "<literal>CARDINALITY</literal> (integer)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2483(para)
msgid "number of rows in the result set"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2490(literal)
msgid "DATA"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2492(para)
msgid "actual data item (therefore, the data type of this field depends on the query)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2500(term)
msgid "<literal>DATETIME_INTERVAL_CODE</literal> (integer)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2502(para)
msgid "?"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2509(term)
msgid "<literal>DATETIME_INTERVAL_PRECISION</literal> (integer)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2511(para) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2529(para) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2556(para)
msgid "not implemented"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2518(term)
msgid "<literal>INDICATOR</literal> (integer)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2520(para)
msgid "the indicator (indicating a null value or a value truncation)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2527(term)
msgid "<literal>KEY_MEMBER</literal> (integer)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2536(term)
msgid "<literal>LENGTH</literal> (integer)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2538(para) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2583(para)
msgid "length of the datum in characters"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2545(term)
msgid "<literal>NAME</literal> (string)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2547(para)
msgid "name of the column"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2554(term)
msgid "<literal>NULLABLE</literal> (integer)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2563(term)
msgid "<literal>OCTET_LENGTH</literal> (integer)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2565(para) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2592(para)
msgid "length of the character representation of the datum in bytes"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2572(term)
msgid "<literal>PRECISION</literal> (integer)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2574(para)
msgid "precision (for type <type>numeric</type>)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2581(term)
msgid "<literal>RETURNED_LENGTH</literal> (integer)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2590(term)
msgid "<literal>RETURNED_OCTET_LENGTH</literal> (integer)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2599(term)
msgid "<literal>SCALE</literal> (integer)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2601(para)
msgid "scale (for type <type>numeric</type>)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2608(term)
msgid "<literal>TYPE</literal> (integer)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2610(para)
msgid "numeric code of the data type of the column"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2459(para)
msgid "Now how do you get the data out of the descriptor area? You can think of the descriptor area as a structure with named fields. To retrieve the value of a field from the header and store it into a host variable, use the following command: <placeholder-1/> Currently, there is only one header field defined: <replaceable>COUNT</replaceable>, which tells how many item descriptor areas exist (that is, how many columns are contained in the result). The host variable needs to be of an integer type. To get a field from the item descriptor area, use the following command: <placeholder-2/><replaceable>num</replaceable> can be a literal integer or a host variable containing an integer. Possible fields are: <placeholder-3/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2626(programlisting)
#, no-wrap
msgid "\nEXEC SQL SET DESCRIPTOR <replaceable>name</replaceable> VALUE <replaceable>num</replaceable> <replaceable>field</replaceable> = :<replaceable>hostvar</replaceable>;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2618(para)
msgid "In <command>EXECUTE</command>, <command>DECLARE</command> and <command>OPEN</command> statements, the effect of the <literal>INTO</literal> and <literal>USING</literal> keywords are different. A Descriptor Area can also be manually built to provide the input parameters for a query or a cursor and <literal>USING SQL DESCRIPTOR <replaceable>name</replaceable></literal> is the way to pass the input parameters into a parametrized query. The statement to build a named SQL Descriptor Area is below: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2635(programlisting)
#, no-wrap
msgid "\nEXEC SQL BEGIN DECLARE SECTION;\nint id[5];\nEXEC SQL END DECLARE SECTION;\n\nEXEC SQL FETCH 5 FROM mycursor INTO SQL DESCRIPTOR mydesc;\n\nEXEC SQL GET DESCRIPTOR mydesc VALUE 1 :id = DATA;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2631(para)
msgid "PostgreSQL supports retrieving more that one record in one <command>FETCH</command> statement and storing the data in host variables in this case assumes that the variable is an array. E.g.: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2650(title)
msgid "SQLDA Descriptor Areas"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2656(programlisting)
#, no-wrap
msgid "\nEXEC SQL include sqlda.h;\nsqlda_t         *mysqlda;\n\nEXEC SQL FETCH 3 FROM mycursor INTO DESCRIPTOR mysqlda;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2667(programlisting)
#, no-wrap
msgid "\nEXEC SQL DESCRIBE prepared_statement INTO mysqlda;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2652(para)
msgid "An SQLDA Descriptor Area is a C language structure which can be also used to get the result set and the metadata of a query. One structure stores one record from the result set. <placeholder-1/> Note that the <literal>SQL</literal> keyword is omitted. The paragraphs about the use cases of the <literal>INTO</literal> and <literal>USING</literal> keywords in <xref linkend=\"ecpg-named-descriptors\"/> also apply here with an addition. In a <command>DESCRIBE</command> statement the <literal>DESCRIPTOR</literal> keyword can be completely omitted if the <literal>INTO</literal> keyword is used: <placeholder-2/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2674(programlisting)
#, no-wrap
msgid "\n#define NAMEDATALEN 64\n\nstruct sqlname\n{\n        short           length;\n        char            data[NAMEDATALEN];\n};\n\nstruct sqlvar_struct\n{\n        short           sqltype;\n        short           sqllen;\n        char       *sqldata;\n        short      *sqlind;\n        struct sqlname sqlname;\n};\n\nstruct sqlda_struct\n{\n        char            sqldaid[8];\n        long            sqldabc;\n        short           sqln;\n        short           sqld;\n        struct sqlda_struct *desc_next;\n        struct sqlvar_struct    sqlvar[1];\n};\n\ntypedef struct sqlvar_struct    sqlvar_t;\ntypedef struct sqlda_struct     sqlda_t;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2672(para)
msgid "The structure of SQLDA is: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2715(literal)
msgid "sqldaid"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2717(para)
msgid "It contains the \"<literal>SQLDA </literal>\" literal string."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2723(literal)
msgid "sqldabc"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2725(para)
msgid "It contains the size of the allocated space in bytes."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2731(literal)
msgid "sqln"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2733(para)
msgid "It contains the number of input parameters for a parametrized query case it's passed into <command>OPEN</command>, <command>DECLARE</command> or <command>EXECUTE</command> statements using the <literal>USING</literal> keyword. In case it's used as output of <command>SELECT</command>, <command>EXECUTE</command> or <command>FETCH</command> statements, its value is the same as <literal>sqld</literal> statement"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2745(literal) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3005(literal)
msgid "sqld"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2747(para)
msgid "It contains the number of fields in a result set."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2753(literal) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3041(literal)
msgid "desc_next"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2755(para)
msgid "If the query returns more than one records, multiple linked SQLDA structures are returned, the first record is stored in the SQLDA returned in the"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2762(literal) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3014(literal)
msgid "sqlvar"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2770(literal) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3065(literal)
msgid "sqltype"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2772(para)
msgid "It contains the type identifier of the field. For values, see <literal>enum ECPGttype</literal> in <literal>ecpgtype.h</literal>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2780(literal) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3074(literal)
msgid "sqllen"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2782(para)
msgid "It contains the binary length of the field. E.g. 4 bytes for <type>ECPGt_int</type>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2789(literal) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3083(literal)
msgid "sqldata"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2791(para)
msgid "<literal>(char *)sqldata</literal> points to the data."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2798(literal) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3104(literal)
msgid "sqlind"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2800(para)
msgid "<literal>(char *)sqlind</literal> points to the NULL indicator for data. 0 means NOT NULL, -1 means NULL."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2808(literal) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3120(literal)
msgid "sqlname"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2813(programlisting)
#, no-wrap
msgid "\nstruct sqlname\n{\n        short           length;\n        char            data[NAMEDATALEN];\n};\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2823(literal)
msgid "length"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2825(para)
msgid "<literal>sqlname.length</literal> contains the length of the field name."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2831(literal)
msgid "data"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2833(para)
msgid "<literal>sqlname.data</literal> contains the actual field name."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2810(para)
msgid "<literal>struct sqlname sqlname</literal> contains the name of the field in a structure: <placeholder-1/><placeholder-2/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2764(para)
msgid "This is the array of the fields in the result set. The fields are: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2707(para)
msgid "The allocated data for an SQLDA structure is variable as it depends on the number of fields in a result set and also depends on the length of the string data values in a record. The individual fields of the <literal>SQLDA</literal> structure are: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2855(title)
msgid "<productname>Informix</productname> compatibility mode"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2862(programlisting)
#, no-wrap
msgid "\n$int j = 3;\n$CONNECT TO :dbname;\n$CREATE TABLE test(i INT PRIMARY KEY, j INT);\n$INSERT INTO test(i, j) VALUES (7, :j);\n$COMMIT;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2856(para)
msgid "<command>ecpg</command> can be run in a so-called <firstterm>Informix compatibility mode</firstterm>. If this mode is active, it tries to behave as if it were the <productname>Informix</productname> precompiler for <productname>Informix</productname> E/SQL. Generally spoken this will allow you to use the dollar sign instead of the <literal>EXEC SQL</literal> primitive to introduce embedded SQL commands.: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2870(para)
msgid "There are two compatibility modes: <literal>INFORMIX</literal>, <literal>INFORMIX_SE</literal>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2873(para)
msgid "When linking programs that use this compatibility mode, remember to link against <literal>libcompat</literal> that is shipped with ECPG."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2877(para)
msgid "Besides the previously explained syntactic sugar, the <productname>Informix</productname> compatibility mode ports some functions for input, output and transformation of data as well as embedded SQL statements known from E/SQL to ECPG."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2882(para)
msgid "<productname>Informix</productname> compatibility mode is closely connected to the pgtypeslib library of ECPG. pgtypeslib maps SQL data types to data types within the C host program and most of the additional functions of the <productname>Informix</productname> compatibility mode allow you to operate on those C host program types. Note however that the extent of the compatibility is limited. It does not try to copy <productname>Informix</productname> behavior; it allows you to do more or less the same operations and gives you functions that have the same name and the same basic behavior but it is no drop-in replacement if you are using <productname>Informix</productname> at the moment. Moreover, some of the data types are different. For example, <productname>PostgreSQL's</productname> datetime and interval types do not know about ranges like for example <literal>YEAR TO MINUTE</literal> so you won't find support in ECPG for that either."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2898(title)
msgid "Additional types"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2903(programlisting)
#, no-wrap
msgid "\nEXEC SQL BEGIN DECLARE SECTION;\nstring userid; /* this variable will contain trimmed data */\nEXEC SQL END DECLARE SECTION;\n\nEXEC SQL FETCH MYCUR INTO :userid;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2899(para)
msgid "The Informix-special \"string\" pseudo-type for storing right-trimmed character string data is now supported in Informix-mode without using <literal>typedef</literal>. In fact, in Informix-mode, ECPG refuses to process source files that contain <literal>typedef sometype string;</literal><placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2914(title)
msgid "Additional/missing embedded SQL statements"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2918(literal)
msgid "CLOSE DATABASE"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2923(programlisting)
#, no-wrap
msgid "\n$CLOSE DATABASE;                /* close the current connection */\nEXEC SQL CLOSE DATABASE;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2920(para)
msgid "This statement closes the current connection. In fact, this is a synonym for ECPG's <literal>DISCONNECT CURRENT</literal>.: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2931(literal)
msgid "FREE cursor_name"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2933(para)
msgid "Due to the differences how ECPG works compared to Informix's ESQL/C (i.e. which steps are purely grammar transformations and which steps rely on the underlying run-time library) there is no <literal>FREE cursor_name</literal> statement in ECPG. This is because in ECPG, <literal>DECLARE CURSOR</literal> doesn't translate to a function call into the run-time library that uses to the cursor name. This means that there's no run-time bookkeeping of SQL cursors in the ECPG run-time library, only in the PostgreSQL server."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2944(literal)
msgid "FREE statement_name"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2946(para)
msgid "<literal>FREE statement_name</literal> is a synonym for <literal>DEALLOCATE PREPARE statement_name</literal>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2956(title)
msgid "Informix-compatible SQLDA Descriptor Areas"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2960(programlisting)
#, no-wrap
msgid "\nstruct sqlvar_compat\n{\n        short   sqltype;\n        int     sqllen;\n        char       *sqldata;\n        short      *sqlind;\n        char       *sqlname;\n        char       *sqlformat;\n        short   sqlitype;\n        short   sqlilen;\n        char       *sqlidata;\n        int     sqlxid;\n        char       *sqltypename;\n        short   sqltypelen;\n        short   sqlownerlen;\n        short   sqlsourcetype;\n        char       *sqlownername;\n        int     sqlsourceid;\n\n        char       *sqlilongdata;\n        int     sqlflags;\n        void       *sqlreserved;\n};\n\nstruct sqlda_compat\n{\n        short           sqld;\n        struct sqlvar_compat *sqlvar;\n        char            desc_name[19];\n        short           desc_occ;\n        struct sqlda_compat *desc_next;\n        void               *reserved;\n};\n\ntypedef struct sqlvar_compat    sqlvar_t;\ntypedef struct sqlda_compat     sqlda_t;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:2957(para)
msgid "Informix-compatible mode supports a different structure than the one described in <xref linkend=\"ecpg-sqlda-descriptors\"/>. See below: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3007(para)
msgid "The number of fields in the <literal>SQLDA</literal> descriptor."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3016(para)
msgid "Pointer to the per-field properties."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3023(literal)
msgid "desc_name"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3025(para)
msgid "Unused, filled with zero-bytes."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3032(literal)
msgid "desc_occ"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3034(para)
msgid "Size of the allocated structure."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3043(para)
msgid "Pointer to the next SQLDA structure if the result set contains more than one records."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3050(literal)
msgid "reserved"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3052(para)
msgid "Unused pointer, contains NULL. Kept for Informix-compatibility."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3067(para)
msgid "Type of the field. Constants are in <literal>sqltypes.h</literal>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3076(para)
msgid "Length of the field data."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3088(programlisting)
#, no-wrap
msgid "\nint intval; \n\nswitch (sqldata-&gt;sqlvar[i].sqltype)\n{\n    case SQLINTEGER:\n        intval = *(int *)sqldata-&gt;sqlvar[i].sqldata;\n        break;\n  ...\n}\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3085(para)
msgid "Pointer to the field data. The pointer is of <literal>char *</literal> type, the data pointed by it is in a binary format. Example: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3111(programlisting)
#, no-wrap
msgid "\nif (*(int2 *)sqldata-&gt;sqlvar[i].sqlind != 0)\n    printf(\"value is NULL\\n\");\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3106(para)
msgid "Pointer to the NULL indicator. If returned by DESCRIBE or FETCH then it's always a valid pointer. If used as input for <literal>EXECUTE ... USING sqlda;</literal> then NULL-pointer value means that the value for this field is non-NULL. Otherwise a valid pointer and <literal>sqlitype</literal> has to be properly set. Example: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3122(para)
msgid "Name of the field. 0-terminated string."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3129(literal)
msgid "sqlformat"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3131(para)
msgid "Reserved in Informix, value of <function>PQfformat()</function> for the field."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3138(literal)
msgid "sqlitype"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3140(para)
msgid "Type of the NULL indicator data. It's always SQLSMINT when returning data from the server. When the <literal>SQLDA</literal> is used for a parametrized query, the data is treated according to the set type."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3149(literal)
msgid "sqlilen"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3151(para)
msgid "Length of the NULL indicator data."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3158(literal)
msgid "sqlxid"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3160(para)
msgid "Extended type of the field, result of <function>PQftype()</function>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3167(literal)
msgid "sqltypename"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3168(literal)
msgid "sqltypelen"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3169(literal)
msgid "sqlownerlen"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3170(literal)
msgid "sqlsourcetype"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3171(literal)
msgid "sqlownername"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3172(literal)
msgid "sqlsourceid"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3173(literal)
msgid "sqlflags"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3174(literal)
msgid "sqlreserved"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3176(para)
msgid "Unused."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3183(literal)
msgid "sqlilongdata"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3185(para)
msgid "It equals to <literal>sqldata</literal> if <literal>sqllen</literal> is larger than 32KB."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3194(programlisting)
#, no-wrap
msgid "\nEXEC SQL INCLUDE sqlda.h;\n\n    sqlda_t        *sqlda; /* This doesn't need to be under embedded DECLARE SECTION */\n\n    EXEC SQL BEGIN DECLARE SECTION;\n    char *prep_stmt = \"select * from table1\";\n    int i;\n    EXEC SQL END DECLARE SECTION;\n\n    ...\n\n    EXEC SQL PREPARE mystmt FROM :prep_stmt;\n\n    EXEC SQL DESCRIBE mystmt INTO sqlda;\n\n    printf(\"# of fields: %d\\n\", sqlda-&gt;sqld);\n    for (i = 0; i &lt; sqlda-&gt;sqld; i++)\n      printf(\"field %d: \\\"%s\\\"\\n\", sqlda-&gt;sqlvar[i]-&gt;sqlname);\n\n    EXEC SQL DECLARE mycursor CURSOR FOR mystmt;\n    EXEC SQL OPEN mycursor;\n    EXEC SQL WHENEVER NOT FOUND GOTO out;\n\n    while (1)\n    {\n      EXEC SQL FETCH mycursor USING sqlda;\n    }\n\n    EXEC SQL CLOSE mycursor;\n\n    free(sqlda); /* The main structure is all to be free(),\n                  * sqlda and sqlda-&gt;sqlvar is in one allocated area */\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3000(para)
msgid "The global properties are: <placeholder-1/> The per-field properties are below, they are stored in the <literal>sqlvar</literal> array: <placeholder-2/> Example: <placeholder-3/> For more information, see the <literal>sqlda.h</literal> header and the <literal>src/interfaces/ecpg/test/compat_informix/sqlda.pgc</literal> regression test."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3234(title)
msgid "Additional functions"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3238(function)
msgid "decadd"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3240(para)
msgid "Add two decimal type values. <synopsis>\nint decadd(decimal *arg1, decimal *arg2, decimal *sum);\n</synopsis> The function receives a pointer to the first operand of type decimal (<literal>arg1</literal>), a pointer to the second operand of type decimal (<literal>arg2</literal>) and a pointer to a value of type decimal that will contain the sum (<literal>sum</literal>). On success, the function returns 0. <symbol>ECPG_INFORMIX_NUM_OVERFLOW</symbol> is returned in case of overflow and <symbol>ECPG_INFORMIX_NUM_UNDERFLOW</symbol> in case of underflow. -1 is returned for other failures and <varname>errno</varname> is set to the respective <varname>errno</varname> number of the pgtypeslib."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3258(function)
msgid "deccmp"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3271(para)
msgid "1, if the value that <literal>arg1</literal> points to is bigger than the value that <literal>var2</literal> points to"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3277(para)
msgid "-1, if the value that <literal>arg1</literal> points to is smaller than the value that <literal>arg2</literal> points to"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3282(para)
msgid "0, if the value that <literal>arg1</literal> points to and the value that <literal>arg2</literal> points to are equal"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3260(para)
msgid "Compare two variables of type decimal. <synopsis>\nint deccmp(decimal *arg1, decimal *arg2);\n</synopsis> The function receives a pointer to the first decimal value (<literal>arg1</literal>), a pointer to the second decimal value (<literal>arg2</literal>) and returns an integer value that indicates which is the bigger value. <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3293(function)
msgid "deccopy"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3295(para)
msgid "Copy a decimal value. <synopsis>\nvoid deccopy(decimal *src, decimal *target);\n</synopsis> The function receives a pointer to the decimal value that should be copied as the first argument (<literal>src</literal>) and a pointer to the target structure of type decimal (<literal>target</literal>) as the second argument."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3309(function)
msgid "deccvasc"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3311(para)
msgid "Convert a value from its ASCII representation into a decimal type. <synopsis>\nint deccvasc(char *cp, int len, decimal *np);\n</synopsis> The function receives a pointer to string that contains the string representation of the number to be converted (<literal>cp</literal>) as well as its length <literal>len</literal>. <literal>np</literal> is a pointer to the decimal value that saves the result of the operation."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3321(para)
msgid "Valid formats are for example: <literal>-2</literal>, <literal>.794</literal>, <literal>+3.44</literal>, <literal>592.49E07</literal> or <literal>-32.84e-4</literal>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3329(para)
msgid "The function returns 0 on success. If overflow or underflow occurred, <literal>ECPG_INFORMIX_NUM_OVERFLOW</literal> or <literal>ECPG_INFORMIX_NUM_UNDERFLOW</literal> is returned. If the ASCII representation could not be parsed, <literal>ECPG_INFORMIX_BAD_NUMERIC</literal> is returned or <literal>ECPG_INFORMIX_BAD_EXPONENT</literal> if this problem occurred while parsing the exponent."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3342(function)
msgid "deccvdbl"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3344(para)
msgid "Convert a value of type double to a value of type decimal. <synopsis>\nint deccvdbl(double dbl, decimal *np);\n</synopsis> The function receives the variable of type double that should be converted as its first argument (<literal>dbl</literal>). As the second argument (<literal>np</literal>), the function receives a pointer to the decimal variable that should hold the result of the operation."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3354(para) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3374(para) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3394(para)
msgid "The function returns 0 on success and a negative value if the conversion failed."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3362(function)
msgid "deccvint"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3364(para)
msgid "Convert a value of type int to a value of type decimal. <synopsis>\nint deccvint(int in, decimal *np);\n</synopsis> The function receives the variable of type int that should be converted as its first argument (<literal>in</literal>). As the second argument (<literal>np</literal>), the function receives a pointer to the decimal variable that should hold the result of the operation."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3382(function)
msgid "deccvlong"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3384(para)
msgid "Convert a value of type long to a value of type decimal. <synopsis>\nint deccvlong(long lng, decimal *np);\n</synopsis> The function receives the variable of type long that should be converted as its first argument (<literal>lng</literal>). As the second argument (<literal>np</literal>), the function receives a pointer to the decimal variable that should hold the result of the operation."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3402(function)
msgid "decdiv"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3404(para)
msgid "Divide two variables of type decimal. <synopsis>\nint decdiv(decimal *n1, decimal *n2, decimal *result);\n</synopsis> The function receives pointers to the variables that are the first (<literal>n1</literal>) and the second (<literal>n2</literal>) operands and calculates <literal>n1</literal>/<literal>n2</literal>. <literal>result</literal> is a pointer to the variable that should hold the result of the operation."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3414(para)
msgid "On success, 0 is returned and a negative value if the division fails. If overflow or underflow occurred, the function returns <literal>ECPG_INFORMIX_NUM_OVERFLOW</literal> or <literal>ECPG_INFORMIX_NUM_UNDERFLOW</literal> respectively. If an attempt to divide by zero is observed, the function returns <literal>ECPG_INFORMIX_DIVIDE_ZERO</literal>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3426(function)
msgid "decmul"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3428(para)
msgid "Multiply two decimal values. <synopsis>\nint decmul(decimal *n1, decimal *n2, decimal *result);\n</synopsis> The function receives pointers to the variables that are the first (<literal>n1</literal>) and the second (<literal>n2</literal>) operands and calculates <literal>n1</literal>*<literal>n2</literal>. <literal>result</literal> is a pointer to the variable that should hold the result of the operation."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3438(para)
msgid "On success, 0 is returned and a negative value if the multiplication fails. If overflow or underflow occurred, the function returns <literal>ECPG_INFORMIX_NUM_OVERFLOW</literal> or <literal>ECPG_INFORMIX_NUM_UNDERFLOW</literal> respectively."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3448(function)
msgid "decsub"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3450(para)
msgid "Subtract one decimal value from another. <synopsis>\nint decsub(decimal *n1, decimal *n2, decimal *result);\n</synopsis> The function receives pointers to the variables that are the first (<literal>n1</literal>) and the second (<literal>n2</literal>) operands and calculates <literal>n1</literal>-<literal>n2</literal>. <literal>result</literal> is a pointer to the variable that should hold the result of the operation."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3460(para)
msgid "On success, 0 is returned and a negative value if the subtraction fails. If overflow or underflow occurred, the function returns <literal>ECPG_INFORMIX_NUM_OVERFLOW</literal> or <literal>ECPG_INFORMIX_NUM_UNDERFLOW</literal> respectively."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3470(function)
msgid "dectoasc"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3472(para)
msgid "Convert a variable of type decimal to its ASCII representation in a C char* string. <synopsis>\nint dectoasc(decimal *np, char *cp, int len, int right)\n</synopsis> The function receives a pointer to a variable of type decimal (<literal>np</literal>) that it converts to its textual representation. <literal>cp</literal> is the buffer that should hold the result of the operation. The parameter <literal>right</literal> specifies, how many digits right of the decimal point should be included in the output. The result will be rounded to this number of decimal digits. Setting <literal>right</literal> to -1 indicates that all available decimal digits should be included in the output. If the length of the output buffer, which is indicated by <literal>len</literal> is not sufficient to hold the textual representation including the trailing NUL character, only a single <literal>*</literal> character is stored in the result and -1 is returned."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3491(para)
msgid "The function returns either -1 if the buffer <literal>cp</literal> was too small or <literal>ECPG_INFORMIX_OUT_OF_MEMORY</literal> if memory was exhausted."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3500(function)
msgid "dectodbl"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3502(para)
msgid "Convert a variable of type decimal to a double. <synopsis>\nint dectodbl(decimal *np, double *dblp);\n</synopsis> The function receives a pointer to the decimal value to convert (<literal>np</literal>) and a pointer to the double variable that should hold the result of the operation (<literal>dblp</literal>)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3511(para)
msgid "On success, 0 is returned and a negative value if the conversion failed."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3519(function)
msgid "dectoint"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3521(para)
msgid "Convert a variable to type decimal to an integer. <synopsis>\nint dectoint(decimal *np, int *ip);\n</synopsis> The function receives a pointer to the decimal value to convert (<literal>np</literal>) and a pointer to the integer variable that should hold the result of the operation (<literal>ip</literal>)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3530(para) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3556(para)
msgid "On success, 0 is returned and a negative value if the conversion failed. If an overflow occurred, <literal>ECPG_INFORMIX_NUM_OVERFLOW</literal> is returned."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3535(para)
msgid "Note that the ECPG implementation differs from the <productname>Informix</productname> implementation. <productname>Informix</productname> limits an integer to the range from -32767 to 32767, while the limits in the ECPG implementation depend on the architecture (<literal>-INT_MAX .. INT_MAX</literal>)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3545(function)
msgid "dectolong"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3547(para)
msgid "Convert a variable to type decimal to a long integer. <synopsis>\nint dectolong(decimal *np, long *lngp);\n</synopsis> The function receives a pointer to the decimal value to convert (<literal>np</literal>) and a pointer to the long variable that should hold the result of the operation (<literal>lngp</literal>)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3561(para)
msgid "Note that the ECPG implementation differs from the <productname>Informix</productname> implementation. <productname>Informix</productname> limits a long integer to the range from -2,147,483,647 to 2,147,483,647, while the limits in the ECPG implementation depend on the architecture (<literal>-LONG_MAX .. LONG_MAX</literal>)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3572(function)
msgid "rdatestr"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3574(para)
msgid "Converts a date to a C char* string. <synopsis>\nint rdatestr(date d, char *str);\n</synopsis> The function receives two arguments, the first one is the date to convert (<literal>d</literal> and the second one is a pointer to the target string. The output format is always <literal>yyyy-mm-dd</literal>, so you need to allocate at least 11 bytes (including the NUL-terminator) for the string."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3585(para) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3864(para) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3895(para)
msgid "The function returns 0 on success and a negative value in case of error."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3589(para)
msgid "Note that ECPG's implementation differs from the <productname>Informix</productname> implementation. In <productname>Informix</productname> the format can be influenced by setting environment variables. In ECPG however, you cannot change the output format."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3599(function)
msgid "rstrdate"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3601(para)
msgid "Parse the textual representation of a date. <synopsis>\nint rstrdate(char *str, date *d);\n</synopsis> The function receives the textual representation of the date to convert (<literal>str</literal>) and a pointer to a variable of type date (<literal>d</literal>). This function does not allow you to specify a format mask. It uses the default format mask of <productname>Informix</productname> which is <literal>mm/dd/yyyy</literal>. Internally, this function is implemented by means of <function>rdefmtdate</function>. Therefore, <function>rstrdate</function> is not faster and if you have the choice you should opt for <function>rdefmtdate</function> which allows you to specify the format mask explicitly."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3616(para)
msgid "The function returns the same values as <function>rdefmtdate</function>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3623(function)
msgid "rtoday"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3625(para)
msgid "Get the current date. <synopsis>\nvoid rtoday(date *d);\n</synopsis> The function receives a pointer to a date variable (<literal>d</literal>) that it sets to the current date."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3633(para)
msgid "Internally this function uses the <xref linkend=\"PGTYPESdatetoday\"/> function."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3641(function)
msgid "rjulmdy"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3643(para)
msgid "Extract the values for the day, the month and the year from a variable of type date. <synopsis>\nint rjulmdy(date d, short mdy[3]);\n</synopsis> The function receives the date <literal>d</literal> and a pointer to an array of 3 short integer values <literal>mdy</literal>. The variable name indicates the sequential order: <literal>mdy[0]</literal> will be set to contain the number of the month, <literal>mdy[1]</literal> will be set to the value of the day and <literal>mdy[2]</literal> will contain the year."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3655(para)
msgid "The function always returns 0 at the moment."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3658(para)
msgid "Internally the function uses the <xref linkend=\"PGTYPESdatejulmdy\"/> function."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3666(function)
msgid "rdefmtdate"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3668(para)
msgid "Use a format mask to convert a character string to a value of type date. <synopsis>\nint rdefmtdate(date *d, char *fmt, char *str);\n</synopsis> The function receives a pointer to the date value that should hold the result of the operation (<literal>d</literal>), the format mask to use for parsing the date (<literal>fmt</literal>) and the C char* string containing the textual representation of the date (<literal>str</literal>). The textual representation is expected to match the format mask. However you do not need to have a 1:1 mapping of the string to the format mask. The function only analyzes the sequential order and looks for the literals <literal>yy</literal> or <literal>yyyy</literal> that indicate the position of the year, <literal>mm</literal> to indicate the position of the month and <literal>dd</literal> to indicate the position of the day."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3690(para)
msgid "0 - The function terminated successfully."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3695(para)
msgid "<literal>ECPG_INFORMIX_ENOSHORTDATE</literal> - The date does not contain delimiters between day, month and year. In this case the input string must be exactly 6 or 8 bytes long but isn't."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3702(para)
msgid "<literal>ECPG_INFORMIX_ENOTDMY</literal> - The format string did not correctly indicate the sequential order of year, month and day."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3708(para)
msgid "<literal>ECPG_INFORMIX_BAD_DAY</literal> - The input string does not contain a valid day."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3714(para)
msgid "<literal>ECPG_INFORMIX_BAD_MONTH</literal> - The input string does not contain a valid month."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3720(para)
msgid "<literal>ECPG_INFORMIX_BAD_YEAR</literal> - The input string does not contain a valid year."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3686(para)
msgid "The function returns the following values: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3727(para)
msgid "Internally this function is implemented to use the <xref linkend=\"PGTYPESdatedefmtasc\"/> function. See the reference there for a table of example input."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3736(function)
msgid "rfmtdate"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3738(para)
msgid "Convert a variable of type date to its textual representation using a format mask. <synopsis>\nint rfmtdate(date d, char *fmt, char *str);\n</synopsis> The function receives the date to convert (<literal>d</literal>), the format mask (<literal>fmt</literal>) and the string that will hold the textual representation of the date (<literal>str</literal>)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3751(para)
msgid "Internally this function uses the <xref linkend=\"PGTYPESdatefmtasc\"/> function, see the reference there for examples."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3759(function)
msgid "rmdyjul"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3761(para)
msgid "Create a date value from an array of 3 short integers that specify the day, the month and the year of the date. <synopsis>\nint rmdyjul(short mdy[3], date *d);\n</synopsis> The function receives the array of the 3 short integers (<literal>mdy</literal>) and a pointer to a variable of type date that should hold the result of the operation."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3771(para)
msgid "Currently the function returns always 0."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3774(para)
msgid "Internally the function is implemented to use the function <xref linkend=\"PGTYPESdatemdyjul\"/>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3782(function)
msgid "rdayofweek"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3784(para)
msgid "Return a number representing the day of the week for a date value. <synopsis>\nint rdayofweek(date d);\n</synopsis> The function receives the date variable <literal>d</literal> as its only argument and returns an integer that indicates the day of the week for this date. <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3830(para)
msgid "Internally the function is implemented to use the function <xref linkend=\"PGTYPESdatedayofweek\"/>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3838(function)
msgid "dtcurrent"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3840(para)
msgid "Retrieve the current timestamp. <synopsis>\nvoid dtcurrent(timestamp *ts);\n</synopsis> The function retrieves the current timestamp and saves it into the timestamp variable that <literal>ts</literal> points to."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3852(function)
msgid "dtcvasc"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3854(para)
msgid "Parses a timestamp from its textual representation into a timestamp variable. <synopsis>\nint dtcvasc(char *str, timestamp *ts);\n</synopsis> The function receives the string to parse (<literal>str</literal>) and a pointer to the timestamp variable that should hold the result of the operation (<literal>ts</literal>)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3868(para)
msgid "Internally this function uses the <xref linkend=\"PGTYPEStimestampfromasc\"/> function. See the reference there for a table with example inputs."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3877(function)
msgid "dtcvfmtasc"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3879(para)
msgid "Parses a timestamp from its textual representation using a format mask into a timestamp variable. <synopsis>\ndtcvfmtasc(char *inbuf, char *fmtstr, timestamp *dtvalue)\n</synopsis> The function receives the string to parse (<literal>inbuf</literal>), the format mask to use (<literal>fmtstr</literal>) and a pointer to the timestamp variable that should hold the result of the operation (<literal>dtvalue</literal>)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3890(para)
msgid "This function is implemented by means of the <xref linkend=\"PGTYPEStimestampdefmtasc\"/> function. See the documentation there for a list of format specifiers that can be used."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3903(function)
msgid "dtsub"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3905(para)
msgid "Subtract one timestamp from another and return a variable of type interval. <synopsis>\nint dtsub(timestamp *ts1, timestamp *ts2, interval *iv);\n</synopsis> The function will subtract the timestamp variable that <literal>ts2</literal> points to from the timestamp variable that <literal>ts1</literal> points to and will store the result in the interval variable that <literal>iv</literal> points to."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3924(function)
msgid "dttoasc"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3926(para)
msgid "Convert a timestamp variable to a C char* string. <synopsis>\nint dttoasc(timestamp *ts, char *output);\n</synopsis> The function receives a pointer to the timestamp variable to convert (<literal>ts</literal>) and the string that should hold the result of the operation <literal>output</literal>). It converts <literal>ts</literal> to its textual representation according to the SQL standard, which is be <literal>YYYY-MM-DD HH:MM:SS</literal>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3945(function)
msgid "dttofmtasc"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3947(para)
msgid "Convert a timestamp variable to a C char* using a format mask. <synopsis>\nint dttofmtasc(timestamp *ts, char *output, int str_len, char *fmtstr);\n</synopsis> The function receives a pointer to the timestamp to convert as its first argument (<literal>ts</literal>), a pointer to the output buffer (<literal>output</literal>), the maximal length that has been allocated for the output buffer (<literal>str_len</literal>) and the format mask to use for the conversion (<literal>fmtstr</literal>)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3962(para)
msgid "Internally, this function uses the <xref linkend=\"PGTYPEStimestampfmtasc\"/> function. See the reference there for information on what format mask specifiers can be used."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3971(function)
msgid "intoasc"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3973(para)
msgid "Convert an interval variable to a C char* string. <synopsis>\nint intoasc(interval *i, char *str);\n</synopsis> The function receives a pointer to the interval variable to convert (<literal>i</literal>) and the string that should hold the result of the operation <literal>str</literal>). It converts <literal>i</literal> to its textual representation according to the SQL standard, which is be <literal>YYYY-MM-DD HH:MM:SS</literal>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3992(function)
msgid "rfmtlong"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:3994(para)
msgid "Convert a long integer value to its textual representation using a format mask. <synopsis>\nint rfmtlong(long lng_val, char *fmt, char *outbuf);\n</synopsis> The function receives the long value <literal>lng_val</literal>, the format mask <literal>fmt</literal> and a pointer to the output buffer <literal>outbuf</literal>. It converts the long value according to the format mask to its textual representation."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4010(para)
msgid "<literal>*</literal> (asterisk) - if this position would be blank otherwise, fill it with an asterisk."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4016(para)
msgid "<literal>&amp;</literal> (ampersand) - if this position would be blank otherwise, fill it with a zero."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4022(para)
msgid "<literal>#</literal> - turn leading zeroes into blanks."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4027(para)
msgid "<literal>&lt;</literal> - left-justify the number in the string."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4032(para)
msgid "<literal>,</literal> (comma) - group numbers of four or more digits into groups of three digits separated by a comma."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4038(para)
msgid "<literal>.</literal> (period) - this character separates the whole-number part of the number from the fractional part."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4044(para)
msgid "<literal>-</literal> (minus) - the minus sign appears if the number is a negative value."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4050(para)
msgid "<literal>+</literal> (plus) - the plus sign appears if the number is a positive value."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4056(para)
msgid "<literal>(</literal> - this replaces the minus sign in front of the negative number. The minus sign will not appear."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4062(para)
msgid "<literal>)</literal> - this character replaces the minus and is printed behind the negative value."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4068(para)
msgid "<literal>$</literal> - the currency symbol."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4005(para)
msgid "The format mask can be composed of the following format specifying characters: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4078(function)
msgid "rupshift"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4080(para)
msgid "Convert a string to upper case. <synopsis>\nvoid rupshift(char *str);\n</synopsis> The function receives a pointer to the string and transforms every lower case character to upper case."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4092(function)
msgid "byleng"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4094(para)
msgid "Return the number of characters in a string without counting trailing blanks. <synopsis>\nint byleng(char *str, int len);\n</synopsis> The function expects a fixed-length string as its first argument (<literal>str</literal>) and its length as its second argument (<literal>len</literal>). It returns the number of significant characters, that is the length of the string without trailing blanks."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4109(function)
msgid "ldchar"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4111(para)
msgid "Copy a fixed-length string into a null-terminated string. <synopsis>\nvoid ldchar(char *src, int len, char *dest);\n</synopsis> The function receives the fixed-length string to copy (<literal>src</literal>), its length (<literal>len</literal>) and a pointer to the destination memory (<literal>dest</literal>). Note that you need to reserve at least <literal>len+1</literal> bytes for the string that <literal>dest</literal> points to. The function copies at most <literal>len</literal> bytes to the new location (less if the source string has trailing blanks) and adds the null-terminator."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4128(function)
msgid "rgetmsg"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4130(para)
msgid "<synopsis>\nint rgetmsg(int msgnum, char *s, int maxsize);\n</synopsis> This function exists but is not implemented at the moment!"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4140(function)
msgid "rtypalign"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4142(para)
msgid "<synopsis>\nint rtypalign(int offset, int type);\n</synopsis> This function exists but is not implemented at the moment!"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4152(function)
msgid "rtypmsize"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4154(para)
msgid "<synopsis>\nint rtypmsize(int type, int len);\n</synopsis> This function exists but is not implemented at the moment!"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4164(function)
msgid "rtypwidth"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4166(para)
msgid "<synopsis>\nint rtypwidth(int sqltype, int sqllen);\n</synopsis> This function exists but is not implemented at the moment!"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4176(function)
msgid "rsetnull"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4178(para)
msgid "Set a variable to NULL. <synopsis>\nint rsetnull(int t, char *ptr);\n</synopsis> The function receives an integer that indicates the type of the variable and a pointer to the variable itself that is casted to a C char* pointer."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4191(para)
msgid "<literal>CCHARTYPE</literal> - For a variable of type <type>char</type> or <type>char*</type>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4196(para)
msgid "<literal>CSHORTTYPE</literal> - For a variable of type <type>short int</type>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4201(para)
msgid "<literal>CINTTYPE</literal> - For a variable of type <type>int</type>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4206(para)
msgid "<literal>CBOOLTYPE</literal> - For a variable of type <type>boolean</type>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4211(para)
msgid "<literal>CFLOATTYPE</literal> - For a variable of type <type>float</type>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4216(para)
msgid "<literal>CLONGTYPE</literal> - For a variable of type <type>long</type>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4221(para)
msgid "<literal>CDOUBLETYPE</literal> - For a variable of type <type>double</type>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4226(para)
msgid "<literal>CDECIMALTYPE</literal> - For a variable of type <type>decimal</type>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4231(para)
msgid "<literal>CDATETYPE</literal> - For a variable of type <type>date</type>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4236(para)
msgid "<literal>CDTIMETYPE</literal> - For a variable of type <type>timestamp</type>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4187(para)
msgid "The following types exist: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4243(para)
msgid "Here is an example of a call to this function: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4260(function)
msgid "risnull"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4262(para)
msgid "Test if a variable is NULL. <synopsis>\nint risnull(int t, char *ptr);\n</synopsis> The function receives the type of the variable to test (<literal>t</literal>) as well a pointer to this variable (<literal>ptr</literal>). Note that the latter needs to be casted to a char*. See the function <xref linkend=\"rsetnull\"/> for a list of possible variable types."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4272(para)
msgid "Here is an example of how to use this function: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4292(title)
msgid "Additional constants"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4302(literal)
msgid "ECPG_INFORMIX_NUM_OVERFLOW"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4304(para)
msgid "Functions return this value if an overflow occurred in a calculation. Internally it is defined to -1200 (the <productname>Informix</productname> definition)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4313(literal)
msgid "ECPG_INFORMIX_NUM_UNDERFLOW"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4315(para)
msgid "Functions return this value if an underflow occurred in a calculation. Internally it is defined to -1201 (the <productname>Informix</productname> definition)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4323(literal)
msgid "ECPG_INFORMIX_DIVIDE_ZERO"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4325(para)
msgid "Functions return this value if an attempt to divide by zero is observed. Internally it is defined to -1202 (the <productname>Informix</productname> definition)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4333(literal)
msgid "ECPG_INFORMIX_BAD_YEAR"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4335(para)
msgid "Functions return this value if a bad value for a year was found while parsing a date. Internally it is defined to -1204 (the <productname>Informix</productname> definition)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4344(literal)
msgid "ECPG_INFORMIX_BAD_MONTH"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4346(para)
msgid "Functions return this value if a bad value for a month was found while parsing a date. Internally it is defined to -1205 (the <productname>Informix</productname> definition)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4355(literal)
msgid "ECPG_INFORMIX_BAD_DAY"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4357(para)
msgid "Functions return this value if a bad value for a day was found while parsing a date. Internally it is defined to -1206 (the <productname>Informix</productname> definition)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4366(literal)
msgid "ECPG_INFORMIX_ENOSHORTDATE"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4368(para)
msgid "Functions return this value if a parsing routine needs a short date representation but did not get the date string in the right length. Internally it is defined to -1209 (the <productname>Informix</productname> definition)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4377(literal)
msgid "ECPG_INFORMIX_DATE_CONVERT"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4379(para)
msgid "Functions return this value if Internally it is defined to -1210 (the <productname>Informix</productname> definition)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4387(literal)
msgid "ECPG_INFORMIX_OUT_OF_MEMORY"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4389(para)
msgid "Functions return this value if Internally it is defined to -1211 (the <productname>Informix</productname> definition)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4397(literal)
msgid "ECPG_INFORMIX_ENOTDMY"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4399(para)
msgid "Functions return this value if a parsing routine was supposed to get a format mask (like <literal>mmddyy</literal>) but not all fields were listed correctly. Internally it is defined to -1212 (the <productname>Informix</productname> definition)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4408(literal)
msgid "ECPG_INFORMIX_BAD_NUMERIC"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4410(para)
msgid "Functions return this value either if a parsing routine cannot parse the textual representation for a numeric value because it contains errors or if a routine cannot complete a calculation involving numeric variables because at least one of the numeric variables is invalid. Internally it is defined to -1213 (the <productname>Informix</productname> definition)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4421(literal)
msgid "ECPG_INFORMIX_BAD_EXPONENT"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4423(para)
msgid "Functions return this value if Internally it is defined to -1216 (the <productname>Informix</productname> definition)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4431(literal)
msgid "ECPG_INFORMIX_BAD_DATE"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4433(para)
msgid "Functions return this value if Internally it is defined to -1218 (the <productname>Informix</productname> definition)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4441(literal)
msgid "ECPG_INFORMIX_EXTRA_CHARS"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4443(para)
msgid "Functions return this value if Internally it is defined to -1264 (the <productname>Informix</productname> definition)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4293(para)
msgid "Note that all constants here describe errors and all of them are defined to represent negative values. In the descriptions of the different constants you can also find the value that the constants represent in the current implementation. However you should not rely on this number. You can however rely on the fact all of them are defined to represent negative values. <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4455(title)
msgid "Error Handling"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4457(para)
msgid "This section describes how you can handle exceptional conditions and warnings in an embedded SQL program. There are several nonexclusive facilities for this."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4464(title)
msgid "Setting Callbacks"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4470(programlisting)
#, no-wrap
msgid "\nEXEC SQL WHENEVER <replaceable>condition</replaceable> <replaceable>action</replaceable>;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4466(para)
msgid "One simple method to catch errors and warnings is to set a specific action to be executed whenever a particular condition occurs. In general: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4480(literal)
msgid "SQLERROR"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4482(para)
msgid "The specified action is called whenever an error occurs during the execution of an SQL statement."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4490(literal)
msgid "SQLWARNING"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4492(para)
msgid "The specified action is called whenever a warning occurs during the execution of an SQL statement."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4500(literal)
msgid "NOT FOUND"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4502(para)
msgid "The specified action is called whenever an SQL statement retrieves or affects zero rows. (This condition is not an error, but you might be interested in handling it specially.)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4475(para)
msgid "<replaceable>condition</replaceable> can be one of the following: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4517(literal)
msgid "CONTINUE"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4519(para)
msgid "This effectively means that the condition is ignored. This is the default."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4527(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4528(replaceable)
msgid "label"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4527(literal)
msgid "GOTO <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4528(literal)
msgid "GO TO <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4530(para)
msgid "Jump to the specified label (using a C <literal>goto</literal> statement)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4538(literal)
msgid "SQLPRINT"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4540(para)
msgid "Print a message to standard error. This is useful for simple programs or during prototyping. The details of the message cannot be configured."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4549(literal)
msgid "STOP"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4551(para)
msgid "Call <literal>exit(1)</literal>, which will terminate the program."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4559(literal)
msgid "DO BREAK"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4561(para)
msgid "Execute the C statement <literal>break</literal>. This should only be used in loops or <literal>switch</literal> statements."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4569(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4570(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5158(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5169(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5191(replaceable)
msgid "name"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4569(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4570(replaceable)
msgid "args"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4569(literal)
msgid "CALL <placeholder-1/> (<placeholder-2/>)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4570(literal)
msgid "DO <placeholder-1/> (<placeholder-2/>)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4572(para)
msgid "Call the specified C functions with the specified arguments."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4512(para)
msgid "<replaceable>action</replaceable> can be one of the following: <placeholder-1/> The SQL standard only provides for the actions <literal>CONTINUE</literal> and <literal>GOTO</literal> (and <literal>GO TO</literal>)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4588(programlisting)
#, no-wrap
msgid "\nEXEC SQL WHENEVER SQLWARNING SQLPRINT;\nEXEC SQL WHENEVER SQLERROR STOP;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4584(para)
msgid "Here is an example that you might want to use in a simple program. It prints a simple message when a warning occurs and aborts the program when an error happens: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4604(programlisting)
#, no-wrap
msgid "\n/*\n * WRONG\n */\nint main(int argc, char *argv[])\n{\n    ...\n    if (verbose) {\n        EXEC SQL WHENEVER SQLWARNING SQLPRINT;\n    }\n    ...\n    EXEC SQL SELECT ...;\n    ...\n}\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4620(programlisting)
#, no-wrap
msgid "\n/*\n * WRONG\n */\nint main(int argc, char *argv[])\n{\n    ...\n    set_error_handler();\n    ...\n    EXEC SQL SELECT ...;\n    ...\n}\n\nstatic void set_error_handler(void)\n{\n    EXEC SQL WHENEVER SQLERROR STOP;\n}\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4594(para)
msgid "The statement <literal>EXEC SQL WHENEVER</literal> is a directive of the SQL preprocessor, not a C statement. The error or warning actions that it sets apply to all embedded SQL statements that appear below the point where the handler is set, unless a different action was set for the same condition between the first <literal>EXEC SQL WHENEVER</literal> and the SQL statement causing the condition, regardless of the flow of control in the C program. So neither of the two following C program excerpts will have the desired effect: <placeholder-1/><placeholder-2/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4642(title)
msgid "sqlca"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4648(programlisting)
#, no-wrap
msgid "\nstruct\n{\n    char sqlcaid[8];\n    long sqlabc;\n    long sqlcode;\n    struct\n    {\n        int sqlerrml;\n        char sqlerrmc[SQLERRMC_LEN];\n    } sqlerrm;\n    char sqlerrp[8];\n    long sqlerrd[6];\n    char sqlwarn[8];\n    char sqlstate[5];\n} sqlca;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4644(para)
msgid "For more powerful error handling, the embedded SQL interface provides a global variable with the name <varname>sqlca</varname> that has the following structure: <placeholder-1/> (In a multithreaded program, every thread automatically gets its own copy of <varname>sqlca</varname>. This works similarly to the handling of the standard C global variable <varname>errno</varname>.)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4671(para)
msgid "<varname>sqlca</varname> covers both warnings and errors. If multiple warnings or errors occur during the execution of a statement, then <varname>sqlca</varname> will only contain information about the last one."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4678(para)
msgid "If no error occurred in the last <acronym>SQL</acronym> statement, <literal>sqlca.sqlcode</literal> will be 0 and <literal>sqlca.sqlstate</literal> will be <literal>\"00000\"</literal>. If a warning or error occurred, then <literal>sqlca.sqlcode</literal> will be negative and <literal>sqlca.sqlstate</literal> will be different from <literal>\"00000\"</literal>. A positive <literal>sqlca.sqlcode</literal> indicates a harmless condition, such as that the last query returned zero rows. <literal>sqlcode</literal> and <literal>sqlstate</literal> are two different error code schemes; details appear below."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4692(para)
msgid "If the last SQL statement was successful, then <literal>sqlca.sqlerrd[1]</literal> contains the OID of the processed row, if applicable, and <literal>sqlca.sqlerrd[2]</literal> contains the number of processed or returned rows, if applicable to the command."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4700(para)
msgid "In case of an error or warning, <literal>sqlca.sqlerrm.sqlerrmc</literal> will contain a string that describes the error. The field <literal>sqlca.sqlerrm.sqlerrml</literal> contains the length of the error message that is stored in <literal>sqlca.sqlerrm.sqlerrmc</literal> (the result of <function>strlen()</function>, not really interesting for a C programmer). Note that some messages are too long to fit in the fixed-size <literal>sqlerrmc</literal> array; they will be truncated."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4712(para)
msgid "In case of a warning, <literal>sqlca.sqlwarn[2]</literal> is set to <literal>W</literal>. (In all other cases, it is set to something different from <literal>W</literal>.) If <literal>sqlca.sqlwarn[1]</literal> is set to <literal>W</literal>, then a value was truncated when it was stored in a host variable. <literal>sqlca.sqlwarn[0]</literal> is set to <literal>W</literal> if any of the other elements are set to indicate a warning."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4723(para)
msgid "The fields <structfield>sqlcaid</structfield>, <structfield>sqlcabc</structfield>, <structfield>sqlerrp</structfield>, and the remaining elements of <structfield>sqlerrd</structfield> and <structfield>sqlwarn</structfield> currently contain no useful information."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4732(para)
msgid "The structure <varname>sqlca</varname> is not defined in the SQL standard, but is implemented in several other SQL database systems. The definitions are similar at the core, but if you want to write portable applications, then you should investigate the different implementations carefully."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4742(title)
msgid "<literal>SQLSTATE</literal> vs <literal>SQLCODE</literal>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4744(para)
msgid "The fields <literal>sqlca.sqlstate</literal> and <literal>sqlca.sqlcode</literal> are two different schemes that provide error codes. Both are derived from the SQL standard, but <literal>SQLCODE</literal> has been marked deprecated in the SQL-92 edition of the standard and has been dropped in later editions. Therefore, new applications are strongly encouraged to use <literal>SQLSTATE</literal>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4754(para)
msgid "<literal>SQLSTATE</literal> is a five-character array. The five characters contain digits or upper-case letters that represent codes of various error and warning conditions. <literal>SQLSTATE</literal> has a hierarchical scheme: the first two characters indicate the general class of the condition, the last three characters indicate a subclass of the general condition. A successful state is indicated by the code <literal>00000</literal>. The <literal>SQLSTATE</literal> codes are for the most part defined in the SQL standard. The <productname>PostgreSQL</productname> server natively supports <literal>SQLSTATE</literal> error codes; therefore a high degree of consistency can be achieved by using this error code scheme throughout all applications. For further information see <xref linkend=\"errcodes-appendix\"/>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4771(para)
msgid "<literal>SQLCODE</literal>, the deprecated error code scheme, is a simple integer. A value of 0 indicates success, a positive value indicates success with additional information, a negative value indicates an error. The SQL standard only defines the positive value +100, which indicates that the last command returned or affected zero rows, and no specific negative values. Therefore, this scheme can only achieve poor portability and does not have a hierarchical code assignment. Historically, the embedded SQL processor for <productname>PostgreSQL</productname> has assigned some specific <literal>SQLCODE</literal> values for its use, which are listed below with their numeric value and their symbolic name. Remember that these are not portable to other SQL implementations. To simplify the porting of applications to the <literal>SQLSTATE</literal> scheme, the corresponding <literal>SQLSTATE</literal> is also listed. There is, however, no one-to-one or one-to-many mapping between the two schemes (indeed it is many-to-many), so you should consult the global <literal>SQLSTATE</literal> listing in <xref linkend=\"errcodes-appendix\"/> in each case."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4798(term)
msgid "-12 (<symbol>ECPG_OUT_OF_MEMORY</symbol>)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4800(para)
msgid "Indicates that your virtual memory is exhausted. (SQLSTATE YE001)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4808(term)
msgid "-200 (<symbol>ECPG_UNSUPPORTED</symbol>)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4810(para)
msgid "Indicates the preprocessor has generated something that the library does not know about. Perhaps you are running incompatible versions of the preprocessor and the library. (SQLSTATE YE002)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4820(term)
msgid "-201 (<symbol>ECPG_TOO_MANY_ARGUMENTS</symbol>)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4822(para)
msgid "This means that the command specified more host variables than the command expected. (SQLSTATE 07001 or 07002)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4830(term)
msgid "-202 (<symbol>ECPG_TOO_FEW_ARGUMENTS</symbol>)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4832(para)
msgid "This means that the command specified fewer host variables than the command expected. (SQLSTATE 07001 or 07002)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4840(term)
msgid "-203 (<symbol>ECPG_TOO_MANY_MATCHES</symbol>)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4842(para)
msgid "This means a query has returned multiple rows but the statement was only prepared to store one result row (for example, because the specified variables are not arrays). (SQLSTATE 21000)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4851(term)
msgid "-204 (<symbol>ECPG_INT_FORMAT</symbol>)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4853(para)
msgid "The host variable is of type <type>int</type> and the datum in the database is of a different type and contains a value that cannot be interpreted as an <type>int</type>. The library uses <function>strtol()</function> for this conversion. (SQLSTATE 42804)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4864(term)
msgid "-205 (<symbol>ECPG_UINT_FORMAT</symbol>)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4866(para)
msgid "The host variable is of type <type>unsigned int</type> and the datum in the database is of a different type and contains a value that cannot be interpreted as an <type>unsigned int</type>. The library uses <function>strtoul()</function> for this conversion. (SQLSTATE 42804)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4877(term)
msgid "-206 (<symbol>ECPG_FLOAT_FORMAT</symbol>)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4879(para)
msgid "The host variable is of type <type>float</type> and the datum in the database is of another type and contains a value that cannot be interpreted as a <type>float</type>. The library uses <function>strtod()</function> for this conversion. (SQLSTATE 42804)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4890(term)
msgid "-211 (<symbol>ECPG_CONVERT_BOOL</symbol>)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4892(para)
msgid "This means the host variable is of type <type>bool</type> and the datum in the database is neither <literal>'t'</literal> nor <literal>'f'</literal>. (SQLSTATE 42804)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4901(term)
msgid "-212 (<symbol>ECPG_EMPTY</symbol>)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4903(para)
msgid "The statement sent to the <productname>PostgreSQL</productname> server was empty. (This cannot normally happen in an embedded SQL program, so it might point to an internal error.) (SQLSTATE YE002)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4913(term)
msgid "-213 (<symbol>ECPG_MISSING_INDICATOR</symbol>)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4915(para)
msgid "A null value was returned and no null indicator variable was supplied. (SQLSTATE 22002)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4923(term)
msgid "-214 (<symbol>ECPG_NO_ARRAY</symbol>)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4925(para)
msgid "An ordinary variable was used in a place that requires an array. (SQLSTATE 42804)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4933(term)
msgid "-215 (<symbol>ECPG_DATA_NOT_ARRAY</symbol>)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4935(para)
msgid "The database returned an ordinary variable in a place that requires array value. (SQLSTATE 42804)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4943(term)
msgid "-220 (<symbol>ECPG_NO_CONN</symbol>)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4945(para)
msgid "The program tried to access a connection that does not exist. (SQLSTATE 08003)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4953(term)
msgid "-221 (<symbol>ECPG_NOT_CONN</symbol>)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4955(para)
msgid "The program tried to access a connection that does exist but is not open. (This is an internal error.) (SQLSTATE YE002)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4963(term)
msgid "-230 (<symbol>ECPG_INVALID_STMT</symbol>)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4965(para)
msgid "The statement you are trying to use has not been prepared. (SQLSTATE 26000)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4973(term)
msgid "-240 (<symbol>ECPG_UNKNOWN_DESCRIPTOR</symbol>)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4975(para)
msgid "The descriptor specified was not found. The statement you are trying to use has not been prepared. (SQLSTATE 33000)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4983(term)
msgid "-241 (<symbol>ECPG_INVALID_DESCRIPTOR_INDEX</symbol>)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4985(para)
msgid "The descriptor index specified was out of range. (SQLSTATE 07009)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4993(term)
msgid "-242 (<symbol>ECPG_UNKNOWN_DESCRIPTOR_ITEM</symbol>)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4995(para)
msgid "An invalid descriptor item was requested. (This is an internal error.) (SQLSTATE YE002)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5003(term)
msgid "-243 (<symbol>ECPG_VAR_NOT_NUMERIC</symbol>)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5005(para)
msgid "During the execution of a dynamic statement, the database returned a numeric value and the host variable was not numeric. (SQLSTATE 07006)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5014(term)
msgid "-244 (<symbol>ECPG_VAR_NOT_CHAR</symbol>)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5016(para)
msgid "During the execution of a dynamic statement, the database returned a non-numeric value and the host variable was numeric. (SQLSTATE 07006)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5025(term)
msgid "-400 (<symbol>ECPG_PGSQL</symbol>)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5027(para)
msgid "Some error caused by the <productname>PostgreSQL</productname> server. The message contains the error message from the <productname>PostgreSQL</productname> server."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5036(term)
msgid "-401 (<symbol>ECPG_TRANS</symbol>)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5038(para)
msgid "The <productname>PostgreSQL</productname> server signaled that we cannot start, commit, or rollback the transaction. (SQLSTATE 08007)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5047(term)
msgid "-402 (<symbol>ECPG_CONNECT</symbol>)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5049(para)
msgid "The connection attempt to the database did not succeed. (SQLSTATE 08001)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5057(term)
msgid "100 (<symbol>ECPG_NOT_FOUND</symbol>)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5059(para)
msgid "This is a harmless condition indicating that the last command retrieved or processed zero rows, or that you are at the end of the cursor. (SQLSTATE 02000)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:4793(para)
msgid "These are the assigned <literal>SQLCODE</literal> values: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5072(title)
msgid "Preprocessor directives"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5075(title)
msgid "Including files"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5079(programlisting)
#, no-wrap
msgid "\nEXEC SQL INCLUDE <replaceable>filename</replaceable>;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5077(para)
msgid "To include an external file into your embedded SQL program, use: <placeholder-1/> The embedded SQL preprocessor will look for a file named <literal><replaceable>filename</replaceable>.h</literal>, preprocess it, and include it in the resulting C output. Thus, embedded SQL statements in the included file are handled correctly."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5090(programlisting)
#, no-wrap
msgid "\n#include &lt;<replaceable>filename</replaceable>.h&gt;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5088(para)
msgid "Note that this is <emphasis>not</emphasis> the same as: <placeholder-1/> because this file would not be subject to SQL command preprocessing. Naturally, you can continue to use the C <literal>#include</literal> directive to include other header files."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5100(para)
msgid "The include file name is case-sensitive, even though the rest of the <literal>EXEC SQL INCLUDE</literal> command follows the normal SQL case-sensitivity rules."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5109(title)
msgid "The #define and #undef directives"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5113(programlisting)
#, no-wrap
msgid "\nEXEC SQL DEFINE <replaceable>name</replaceable>;\nEXEC SQL DEFINE <replaceable>name</replaceable> <replaceable>value</replaceable>;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5118(programlisting)
#, no-wrap
msgid "\nEXEC SQL DEFINE HAVE_FEATURE;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5122(programlisting)
#, no-wrap
msgid "\nEXEC SQL DEFINE MYNUMBER 12;\nEXEC SQL DEFINE MYSTRING 'abc';\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5127(programlisting)
#, no-wrap
msgid "\nEXEC SQL UNDEF MYNUMBER;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5110(para)
msgid "Similar to the directive <literal>#define</literal> that is known from C, embedded SQL has a similar concept: <placeholder-1/> So you can define a name: <placeholder-2/> And you can also define constants: <placeholder-3/> Use <literal>undef</literal> to remove a previous definition: <placeholder-4/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5138(programlisting)
#, no-wrap
msgid "\nEXEC SQL DEFINE MYNUMBER 12;\n...\nEXEC SQL UPDATE Tbl SET col = MYNUMBER;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5132(para)
msgid "Of course you can continue to use the C versions <literal>#define</literal> and <literal>#undef</literal> in your embedded SQL program. The difference is where your defined values get evaluated. If you use <literal>EXEC SQL DEFINE</literal> then the <command>ecpg</command> preprocessor evaluates the defines and substitutes the values. For example if you write: <placeholder-1/> then <command>ecpg</command> will already do the substitution and your C compiler will never see any name or identifier <literal>MYNUMBER</literal>. Note that you cannot use <literal>#define</literal> for a constant that you are going to use in an embedded SQL query because in this case the embedded SQL precompiler is not able to see this declaration."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5152(title)
msgid "ifdef, ifndef, else, elif, and endif directives"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5158(literal)
msgid "EXEC SQL ifdef <placeholder-1/>;"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5160(para)
msgid "Checks a <replaceable>name</replaceable> and processes subsequent lines if <replaceable>name</replaceable> has been created with <literal>EXEC SQL define <replaceable>name</replaceable></literal>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5169(literal)
msgid "EXEC SQL ifndef <placeholder-1/>;"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5171(para)
msgid "Checks a <replaceable>name</replaceable> and processes subsequent lines if <replaceable>name</replaceable> has <emphasis>not</emphasis> been created with <literal>EXEC SQL define <replaceable>name</replaceable></literal>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5180(literal)
msgid "EXEC SQL else;"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5182(para)
msgid "Starts processing an alternative section to a section introduced by either <literal>EXEC SQL ifdef <replaceable>name</replaceable></literal> or <literal>EXEC SQL ifndef <replaceable>name</replaceable></literal>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5191(literal)
msgid "EXEC SQL elif <placeholder-1/>;"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5193(para)
msgid "Checks <replaceable>name</replaceable> and starts an alternative section if <replaceable>name</replaceable> has been created with <literal>EXEC SQL define <replaceable>name</replaceable></literal>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5202(literal)
msgid "EXEC SQL endif;"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5204(para)
msgid "Ends an alternative section."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5153(para)
msgid "You can use the following directives to compile code sections conditionally: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5214(programlisting)
#, no-wrap
msgid "\nEXEC SQL ifndef TZVAR;\nEXEC SQL SET TIMEZONE TO 'GMT';\nEXEC SQL elif TZNAME;\nEXEC SQL SET TIMEZONE TO TZNAME;\nEXEC SQL else;\nEXEC SQL SET TIMEZONE TO TZVAR;\nEXEC SQL endif;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5212(para)
msgid "Example: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5229(title)
msgid "Processing Embedded SQL Programs"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5231(para)
msgid "Now that you have an idea how to form embedded SQL C programs, you probably want to know how to compile them. Before compiling you run the file through the embedded <acronym>SQL</acronym><acronym>C</acronym> preprocessor, which converts the <acronym>SQL</acronym> statements you used to special function calls. After compiling, you must link with a special library that contains the needed functions. These functions fetch information from the arguments, perform the <acronym>SQL</acronym> command using the <application>libpq</application> interface, and put the result in the arguments specified for output."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5251(programlisting)
#, no-wrap
msgid "\necpg prog1.pgc\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5244(para)
msgid "The preprocessor program is called <filename>ecpg</filename> and is included in a normal <productname>PostgreSQL</productname> installation. Embedded SQL programs are typically named with an extension <filename>.pgc</filename>. If you have a program file called <filename>prog1.pgc</filename>, you can preprocess it by simply calling: <placeholder-1/> This will create a file called <filename>prog1.c</filename>. If your input files do not follow the suggested naming pattern, you can specify the output file explicitly using the <option>-o</option> option."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5262(programlisting)
#, no-wrap
msgid "\ncc -c prog1.c\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5260(para)
msgid "The preprocessed file can be compiled normally, for example: <placeholder-1/> The generated C source files include header files from the <productname>PostgreSQL</productname> installation, so if you installed <productname>PostgreSQL</productname> in a location that is not searched by default, you have to add an option such as <literal>-I/usr/local/pgsql/include</literal> to the compilation command line."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5276(programlisting)
#, no-wrap
msgid "\ncc -o myprog prog1.o prog2.o ... -lecpg\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5273(para)
msgid "To link an embedded SQL program, you need to include the <filename>libecpg</filename> library, like so: <placeholder-1/> Again, you might have to add an option like <literal>-L/usr/local/pgsql/lib</literal> to that command line."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5287(programlisting)
#, no-wrap
msgid "\nECPG = ecpg\n\n%.c: %.pgc\n        $(ECPG) $&lt;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5283(para)
msgid "If you manage the build process of a larger project using <application>make</application>, it might be convenient to include the following implicit rule to your makefiles: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5295(para)
msgid "The complete syntax of the <command>ecpg</command> command is detailed in <xref linkend=\"app-ecpg\"/>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5300(para)
msgid "The <application>ecpg</application> library is thread-safe by default. However, you might need to use some threading command-line options to compile your client code."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5308(title)
msgid "Library Functions"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5310(para)
msgid "The <filename>libecpg</filename> library primarily contains <quote>hidden</quote> functions that are used to implement the functionality expressed by the embedded SQL commands. But there are some functions that can usefully be called directly. Note that this makes your code unportable."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5320(para)
msgid "<function>ECPGdebug(int <replaceable>on</replaceable>, FILE *<replaceable>stream</replaceable>)</function> turns on debug logging if called with the first argument non-zero. Debug logging is done on <replaceable>stream</replaceable>. The log contains all <acronym>SQL</acronym> statements with all the input variables inserted, and the results from the <productname>PostgreSQL</productname> server. This can be very useful when searching for errors in your <acronym>SQL</acronym> statements."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5332(para)
msgid "On Windows, if the <application>ecpg</application> libraries and an application are compiled with different flags, this function call will crash the application because the internal representation of the <literal>FILE</literal> pointers differ. Specifically, multithreaded/single-threaded, release/debug, and static/dynamic flags should be the same for the library and all applications using that library."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5345(para)
msgid "<function>ECPGget_PGconn(const char *<replaceable>connection_name</replaceable>) </function> returns the library database connection handle identified by the given name. If <replaceable>connection_name</replaceable> is set to <literal>NULL</literal>, the current connection handle is returned. If no connection handle can be identified, the function returns <literal>NULL</literal>. The returned connection handle can be used to call any other functions from <application>libpq</application>, if necessary."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5354(para)
msgid "It is a bad idea to manipulate database connection handles made from <application>ecpg</application> directly with <application>libpq</application> routines."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5362(para)
msgid "<function>ECPGtransactionStatus(const char *<replaceable>connection_name</replaceable>)</function> returns the current transaction status of the given connection identified by <replaceable>connection_name</replaceable>. See <xref linkend=\"libpq-status\"/> and libpq's <function>PQtransactionStatus()</function> for details about the returned status codes."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5370(para)
msgid "<function>ECPGstatus(int <replaceable>lineno</replaceable>, const char* <replaceable>connection_name</replaceable>)</function> returns true if you are connected to a database and false if not. <replaceable>connection_name</replaceable> can be <literal>NULL</literal> if a single connection is being used."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5382(title)
msgid "Internals"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5384(para)
msgid "This section explains how <application>ECPG</application> works internally. This information can occasionally be useful to help users understand how to use <application>ECPG</application>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5390(para)
msgid "The first four lines written by <command>ecpg</command> to the output are fixed lines. Two are comments and two are include lines necessary to interface to the library. Then the preprocessor reads through the file and writes output. Normally it just echoes everything to the output."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5398(para)
msgid "When it sees an <command>EXEC SQL</command> statement, it intervenes and changes it. The command starts with <command>EXEC SQL</command> and ends with <command>;</command>. Everything in between is treated as an <acronym>SQL</acronym> statement and parsed for variable substitution."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5406(para)
msgid "Variable substitution occurs when a symbol starts with a colon (<literal>:</literal>). The variable with that name is looked up among the variables that were previously declared within a <literal>EXEC SQL DECLARE</literal> section."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5413(para)
msgid "The most important function in the library is <function>ECPGdo</function>, which takes care of executing most commands. It takes a variable number of arguments. This can easily add up to 50 or so arguments, and we hope this will not be a problem on any platform."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5426(term)
msgid "A line number"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5428(para)
msgid "This is the line number of the original line; used in error messages only."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5436(term)
msgid "A string"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5438(para)
msgid "This is the <acronym>SQL</acronym> command that is to be issued. It is modified by the input variables, i.e., the variables that where not known at compile time but are to be entered in the command. Where the variables should go the string contains <literal>?</literal>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5449(term)
msgid "Input variables"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5451(para)
msgid "Every input variable causes ten arguments to be created. (See below.)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5458(parameter)
msgid "ECPGt_EOIT"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5460(para)
msgid "An <type>enum</type> telling that there are no more input variables."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5468(term)
msgid "Output variables"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5470(para)
msgid "Every output variable causes ten arguments to be created. (See below.) These variables are filled by the function."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5478(parameter)
msgid "ECPGt_EORT"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5480(para)
msgid "An <type>enum</type> telling that there are no more variables."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5421(para)
msgid "The arguments are: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5494(para)
msgid "The type as a special symbol."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5500(para)
msgid "A pointer to the value or a pointer to the pointer."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5506(para)
msgid "The size of the variable if it is a <type>char</type> or <type>varchar</type>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5512(para)
msgid "The number of elements in the array (for array fetches)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5518(para)
msgid "The offset to the next element in the array (for array fetches)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5524(para)
msgid "The type of the indicator variable as a special symbol."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5530(para)
msgid "A pointer to the indicator variable."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5536(para)
msgid "0"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5542(para)
msgid "The number of elements in the indicator array (for array fetches)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5548(para)
msgid "The offset to the next element in the indicator array (for array fetches)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5488(para)
msgid "For every variable that is part of the <acronym>SQL</acronym> command, the function gets ten arguments: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5559(programlisting)
#, no-wrap
msgid "\nEXEC SQL OPEN <replaceable>cursor</replaceable>;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5556(para)
msgid "Note that not all SQL commands are treated in this way. For instance, an open cursor statement like: <placeholder-1/> is not copied to the output. Instead, the cursor's <command>DECLARE</command> command is used at the position of the <command>OPEN</command> command because it indeed opens the cursor."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5571(programlisting)
#, no-wrap
msgid "\nEXEC SQL BEGIN DECLARE SECTION;\nint index;\nint result;\nEXEC SQL END DECLARE SECTION;\n...\nEXEC SQL SELECT res INTO :result FROM mytable WHERE index = :index;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:5567(para)
msgid "Here is a complete example describing the output of the preprocessor of a file <filename>foo.pgc</filename> (details might change with each particular version of the preprocessor): <placeholder-1/> is translated into: <placeholder-2/> (The indentation here is added for readability and not something the preprocessor does.)"
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ecpg.xml:0(None)
msgid "translator-credits"
msgstr ""

