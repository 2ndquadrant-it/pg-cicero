msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2011-09-12 06:58+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: /tmp/cicero-YDWB/ecpg.xml:5(title) 
msgid "<application>ECPG</application> - Embedded <acronym>SQL</acronym> in C"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7(primary) 
msgid "embedded SQL"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7(secondary) 
msgid "in C"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8(primary) 
msgid "C"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9(primary) 
msgid "ECPG"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:11(para) 
msgid "This chapter describes the embedded <acronym>SQL</acronym> package for <productname>PostgreSQL</productname>. It was written by Linus Tolke (<email>linus@epact.se</email>) and Michael Meskes (<email>meskes@postgresql.org</email>). Originally it was written to work with <acronym>C</acronym>. It also works with <acronym>C++</acronym>, but it does not recognize all <acronym>C++</acronym> constructs yet."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:20(para) 
msgid "This documentation is quite incomplete. But since this interface is standardized, additional information can be found in many resources about SQL."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:27(title) 
msgid "The Concept"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:29(para) 
msgid "An embedded SQL program consists of code written in an ordinary programming language, in this case C, mixed with SQL commands in specially marked sections. To build the program, the source code (<filename>*.pgc</filename>) is first passed through the embedded SQL preprocessor, which converts it to an ordinary C program (<filename>*.c</filename>), and afterwards it can be processed by a C compiler. (For details about the compiling and linking see <xref linkend=\"ecpg-process\"/>). Converted ECPG applications call functions in the libpq library through the embedded SQL library (ecpglib), and communicate with the PostgreSQL server using the normal frontend-backend protocol."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:41(para) 
msgid "Embedded <acronym>SQL</acronym> has advantages over other methods for handling <acronym>SQL</acronym> commands from C code. First, it takes care of the tedious passing of information to and from variables in your <acronym>C</acronym> program. Second, the SQL code in the program is checked at build time for syntactical correctness. Third, embedded <acronym>SQL</acronym> in C is specified in the <acronym>SQL</acronym> standard and supported by many other <acronym>SQL</acronym> database systems. The <productname>PostgreSQL</productname> implementation is designed to match this standard as much as possible, and it is usually possible to port embedded <acronym>SQL</acronym> programs written for other SQL databases to <productname>PostgreSQL</productname> with relative ease."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:62(programlisting) 
#, no-wrap
msgid "\nEXEC SQL ...;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:57(para) 
msgid "As already stated, programs written for the embedded <acronym>SQL</acronym> interface are normal C programs with special code inserted to perform database-related actions. This special code always has the form: <placeholder-1/> These statements syntactically take the place of a C statement. Depending on the particular statement, they can appear at the global level or within a function. Embedded <acronym>SQL</acronym> statements follow the case-sensitivity rules of normal <acronym>SQL</acronym> code, and not those of C."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:72(para) 
msgid "The following sections explain all the embedded SQL statements."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:78(title) 
msgid "Managing Database Connections"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:80(para) 
msgid "This section describes how to open, close, and switch database connections."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:86(title) 
msgid "Connecting to the Database Server"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:90(programlisting) 
#, no-wrap
msgid "\nEXEC SQL CONNECT TO <replaceable>target</replaceable> <optional>AS <replaceable>connection-name</replaceable></optional> <optional>USER <replaceable>user-name</replaceable></optional>;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:99(replaceable) /tmp/cicero-YDWB/ecpg.xml:105(replaceable) /tmp/cicero-YDWB/ecpg.xml:111(replaceable) 
msgid "dbname"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:99(replaceable) /tmp/cicero-YDWB/ecpg.xml:105(replaceable) /tmp/cicero-YDWB/ecpg.xml:111(replaceable) 
msgid "hostname"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:99(optional) 
msgid "@<placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:99(replaceable) /tmp/cicero-YDWB/ecpg.xml:105(replaceable) /tmp/cicero-YDWB/ecpg.xml:111(replaceable) 
msgid "port"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:99(optional) /tmp/cicero-YDWB/ecpg.xml:105(optional) /tmp/cicero-YDWB/ecpg.xml:111(optional) 
msgid ":<placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:105(optional) /tmp/cicero-YDWB/ecpg.xml:111(optional) 
msgid "/<placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:105(replaceable) /tmp/cicero-YDWB/ecpg.xml:111(replaceable) 
msgid "options"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:105(optional) /tmp/cicero-YDWB/ecpg.xml:111(optional) 
msgid "?<placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:105(literal) 
msgid "tcp:postgresql://<placeholder-1/><placeholder-2/><placeholder-3/><placeholder-4/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:111(literal) 
msgid "unix:postgresql://<placeholder-1/><placeholder-2/><placeholder-3/><placeholder-4/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:116(simpara) 
msgid "an SQL string literal containing one of the above forms"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:122(simpara) 
msgid "a reference to a character variable containing one of the above forms (see examples)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:129(literal) /tmp/cicero-YDWB/ecpg.xml:317(literal) /tmp/cicero-YDWB/ecpg.xml:6381(literal) /tmp/cicero-YDWB/ecpg.xml:6796(literal) /tmp/cicero-YDWB/ecpg.xml:7347(literal) 
msgid "DEFAULT"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:88(para) 
msgid "One connects to a database using the following statement: <placeholder-1/> The <replaceable>target</replaceable> can be specified in the following ways: <placeholder-2/> If you specify the connection target literally (that is, not through a variable reference) and you don't quote the value, then the case-insensitivity rules of normal SQL are applied. In that case you can also double-quote the individual parameters separately as needed. In practice, it is probably less error-prone to use a (single-quoted) string literal or a variable reference. The connection target <literal>DEFAULT</literal> initiates a connection to the default database under the default user name. No separate user name or connection name can be specified in that case."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:151(replaceable) /tmp/cicero-YDWB/ecpg.xml:157(replaceable) /tmp/cicero-YDWB/ecpg.xml:163(replaceable) /tmp/cicero-YDWB/ecpg.xml:169(replaceable) 
msgid "username"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:157(replaceable) /tmp/cicero-YDWB/ecpg.xml:163(replaceable) /tmp/cicero-YDWB/ecpg.xml:169(replaceable) 
msgid "password"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:157(literal) 
msgid "<placeholder-1/>/<placeholder-2/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:163(literal) 
msgid "<placeholder-1/> IDENTIFIED BY <placeholder-2/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:169(literal) 
msgid "<placeholder-1/> USING <placeholder-2/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:145(para) 
msgid "There are also different ways to specify the user name: <placeholder-1/> As above, the parameters <replaceable>username</replaceable> and <replaceable>password</replaceable> can be an SQL identifier, an SQL string literal, or a reference to a character variable."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:179(para) 
msgid "The <replaceable>connection-name</replaceable> is used to handle multiple connections in one program. It can be omitted if a program uses only one connection. The most recently opened connection becomes the current connection, which is used by default when an SQL statement is to be executed (see later in this chapter)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:190(programlisting) 
#, no-wrap
msgid "\nEXEC SQL CONNECT TO mydb@sql.mydomain.com;\n\nEXEC SQL CONNECT TO unix:postgresql://sql.mydomain.com/mydb AS myconnection USER john;\n\nEXEC SQL BEGIN DECLARE SECTION;\nconst char *target = \"mydb@sql.mydomain.com\";\nconst char *user = \"john\";\nEXEC SQL END DECLARE SECTION;\n ...\nEXEC SQL CONNECT TO :target USER :user;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:188(para) 
msgid "Here are some examples of <command>CONNECT</command> statements: <placeholder-1/> The last form makes use of the variant referred to above as character variable reference. You will see in later sections how C variables can be used in SQL statements when you prefix them with a colon."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:208(para) 
msgid "Be advised that the format of the connection target is not specified in the SQL standard. So if you want to develop portable applications, you might want to use something based on the last example above to encapsulate the connection target string somewhere."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:218(title) 
msgid "Choosing a Connection"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:220(para) 
msgid "SQL statements in embedded SQL programs are by default executed on the current connection, that is, the most recently opened one. If an application needs to manage multiple connections, then there are two ways to handle this."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:230(programlisting) 
#, no-wrap
msgid "\nEXEC SQL AT <replaceable>connection-name</replaceable> SELECT ...;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:227(para) 
msgid "The first option is to explicitly choose a connection for each SQL statement, for example: <placeholder-1/> This option is particularly suitable if the application needs to use several connections in mixed order."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:237(para) 
msgid "If your application uses multiple threads of execution, they cannot share a connection concurrently. You must either explicitly control access to the connection (using mutexes) or use a connection for each thread. If each thread uses its own connection, you will need to use the AT clause to specify which connection the thread will use."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:247(programlisting) 
#, no-wrap
msgid "\nEXEC SQL SET CONNECTION <replaceable>connection-name</replaceable>;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:244(para) 
msgid "The second option is to execute a statement to switch the current connection. That statement is: <placeholder-1/> This option is particularly convenient if many statements are to be executed on the same connection. It is not thread-aware."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:254(para) 
msgid "Here is an example program managing multiple database connections: <placeholder-1/> This example would produce this output: <screen>\ncurrent=testdb3 (should be testdb3)\ncurrent=testdb2 (should be testdb2)\ncurrent=testdb1 (should be testdb1)\n</screen>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:298(title) 
msgid "Closing a Connection"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:302(programlisting) 
#, no-wrap
msgid "\nEXEC SQL DISCONNECT <optional><replaceable>connection</replaceable></optional>;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:311(replaceable) 
msgid "connection-name"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:323(literal) /tmp/cicero-YDWB/ecpg.xml:6783(literal) 
msgid "CURRENT"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:329(literal) /tmp/cicero-YDWB/ecpg.xml:6805(literal) 
msgid "ALL"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:300(para) 
msgid "To close a connection, use the following statement: <placeholder-1/> The <replaceable>connection</replaceable> can be specified in the following ways: <placeholder-2/> If no connection name is specified, the current connection is closed."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:338(para) 
msgid "It is good style that an application always explicitly disconnect from every connection it opened."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:347(title) 
msgid "Running SQL Commands"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:349(para) 
msgid "Any SQL command can be run from within an embedded SQL application. Below are some examples of how to do that."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:355(title) 
msgid "Executing SQL Statements"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:359(programlisting) 
#, no-wrap
msgid "\nEXEC SQL CREATE TABLE foo (number integer, ascii char(16));\nEXEC SQL CREATE UNIQUE INDEX num1 ON foo(number);\nEXEC SQL COMMIT;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:357(para) 
msgid "Creating a table: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:368(programlisting) 
#, no-wrap
msgid "\nEXEC SQL INSERT INTO foo (number, ascii) VALUES (9999, 'doodad');\nEXEC SQL COMMIT;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:366(para) 
msgid "Inserting rows: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:376(programlisting) 
#, no-wrap
msgid "\nEXEC SQL DELETE FROM foo WHERE number = 9999;\nEXEC SQL COMMIT;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:374(para) 
msgid "Deleting rows: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:384(programlisting) 
#, no-wrap
msgid "\nEXEC SQL UPDATE foo\n    SET ascii = 'foobar'\n    WHERE number = 9999;\nEXEC SQL COMMIT;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:382(para) 
msgid "Updates: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:392(para) 
msgid "<literal>SELECT</literal> statements that return a single result row can also be executed using <literal>EXEC SQL</literal> directly. To handle result sets with multiple rows, an application has to use a cursor; see <xref linkend=\"ecpg-cursors\"/> below. (As a special case, an application can fetch multiple rows at once into an array host variable; see <xref linkend=\"ecpg-variables-arrays\"/>.)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:404(programlisting) 
#, no-wrap
msgid "\nEXEC SQL SELECT foo INTO :FooBar FROM table1 WHERE ascii = 'doodad';\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:402(para) 
msgid "Single-row select: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:412(programlisting) 
#, no-wrap
msgid "\nEXEC SQL SHOW search_path INTO :var;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:409(para) 
msgid "Also, a configuration parameter can be retrieved with the <literal>SHOW</literal> command: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:417(para) 
msgid "The tokens of the form <literal>:<replaceable>something</replaceable></literal> are <firstterm>host variables</firstterm>, that is, they refer to variables in the C program. They are explained in <xref linkend=\"ecpg-variables\"/>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:427(title) 
msgid "Using Cursors"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:429(para) 
msgid "To retrieve a result set holding multiple rows, an application has to declare a cursor and fetch each row from the cursor. The steps to use a cursor are the following: declare a cursor, open it, fetch a row from the cursor, repeat, and finally close it."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:438(programlisting) 
#, no-wrap
msgid "\nEXEC SQL DECLARE foo_bar CURSOR FOR\n    SELECT number, ascii FROM foo\n    ORDER BY ascii;\nEXEC SQL OPEN foo_bar;\nEXEC SQL FETCH foo_bar INTO :FooBar, DooDad;\n...\nEXEC SQL CLOSE foo_bar;\nEXEC SQL COMMIT;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:436(para) 
msgid "Select using cursors: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:450(para) 
msgid "For more details about declaration of the cursor, see <xref linkend=\"ecpg-sql-declare\"/>, and see <xref linkend=\"sql-fetch\"/> for <literal>FETCH</literal> command details."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:458(para) 
msgid "The ECPG <command>DECLARE</command> command does not actually cause a statement to be sent to the PostgreSQL backend. The cursor is opened in the backend (using the backend's <command>DECLARE</command> command) at the point when the <command>OPEN</command> command is executed."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:469(title) 
msgid "Managing Transactions"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:471(para) 
msgid "In the default mode, statements are committed only when <command>EXEC SQL COMMIT</command> is issued. The embedded SQL interface also supports autocommit of transactions (similar to <application>libpq</application> behavior) via the <option>-t</option> command-line option to <command>ecpg</command> (see <xref linkend=\"app-ecpg\"/>) or via the <literal>EXEC SQL SET AUTOCOMMIT TO ON</literal> statement. In autocommit mode, each command is automatically committed unless it is inside an explicit transaction block. This mode can be explicitly turned off using <literal>EXEC SQL SET AUTOCOMMIT TO OFF</literal>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:489(literal) 
msgid "EXEC SQL COMMIT"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:491(para) 
msgid "Commit an in-progress transaction."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:498(literal) 
msgid "EXEC SQL ROLLBACK"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:500(para) 
msgid "Roll back an in-progress transaction."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:507(literal) 
msgid "EXEC SQL SET AUTOCOMMIT TO ON"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:509(para) 
msgid "Enable autocommit mode."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:516(literal) 
msgid "SET AUTOCOMMIT TO OFF"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:518(para) 
msgid "Disable autocommit mode. This is the default."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:484(para) 
msgid "The following transaction management commands are available: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:528(title) 
msgid "Prepared Statements"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:530(para) 
msgid "When the values to be passed to an SQL statement are not known at compile time, or the same statement is going to be used many times, then prepared statements can be useful."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:541(programlisting) 
#, no-wrap
msgid "\nEXEC SQL PREPARE stmt1 FROM \"SELECT oid, datname FROM pg_database WHERE oid = ?\";\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:536(para) 
msgid "The statement is prepared using the command <literal>PREPARE</literal>. For the values that are not known yet, use the placeholder <quote><literal>?</literal></quote>: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:552(programlisting) 
#, no-wrap
msgid "\nEXEC SQL EXECUTE stmt1 INTO :dboid, :dbname USING 1;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:546(para) 
msgid "If a statement returns a single row, the application can call <literal>EXECUTE</literal> after <literal>PREPARE</literal> to execute the statement, supplying the actual values for the placeholders with a <literal>USING</literal> clause: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:562(programlisting) 
#, no-wrap
msgid "\nEXEC SQL PREPARE stmt1 FROM \"SELECT oid,datname FROM pg_database WHERE oid &gt; ?\";\nEXEC SQL DECLARE foo_bar CURSOR FOR stmt1;\n\n/* when end of result set reached, break out of while loop */\nEXEC SQL WHENEVER NOT FOUND DO BREAK;\n\nEXEC SQL OPEN foo_bar USING 100;\n...\nwhile (1)\n{\n    EXEC SQL FETCH NEXT FROM foo_bar INTO :dboid, :dbname;\n    ...\n}\nEXEC SQL CLOSE foo_bar;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:557(para) 
msgid "If a statement returns multiple rows, the application can use a cursor declared based on the prepared statement. To bind input parameters, the cursor must be opened with a <literal>USING</literal> clause: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:583(programlisting) /tmp/cicero-YDWB/ecpg.xml:1826(programlisting) 
#, no-wrap
msgid "\nEXEC SQL DEALLOCATE PREPARE <replaceable>name</replaceable>;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:580(para) /tmp/cicero-YDWB/ecpg.xml:1823(para) 
msgid "When you don't need the prepared statement anymore, you should deallocate it: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:588(para) 
msgid "For more details about <literal>PREPARE</literal>, see <xref linkend=\"ecpg-sql-prepare\"/>. Also see <xref linkend=\"ecpg-dynamic\"/> for more details about using placeholders and input parameters."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:598(title) 
msgid "Using Host Variables"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:600(para) 
msgid "In <xref linkend=\"ecpg-commands\"/> you saw how you can execute SQL statements from an embedded SQL program. Some of those statements only used fixed values and did not provide a way to insert user-supplied values into statements or have the program process the values returned by the query. Those kinds of statements are not really useful in real applications. This section explains in detail how you can pass data between your C program and the embedded SQL statements using a simple mechanism called <firstterm>host variables</firstterm>. In an embedded SQL program we consider the SQL statements to be <firstterm>guests</firstterm> in the C program code which is the <firstterm>host language</firstterm>. Therefore the variables of the C program are called <firstterm>host variables</firstterm>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:616(para) 
msgid "Another way to exchange values between PostgreSQL backends and ECPG applications is the use of SQL descriptors, described in <xref linkend=\"ecpg-descriptors\"/>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:623(title) 
msgid "Overview"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:632(programlisting) 
#, no-wrap
msgid "\nEXEC SQL INSERT INTO sometable VALUES (:v1, 'foo', :v2);\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:625(para) 
msgid "Passing data between the C program and the SQL statements is particularly simple in embedded SQL. Instead of having the program paste the data into the statement, which entails various complications, such as properly quoting the value, you can simply write the name of a C variable into the SQL statement, prefixed by a colon. For example: <placeholder-1/> This statements refers to two C variables named <varname>v1</varname> and <varname>v2</varname> and also uses a regular SQL string literal, to illustrate that you are not restricted to use one kind of data or the other."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:641(para) 
msgid "This style of inserting C variables in SQL statements works anywhere a value expression is expected in an SQL statement."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:648(title) 
msgid "Declare Sections"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:650(para) 
msgid "To pass data from the program to the database, for example as parameters in a query, or to pass data from the database back to the program, the C variables that are intended to contain this data need to be declared in specially marked sections, so the embedded SQL preprocessor is made aware of them."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:660(programlisting) 
#, no-wrap
msgid "\nEXEC SQL BEGIN DECLARE SECTION;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:664(programlisting) 
#, no-wrap
msgid "\nEXEC SQL END DECLARE SECTION;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:669(programlisting) 
#, no-wrap
msgid "\nint   x = 4;\nchar  foo[16], bar[16];\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:678(programlisting) 
#, no-wrap
msgid "\nEXEC SQL int i = 4;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:658(para) 
msgid "This section starts with: <placeholder-1/> and ends with: <placeholder-2/> Between those lines, there must be normal C variable declarations, such as: <placeholder-3/> As you can see, you can optionally assign an initial value to the variable. The variable's scope is determined by the location of its declaring section within the program. You can also declare variables with the following syntax which implicitly creates a declare section: <placeholder-4/> You can have as many declare sections in a program as you like."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:684(para) 
msgid "The declarations are also echoed to the output file as normal C variables, so there's no need to declare them again. Variables that are not intended to be used in SQL commands can be declared normally outside these special sections."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:691(para) 
msgid "The definition of a structure or union also must be listed inside a <literal>DECLARE</literal> section. Otherwise the preprocessor cannot handle these types since it does not know the definition."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:699(title) 
msgid "Retrieving Query Results"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:701(para) 
msgid "Now you should be able to pass data generated by your program into an SQL command. But how do you retrieve the results of a query? For that purpose, embedded SQL provides special variants of the usual commands <command>SELECT</command> and <command>FETCH</command>. These commands have a special <literal>INTO</literal> clause that specifies which host variables the retrieved values are to be stored in. <command>SELECT</command> is used for a query that returns only single row, and <command>FETCH</command> is used for a query that returns multiple rows, using a cursor."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:716(programlisting) 
#, no-wrap
msgid "\n/*\n * assume this table:\n * CREATE TABLE test1 (a int, b varchar(50));\n */\n\nEXEC SQL BEGIN DECLARE SECTION;\nint v1;\nVARCHAR v2;\nEXEC SQL END DECLARE SECTION;\n\n ...\n\nEXEC SQL SELECT a, b INTO :v1, :v2 FROM test;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:714(para) 
msgid "Here is an example: <placeholder-1/> So the <literal>INTO</literal> clause appears between the select list and the <literal>FROM</literal> clause. The number of elements in the select list and the list after <literal>INTO</literal> (also called the target list) must be equal."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:740(programlisting) 
#, no-wrap
msgid "\nEXEC SQL BEGIN DECLARE SECTION;\nint v1;\nVARCHAR v2;\nEXEC SQL END DECLARE SECTION;\n\n ...\n\nEXEC SQL DECLARE foo CURSOR FOR SELECT a, b FROM test;\n\n ...\n\ndo\n{\n    ...\n    EXEC SQL FETCH NEXT FROM foo INTO :v1, :v2;\n    ...\n} while (...);\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:738(para) 
msgid "Here is an example using the command <command>FETCH</command>: <placeholder-1/> Here the <literal>INTO</literal> clause appears after all the normal clauses."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:763(para) 
msgid "Both of these methods only allow retrieving one row at a time. If you need to process result sets that potentially contain more than one row, you need to use a cursor, as shown in the second example."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:771(title) 
msgid "Type Mapping"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:773(para) 
msgid "When ECPG applications exchange values between the PostgreSQL server and the C application, such as when retrieving query results from the server or executing SQL statements with input parameters, the values need to be converted between PostgreSQL data types and host language variable types (C language data types, concretely). One of the main points of ECPG is that it takes care of this automatically in most cases."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:783(para) 
msgid "In this respect, there are two kinds of data types: Some simple PostgreSQL data types, such as <type>integer</type> and <type>text</type>, can be read and written by the application directly. Other PostgreSQL data types, such as <type>timestamp</type> and <type>numeric</type> can only be accessed through special library functions; see <xref linkend=\"ecpg-special-types\"/>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:793(para) 
msgid "<xref linkend=\"ecpg-datatype-hostvars-table\"/> shows which PostgreSQL data types correspond to which C data types. When you wish to send or receive a value of a given PostgreSQL data type, you should declare a C variable of the corresponding C data type in the declare section."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:802(title) 
msgid "Mapping Between PostgreSQL Data Types and C Variable Types"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:806(entry) 
msgid "PostgreSQL data type"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:807(entry) 
msgid "Host variable type"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:813(type) 
msgid "smallint"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:814(type) /tmp/cicero-YDWB/ecpg.xml:849(type) 
msgid "short"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:818(type) 
msgid "integer"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:819(type) /tmp/cicero-YDWB/ecpg.xml:854(type) 
msgid "int"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:823(type) 
msgid "bigint"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:824(type) /tmp/cicero-YDWB/ecpg.xml:859(type) 
msgid "long long int"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:828(type) /tmp/cicero-YDWB/ecpg.xml:829(type) 
msgid "decimal"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:829(para) 
msgid "This type can only be accessed through special library functions; see <xref linkend=\"ecpg-special-types\"/>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:833(type) /tmp/cicero-YDWB/ecpg.xml:834(type) 
msgid "numeric"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:838(type) 
msgid "real"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:839(type) 
msgid "float"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:843(type) 
msgid "double precision"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:844(type) 
msgid "double"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:848(type) 
msgid "smallserial"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:853(type) 
msgid "serial"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:858(type) 
msgid "bigserial"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:863(type) 
msgid "oid"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:864(type) 
msgid "unsigned int"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:868(replaceable) /tmp/cicero-YDWB/ecpg.xml:868(replaceable) /tmp/cicero-YDWB/ecpg.xml:869(replaceable) /tmp/cicero-YDWB/ecpg.xml:869(replaceable) 
msgid "n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:868(type) 
msgid "character(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:868(type) 
msgid "varchar(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:868(type) 
msgid "text"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:868(entry) 
msgid "<placeholder-1/>, <placeholder-2/>, <placeholder-3/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:869(type) 
msgid "char[<placeholder-1/>+1]"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:869(type) 
msgid "VARCHAR[<placeholder-1/>+1]"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:869(para) 
msgid "declared in <filename>ecpglib.h</filename>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:869(entry) 
msgid "<placeholder-1/>, <placeholder-2/><placeholder-3/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:873(type) /tmp/cicero-YDWB/ecpg.xml:4746(replaceable) /tmp/cicero-YDWB/ecpg.xml:4747(replaceable) /tmp/cicero-YDWB/ecpg.xml:5563(replaceable) /tmp/cicero-YDWB/ecpg.xml:5574(replaceable) /tmp/cicero-YDWB/ecpg.xml:5596(replaceable) /tmp/cicero-YDWB/ecpg.xml:6197(replaceable) /tmp/cicero-YDWB/ecpg.xml:6221(replaceable) /tmp/cicero-YDWB/ecpg.xml:6486(replaceable) /tmp/cicero-YDWB/ecpg.xml:6504(replaceable) /tmp/cicero-YDWB/ecpg.xml:7205(replaceable) 
msgid "name"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:874(type) 
msgid "char[NAMEDATALEN]"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:878(type) /tmp/cicero-YDWB/ecpg.xml:879(type) 
msgid "timestamp"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:883(type) /tmp/cicero-YDWB/ecpg.xml:884(type) /tmp/cicero-YDWB/ecpg.xml:1054(title) 
msgid "interval"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:888(type) /tmp/cicero-YDWB/ecpg.xml:889(type) 
msgid "date"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:893(type) 
msgid "boolean"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:894(type) 
msgid "bool"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:894(para) 
msgid "declared in <filename>ecpglib.h</filename> if not native"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:901(title) 
msgid "Handling Character Strings"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:903(para) 
msgid "To handle SQL character string data types, such as <type>varchar</type> and <type>text</type>, there are two possible ways to declare the host variables."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:913(programlisting) 
#, no-wrap
msgid "\nEXEC SQL BEGIN DECLARE SECTION;\n    char str[50];\nEXEC SQL END DECLARE SECTION;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:909(para) 
msgid "One way is using <type>char[]</type>, an array of <type>char</type>, which is the most common way to handle character data in C. <placeholder-1/> Note that you have to take care of the length yourself. If you use this host variable as the target variable of a query which returns a string with more than 49 characters, a buffer overflow occurs."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:929(programlisting) 
#, no-wrap
msgid "\nVARCHAR var[180];\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:933(programlisting) 
#, no-wrap
msgid "\nstruct varchar_var { int len; char arr[180]; } var;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:924(para) 
msgid "The other way is using the <type>VARCHAR</type> type, which is a special type provided by ECPG. The definition on an array of type <type>VARCHAR</type> is converted into a named <type>struct</type> for every variable. A declaration like: <placeholder-1/> is converted into: <placeholder-2/> The member <structfield>arr</structfield> hosts the string including a terminating zero byte. Thus, to store a string in a <type>VARCHAR</type> host variable, the host variable has to be declared with the length including the zero byte terminator. The member <structfield>len</structfield> holds the length of the string stored in the <structfield>arr</structfield> without the terminating zero byte. When a host variable is used as input for a query, if <literal>strlen(arr)</literal> and <structfield>len</structfield> are different, the shorter one is used."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:952(programlisting) 
#, no-wrap
msgid "\nVARCHAR v1[128], v2[128];   /* WRONG */\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:956(programlisting) 
#, no-wrap
msgid "\nVARCHAR v1[128];\nVARCHAR v2[128];\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:948(para) 
msgid "Two or more <type>VARCHAR</type> host variables cannot be defined in single line statement. The following code will confuse the <command>ecpg</command> preprocessor: <placeholder-1/> Two variables should be defined in separate statements like this: <placeholder-2/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:962(para) 
msgid "<type>VARCHAR</type> can be written in upper or lower case, but not in mixed case."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:967(para) 
msgid "<type>char</type> and <type>VARCHAR</type> host variables can also hold values of other SQL types, which will be stored in their string forms."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:975(title) 
msgid "Accessing Special Data Types"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:977(para) 
msgid "ECPG contains some special types that help you to interact easily with some special data types from the PostgreSQL server. In particular, it has implemented support for the <type>numeric</type>, <type>decimal</type>, <type>date</type>, <type>timestamp</type>, and <type>interval</type> types. These data types cannot usefully be mapped to primitive host variable types (such as <type>int</type>, <type>long long int</type>, or <type>char[]</type>), because they have a complex internal structure. Applications deal with these types by declaring host variables in special types and accessing them using functions in the pgtypes library. The pgtypes library, described in detail in <xref linkend=\"ecpg-pgtypes\"/> contains basic functions to deal with those types, such that you do not need to send a query to the SQL server just for adding an interval to a time stamp for example."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:995(para) 
msgid "The follow subsections describe these special data types. For more details about pgtypes library functions, see <xref linkend=\"ecpg-pgtypes\"/>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1002(title) 
msgid "timestamp, date"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1004(para) 
msgid "Here is a pattern for handling <type>timestamp</type> variables in the ECPG host application."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1012(programlisting) 
#, no-wrap
msgid "\n#include &lt;pgtypes_timestamp.h&gt;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1009(para) 
msgid "First, the program has to include the header file for the <type>timestamp</type> type: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1020(programlisting) 
#, no-wrap
msgid "\nEXEC SQL BEGIN DECLARE SECTION;\ntimestamp ts;\nEXEC SQL END DECLARE SECTION;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1017(para) 
msgid "Next, declare a host variable as type <type>timestamp</type> in the declare section: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1033(programlisting) 
#, no-wrap
msgid "\nEXEC SQL SELECT now()::timestamp INTO :ts;\n\nprintf(\"ts = %s\\n\", PGTYPEStimestamp_to_asc(ts));\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1027(para) 
msgid "And after reading a value into the host variable, process it using pgtypes library functions. In following example, the <type>timestamp</type> value is converted into text (ASCII) form with the <function>PGTYPEStimestamp_to_asc()</function> function: <placeholder-1/> This example will show some result like following: <screen>\nts = 2010-06-27 18:03:56.949343\n</screen>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1044(para) 
msgid "In addition, the DATE type can be handled in the same way. The program has to include <filename>pg_types_date.h</filename>, declare a host variable as the date type and convert a DATE value into a text form using <function>PGTYPESdate_to_asc()</function> function. For more details about the pgtypes library functions, see <xref linkend=\"ecpg-pgtypes\"/>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1056(para) 
msgid "The handling of the <type>interval</type> type is also similar to the <type>timestamp</type> and <type>date</type> types. It is required, however, to allocate memory for an <type>interval</type> type value explicitly. In other words, the memory space for the variable has to be allocated in the heap memory, not in the stack memory."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1067(programlisting) 
#, no-wrap
msgid "\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;pgtypes_interval.h&gt;\n\nint\nmain(void)\n{\nEXEC SQL BEGIN DECLARE SECTION;\n    interval *in;\nEXEC SQL END DECLARE SECTION;\n\n    EXEC SQL CONNECT TO testdb;\n\n    in = PGTYPESinterval_new();\n    EXEC SQL SELECT '1 min'::interval INTO :in;\n    printf(\"interval = %s\\n\", PGTYPESinterval_to_asc(in));\n    PGTYPESinterval_free(in);\n\n    EXEC SQL COMMIT;\n    EXEC SQL DISCONNECT ALL;\n    return 0;\n}\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1065(para) 
msgid "Here is an example program: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1095(title) 
msgid "numeric, decimal"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1097(para) 
msgid "The handling of the <type>numeric</type> and <type>decimal</type> types is similar to the <type>interval</type> type: It requires defining a pointer, allocating some memory space on the heap, and accessing the variable using the pgtypes library functions. For more details about the pgtypes library functions, see <xref linkend=\"ecpg-pgtypes\"/>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1107(para) 
msgid "No functions are provided specifically for the <type>decimal</type> type. An application has to convert it to a <type>numeric</type> variable using a pgtypes library function to do further processing."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1117(programlisting) 
#, no-wrap
msgid "\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;pgtypes_numeric.h&gt;\n\nEXEC SQL WHENEVER SQLERROR STOP;\n\nint\nmain(void)\n{\nEXEC SQL BEGIN DECLARE SECTION;\n    numeric *num;\n    numeric *num2;\n    decimal *dec;\nEXEC SQL END DECLARE SECTION;\n\n    EXEC SQL CONNECT TO testdb;\n\n    num = PGTYPESnumeric_new();\n    dec = PGTYPESdecimal_new();\n\n    EXEC SQL SELECT 12.345::numeric(4,2), 23.456::decimal(4,2) INTO :num, :dec;\n\n    printf(\"numeric = %s\\n\", PGTYPESnumeric_to_asc(num, 0));\n    printf(\"numeric = %s\\n\", PGTYPESnumeric_to_asc(num, 1));\n    printf(\"numeric = %s\\n\", PGTYPESnumeric_to_asc(num, 2));\n\n    /* Convert decimal to numeric to show a decimal value. */\n    num2 = PGTYPESnumeric_new();\n    PGTYPESnumeric_from_decimal(dec, num2);\n\n    printf(\"decimal = %s\\n\", PGTYPESnumeric_to_asc(num2, 0));\n    printf(\"decimal = %s\\n\", PGTYPESnumeric_to_asc(num2, 1));\n    printf(\"decimal = %s\\n\", PGTYPESnumeric_to_asc(num2, 2));\n\n    PGTYPESnumeric_free(num2);\n    PGTYPESdecimal_free(dec);\n    PGTYPESnumeric_free(num);\n\n    EXEC SQL COMMIT;\n    EXEC SQL DISCONNECT ALL;\n    return 0;\n}\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1114(para) 
msgid "Here is an example program handling <type>numeric</type> and <type>decimal</type> type variables. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1166(title) 
msgid "Host Variables with Nonprimitive Types"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1168(para) 
msgid "As a host variable you can also use arrays, typedefs, structs, and pointers."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1174(title) /tmp/cicero-YDWB/ecpg.xml:1392(title) 
msgid "Arrays"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1176(para) 
msgid "There are two use cases for arrays as host variables. The first is a way to store some text string in <type>char[]</type> or <type>VARCHAR[]</type>, as explained <xref linkend=\"ecpg-char\"/>. The second use case is to retrieve multiple rows from a query result without using a cursor. Without an array, to process a query result consisting of multiple rows, it is required to use a cursor and the <command>FETCH</command> command. But with array host variables, multiple rows can be received at once. The length of the array has to be defined to be able to accommodate all rows, otherwise a buffer overflow will likely occur."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1194(programlisting) 
#, no-wrap
msgid "\nint\nmain(void)\n{\nEXEC SQL BEGIN DECLARE SECTION;\n    int dbid[8];\n    char dbname[8][16];\n    int i;\nEXEC SQL END DECLARE SECTION;\n\n    memset(dbname, 0, sizeof(char)* 16 * 8);\n    memset(dbid, 0, sizeof(int) * 8);\n\n    EXEC SQL CONNECT TO testdb;\n\n    /* Retrieve multiple rows into arrays at once. */\n    EXEC SQL SELECT oid,datname INTO :dbid, :dbname FROM pg_database;\n\n    for (i = 0; i &lt; 8; i++)\n        printf(\"oid=%d, dbname=%s\\n\", dbid[i], dbname[i]);\n\n    EXEC SQL COMMIT;\n    EXEC SQL DISCONNECT ALL;\n    return 0;\n}\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1190(para) 
msgid "Following example scans the <literal>pg_database</literal> system table and shows all OIDs and names of the available databases: <placeholder-1/> This example shows following result. (The exact values depend on local circumstances.) <screen>\noid=1, dbname=template1\noid=11510, dbname=template0\noid=11511, dbname=postgres\noid=313780, dbname=testdb\noid=0, dbname=\noid=0, dbname=\noid=0, dbname=\n</screen>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1236(title) 
msgid "Structures"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1238(para) 
msgid "A structure whose member names match the column names of a query result, can be used to retrieve multiple columns at once. The structure enables handling multiple column values in a single host variable."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1255(programlisting) 
#, no-wrap
msgid "\nEXEC SQL BEGIN DECLARE SECTION;\n    typedef struct\n    {\n       int oid;\n       char datname[65];\n       long long int size;\n    } dbinfo_t;\n\n    dbinfo_t dbval;\nEXEC SQL END DECLARE SECTION;\n\n    memset(&amp;dbval, 0, sizeof(dbinfo_t));\n\n    EXEC SQL DECLARE cur1 CURSOR FOR SELECT oid, datname, pg_database_size(oid) AS size FROM pg_database;\n    EXEC SQL OPEN cur1;\n\n    /* when end of result set reached, break out of while loop */\n    EXEC SQL WHENEVER NOT FOUND DO BREAK;\n\n    while (1)\n    {\n        /* Fetch multiple columns into one structure. */\n        EXEC SQL FETCH FROM cur1 INTO :dbval;\n\n        /* Print members of the structure. */\n        printf(\"oid=%d, datname=%s, size=%lld\\n\", dbval.oid, dbval.datname, dbval.size);\n    }\n\n    EXEC SQL CLOSE cur1;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1245(para) 
msgid "The following example retrieves OIDs, names, and sizes of the available databases from the <literal>pg_database</literal> system table and using the <function>pg_database_size()</function> function. In this example, a structure variable <varname>dbinfo_t</varname> with members whose names match each column in the <literal>SELECT</literal> result is used to retrieve one result row without putting multiple host variables in the <literal>FETCH</literal> statement. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1288(para) 
msgid "This example shows following result. (The exact values depend on local circumstances.) <screen>\noid=1, datname=template1, size=4324580\noid=11510, datname=template0, size=4243460\noid=11511, datname=postgres, size=4324580\noid=313780, datname=testdb, size=8183012\n</screen>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1305(programlisting) 
#, no-wrap
msgid "\nEXEC SQL BEGIN DECLARE SECTION;\n    typedef struct\n    {\n       int oid;\n       char datname[65];\n    } dbinfo_t;\n\n    dbinfo_t dbval;\n    long long int size;\nEXEC SQL END DECLARE SECTION;\n\n    memset(&amp;dbval, 0, sizeof(dbinfo_t));\n\n    EXEC SQL DECLARE cur1 CURSOR FOR SELECT oid, datname, pg_database_size(oid) AS size FROM pg_database;\n    EXEC SQL OPEN cur1;\n\n    /* when end of result set reached, break out of while loop */\n    EXEC SQL WHENEVER NOT FOUND DO BREAK;\n\n    while (1)\n    {\n        /* Fetch multiple columns into one structure. */\n        EXEC SQL FETCH FROM cur1 INTO :dbval, :size;\n\n        /* Print members of the structure. */\n        printf(\"oid=%d, datname=%s, size=%lld\\n\", dbval.oid, dbval.datname, size);\n    }\n\n    EXEC SQL CLOSE cur1;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1299(para) 
msgid "Structure host variables <quote>absorb</quote> as many columns as the structure as fields. Additional columns can be assigned to other host variables. For example, the above program could also be restructured like this, with the <varname>size</varname> variable outside the structure: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1340(title) 
msgid "Typedefs"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1345(programlisting) 
#, no-wrap
msgid "\nEXEC SQL BEGIN DECLARE SECTION;\n    typedef char mychartype[40];\n    typedef long serial_t;\nEXEC SQL END DECLARE SECTION;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1352(programlisting) 
#, no-wrap
msgid "\nEXEC SQL TYPE serial_t IS long;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1342(para) 
msgid "Use the <literal>typedef</literal> keyword to map new types to already existing types. <placeholder-1/> Note that you could also use: <placeholder-2/> This declaration does not need to be part of a declare section."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1360(title) 
msgid "Pointers"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1362(para) 
msgid "You can declare pointers to the most common types. Note however that you cannot use pointers as target variables of queries without auto-allocation. See <xref linkend=\"ecpg-descriptors\"/> for more information on auto-allocation."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1370(programlisting) 
#, no-wrap
msgid "\nEXEC SQL BEGIN DECLARE SECTION;\n    int   *intp;\n    char **charp;\nEXEC SQL END DECLARE SECTION;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1382(title) 
msgid "Handling Nonprimitive SQL Data Types"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1384(para) 
msgid "This section contains information on how to handle nonscalar and user-defined SQL-level data types in ECPG applications. Note that this is distinct from the handling of host variables of nonprimitive types, described in the previous section."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1394(para) 
msgid "SQL-level arrays are not directly supported in ECPG. It is not possible to simply map an SQL array into a C array host variable. This will result in undefined behavior. Some workarounds exist, however."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1401(para) 
msgid "If a query accesses <emphasis>elements</emphasis> of an array separately, then this avoids the use of arrays in ECPG. Then, a host variable with a type that can be mapped to the element type should be used. For example, if a column type is array of <type>integer</type>, a host variable of type <type>int</type> can be used. Also if the element type is <type>varchar</type> or <type>text</type>, a host variable of type <type>char[]</type> or <type>VARCHAR[]</type> can be used."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1414(programlisting) 
#, no-wrap
msgid "\nCREATE TABLE t3 (\n    ii integer[]\n);\n\ntestdb=&gt; SELECT * FROM t3;\n     ii\n-------------\n {1,2,3,4,5}\n(1 row)\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1429(programlisting) 
#, no-wrap
msgid "\nEXEC SQL BEGIN DECLARE SECTION;\nint ii;\nEXEC SQL END DECLARE SECTION;\n\nEXEC SQL DECLARE cur1 CURSOR FOR SELECT ii[4] FROM t3;\nEXEC SQL OPEN cur1;\n\nEXEC SQL WHENEVER NOT FOUND DO BREAK;\n\nwhile (1)\n{\n    EXEC SQL FETCH FROM cur1 INTO :ii ;\n    printf(\"ii=%d\\n\", ii);\n}\n\nEXEC SQL CLOSE cur1;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1412(para) 
msgid "Here is an example. Assume the following table: <placeholder-1/> The following example program retrieves the 4th element of the array and stores it into a host variable of type <type>int</type>: <placeholder-2/> This example shows the following result: <screen>\nii=4\n</screen>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1459(programlisting) 
#, no-wrap
msgid "\nEXEC SQL BEGIN DECLARE SECTION;\nint ii_a[8];\nEXEC SQL END DECLARE SECTION;\n\nEXEC SQL DECLARE cur1 CURSOR FOR SELECT ii[1], ii[2], ii[3], ii[4] FROM t3;\nEXEC SQL OPEN cur1;\n\nEXEC SQL WHENEVER NOT FOUND DO BREAK;\n\nwhile (1)\n{\n    EXEC SQL FETCH FROM cur1 INTO :ii_a[0], :ii_a[1], :ii_a[2], :ii_a[3];\n    ...\n}\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1454(para) 
msgid "To map multiple array elements to the multiple elements in an array type host variables each element of array column and each element of the host variable array have to be managed separately, for example: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1479(programlisting) 
#, no-wrap
msgid "\nEXEC SQL BEGIN DECLARE SECTION;\nint ii_a[8];\nEXEC SQL END DECLARE SECTION;\n\nEXEC SQL DECLARE cur1 CURSOR FOR SELECT ii FROM t3;\nEXEC SQL OPEN cur1;\n\nEXEC SQL WHENEVER NOT FOUND DO BREAK;\n\nwhile (1)\n{\n    /* WRONG */\n    EXEC SQL FETCH FROM cur1 INTO :ii_a;\n    ...\n}\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1477(para) 
msgid "Note again that <placeholder-1/> would not work correctly in this case, because you cannot map an array type column to an array host variable directly."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1500(para) 
msgid "Another workaround is to store arrays in their external string representation in host variables of type <type>char[]</type> or <type>VARCHAR[]</type>. For more details about this representation, see <xref linkend=\"arrays-input\"/>. Note that this means that the array cannot be accessed naturally as an array in the host program (without further processing that parses the text representation)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1512(title) 
msgid "Composite Types"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1514(para) 
msgid "Composite types are not directly supported in ECPG, but an easy workaround is possible. The available workarounds are similar to the ones described for arrays above: Either access each attribute separately or use the external string representation."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1524(programlisting) 
#, no-wrap
msgid "\nCREATE TYPE comp_t AS (intval integer, textval varchar(32));\nCREATE TABLE t4 (compval comp_t);\nINSERT INTO t4 VALUES ( (256, 'PostgreSQL') );\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1534(programlisting) 
#, no-wrap
msgid "\nEXEC SQL BEGIN DECLARE SECTION;\nint intval;\nvarchar textval[33];\nEXEC SQL END DECLARE SECTION;\n\n/* Put each element of the composite type column in the SELECT list. */\nEXEC SQL DECLARE cur1 CURSOR FOR SELECT (compval).intval, (compval).textval FROM t4;\nEXEC SQL OPEN cur1;\n\nEXEC SQL WHENEVER NOT FOUND DO BREAK;\n\nwhile (1)\n{\n    /* Fetch each element of the composite type column into host variables. */\n    EXEC SQL FETCH FROM cur1 INTO :intval, :textval;\n\n    printf(\"intval=%d, textval=%s\\n\", intval, textval.arr);\n}\n\nEXEC SQL CLOSE cur1;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1522(para) 
msgid "For the following examples, assume the following type and table: <placeholder-1/> The most obvious solution is to access each attribute separately. The following program retrieves data from the example table by selecting each attribute of the type <type>comp_t</type> separately: <placeholder-2/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1568(programlisting) 
#, no-wrap
msgid "\nEXEC SQL BEGIN DECLARE SECTION;\ntypedef struct\n{\n    int intval;\n    varchar textval[33];\n} comp_t;\n\ncomp_t compval;\nEXEC SQL END DECLARE SECTION;\n\n/* Put each element of the composite type column in the SELECT list. */\nEXEC SQL DECLARE cur1 CURSOR FOR SELECT (compval).intval, (compval).textval FROM t4;\nEXEC SQL OPEN cur1;\n\nEXEC SQL WHENEVER NOT FOUND DO BREAK;\n\nwhile (1)\n{\n    /* Put all values in the SELECT list into one structure. */\n    EXEC SQL FETCH FROM cur1 INTO :compval;\n\n    printf(\"intval=%d, textval=%s\\n\", compval.intval, compval.textval.arr);\n}\n\nEXEC SQL CLOSE cur1;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1601(programlisting) 
#, no-wrap
msgid "\n...\nEXEC SQL DECLARE cur1 CURSOR FOR SELECT (compval).* FROM t4;\nEXEC SQL OPEN cur1;\n\nEXEC SQL WHENEVER NOT FOUND DO BREAK;\n\nwhile (1)\n{\n    /* Put all values in the SELECT list into one structure. */\n    EXEC SQL FETCH FROM cur1 INTO :compval;\n\n    printf(\"intval=%d, textval=%s\\n\", compval.intval, compval.textval.arr);\n}\n...\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1558(para) 
msgid "To enhance this example, the host variables to store values in the <command>FETCH</command> command can be gathered into one structure. For more details about the host variable in the structure form, see <xref linkend=\"ecpg-variables-struct\"/>. To switch to the structure, the example can be modified as below. The two host variables, <varname>intval</varname> and <varname>textval</varname>, become members of the <structname>comp_t</structname> structure, and the structure is specified on the <command>FETCH</command> command. <placeholder-1/> Although a structure is used in the <command>FETCH</command> command, the attribute names in the <command>SELECT</command> clause are specified one by one. This can be enhanced by using a <literal>*</literal> to ask for all attributes of the composite type value. <placeholder-2/> This way, composite types can be mapped into structures almost seamlessly, even though ECPG does not understand the composite type itself."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1622(para) 
msgid "Finally, it is also possible to store composite type values in their external string representation in host variables of type <type>char[]</type> or <type>VARCHAR[]</type>. But that way, it is not easily possible to access the fields of the value from the host program."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1632(title) 
msgid "User-defined Base Types"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1634(para) 
msgid "New user-defined base types are not directly supported by ECPG. You can use the external string representation and host variables of type <type>char[]</type> or <type>VARCHAR[]</type>, and this solution is indeed appropriate and sufficient for many types."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1654(programlisting) 
#, no-wrap
msgid "\nEXEC SQL BEGIN DECLARE SECTION;\n    varchar a[64];\n    varchar b[64];\nEXEC SQL END DECLARE SECTION;\n\n    EXEC SQL INSERT INTO test_complex VALUES ('(1,1)', '(3,3)');\n\n    EXEC SQL DECLARE cur1 CURSOR FOR SELECT a, b FROM test_complex;\n    EXEC SQL OPEN cur1;\n\n    EXEC SQL WHENEVER NOT FOUND DO BREAK;\n\n    while (1)\n    {\n        EXEC SQL FETCH FROM cur1 INTO :a, :b;\n        printf(\"a=%s, b=%s\\n\", a.arr, b.arr);\n    }\n\n    EXEC SQL CLOSE cur1;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1641(para) 
msgid "Here is an example using the data type <type>complex</type> from the example in <xref linkend=\"xtypes\"/>. The external string representation of that type is <literal>(%lf,%lf)</literal>, which is defined in the functions <function>complex_in()</function> and <function>complex_out()</function> functions in <xref linkend=\"xtypes\"/>. The following example inserts the complex type values <literal>(1,1)</literal> and <literal>(3,3)</literal> into the columns <literal>a</literal> and <literal>b</literal>, and select them from the table after that. <placeholder-1/> This example shows following result: <screen>\na=(1,1), b=(3,3)\n</screen>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1682(para) 
msgid "Another workaround is avoiding the direct use of the user-defined types in ECPG and instead create a function or cast that converts between the user-defined type and a primitive type that ECPG can handle. Note, however, that type casts, especially implicit ones, should be introduced into the type system very carefully."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1692(programlisting) 
#, no-wrap
msgid "\nCREATE FUNCTION create_complex(r double, i double) RETURNS complex\nLANGUAGE SQL\nIMMUTABLE\nAS $$ SELECT $1 * complex '(1,0')' + $2 * complex '(0,1)' $$;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1699(programlisting) 
#, no-wrap
msgid "\nEXEC SQL BEGIN DECLARE SECTION;\ndouble a, b, c, d;\nEXEC SQL END DECLARE SECTION;\n\na = 1;\nb = 2;\nc = 3;\nd = 4;\n\nEXEC SQL INSERT INTO test_complex VALUES (create_complex(:a, :b), create_complex(:c, :d));\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1712(programlisting) 
#, no-wrap
msgid "\nEXEC SQL INSERT INTO test_complex VALUES ('(1,2)', '(3,4)');\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1690(para) 
msgid "For example, <placeholder-1/> After this definition, the following <placeholder-2/> has the same effect as <placeholder-3/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1720(title) 
msgid "Indicators"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1733(programlisting) 
#, no-wrap
msgid "\nEXEC SQL BEGIN DECLARE SECTION;\nVARCHAR val;\nint val_ind;\nEXEC SQL END DECLARE SECTION:\n\n ...\n\nEXEC SQL SELECT b INTO :val :val_ind FROM test1;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1722(para) 
msgid "The examples above do not handle null values. In fact, the retrieval examples will raise an error if they fetch a null value from the database. To be able to pass null values to the database or retrieve null values from the database, you need to append a second host variable specification to each host variable that contains data. This second host variable is called the <firstterm>indicator</firstterm> and contains a flag that tells whether the datum is null, in which case the value of the real host variable is ignored. Here is an example that handles the retrieval of null values correctly: <placeholder-1/> The indicator variable <varname>val_ind</varname> will be zero if the value was not null, and it will be negative if the value was null."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1748(para) 
msgid "The indicator has another function: if the indicator value is positive, it means that the value is not null, but it was truncated when it was stored in the host variable."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1754(para) 
msgid "If the argument <literal>-r no_indicator</literal> is passed to the preprocessor <command>ecpg</command>, it works in <quote>no-indicator</quote> mode. In no-indicator mode, if no indicator variable is specified, null values are signaled (on input and output) for character string types as empty string and for integer types as the lowest possible value for type (for example, <symbol>INT_MIN</symbol> for <type>int</type>)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1767(title) 
msgid "Dynamic SQL"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1769(para) 
msgid "In many cases, the particular SQL statements that an application has to execute are known at the time the application is written. In some cases, however, the SQL statements are composed at run time or provided by an external source. In these cases you cannot embed the SQL statements directly into the C source code, but there is a facility that allows you to call arbitrary SQL statements that you provide in a string variable."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1780(title) 
msgid "Executing Statements without a Result Set"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1785(programlisting) 
#, no-wrap
msgid "\nEXEC SQL BEGIN DECLARE SECTION;\nconst char *stmt = \"CREATE TABLE test1 (...);\";\nEXEC SQL END DECLARE SECTION;\n\nEXEC SQL EXECUTE IMMEDIATE :stmt;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1782(para) 
msgid "The simplest way to execute an arbitrary SQL statement is to use the command <command>EXECUTE IMMEDIATE</command>. For example: <placeholder-1/><command>EXECUTE IMMEDIATE</command> can be used for SQL statements that do not return a result set (e.g., DDL, <command>INSERT</command>, <command>UPDATE</command>, <command>DELETE</command>). You cannot execute statements that retrieve data (e.g., <command>SELECT</command>) this way. The next section describes how to do that."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1802(title) 
msgid "Executing a Statement with Input Parameters"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1812(programlisting) 
#, no-wrap
msgid "\nEXEC SQL BEGIN DECLARE SECTION;\nconst char *stmt = \"INSERT INTO test1 VALUES(?, ?);\";\nEXEC SQL END DECLARE SECTION;\n\nEXEC SQL PREPARE mystmt FROM :stmt;\n ...\nEXEC SQL EXECUTE mystmt USING 42, 'foobar';\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1804(para) 
msgid "A more powerful way to execute arbitrary SQL statements is to prepare them once and execute the prepared statement as often as you like. It is also possible to prepare a generalized version of a statement and then execute specific versions of it by substituting parameters. When preparing the statement, write question marks where you want to substitute parameters later. For example: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1833(title) 
msgid "Executing a Statement with a Result Set"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1835(para) 
msgid "To execute an SQL statement with a single result row, <command>EXECUTE</command> can be used. To save the result, add an <literal>INTO</literal> clause. <placeholder-1/> An <command>EXECUTE</command> command can have an <literal>INTO</literal> clause, a <literal>USING</literal> clause, both, or neither."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1860(programlisting) 
#, no-wrap
msgid "\nEXEC SQL BEGIN DECLARE SECTION;\nchar dbaname[128];\nchar datname[128];\nchar *stmt = \"SELECT u.usename as dbaname, d.datname \"\n             \"  FROM pg_database d, pg_user u \"\n             \"  WHERE d.datdba = u.usesysid\";\nEXEC SQL END DECLARE SECTION;\n\nEXEC SQL CONNECT TO testdb AS con1 USER testuser;\n\nEXEC SQL PREPARE stmt1 FROM :stmt;\n\nEXEC SQL DECLARE cursor1 CURSOR FOR stmt1;\nEXEC SQL OPEN cursor1;\n\nEXEC SQL WHENEVER NOT FOUND DO BREAK;\n\nwhile (1)\n{\n    EXEC SQL FETCH cursor1 INTO :dbaname,:datname;\n    printf(\"dbaname=%s, datname=%s\\n\", dbaname, datname);\n}\n\nEXEC SQL CLOSE cursor1;\n\nEXEC SQL COMMIT;\nEXEC SQL DISCONNECT ALL;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1855(para) 
msgid "If a query is expected to return more than one result row, a cursor should be used, as in the following example. (See <xref linkend=\"ecpg-cursors\"/> for more details about the cursor.) <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1894(title) 
msgid "pgtypes Library"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1896(para) 
msgid "The pgtypes library maps <productname>PostgreSQL</productname> database types to C equivalents that can be used in C programs. It also offers functions to do basic calculations with those types within C, i.e., without the help of the <productname>PostgreSQL</productname> server. See the following example: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1921(title) 
msgid "The numeric Type"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1922(para) 
msgid "The numeric type offers to do calculations with arbitrary precision. See <xref linkend=\"datatype-numeric\"/> for the equivalent type in the <productname>PostgreSQL</productname> server. Because of the arbitrary precision this variable needs to be able to expand and shrink dynamically. That's why you can only create numeric variables on the heap, by means of the <function>PGTYPESnumeric_new</function> and <function>PGTYPESnumeric_free</function> functions. The decimal type, which is similar but limited in precision, can be created on the stack as well as on the heap."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1936(function) 
msgid "PGTYPESnumeric_new"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1938(para) 
msgid "Request a pointer to a newly allocated numeric variable. <synopsis>\nnumeric *PGTYPESnumeric_new(void);\n</synopsis>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1948(function) 
msgid "PGTYPESnumeric_free"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1950(para) 
msgid "Free a numeric type, release all of its memory. <synopsis>\nvoid PGTYPESnumeric_free(numeric *var);\n</synopsis>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1960(function) 
msgid "PGTYPESnumeric_from_asc"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1962(para) 
msgid "Parse a numeric type from its string notation. <synopsis>\nnumeric *PGTYPESnumeric_from_asc(char *str, char **endptr);\n</synopsis> Valid formats are for example: <literal>-2</literal>, <literal>.794</literal>, <literal>+3.44</literal>, <literal>592.49E07</literal> or <literal>-32.84e-4</literal>. If the value could be parsed successfully, a valid pointer is returned, else the NULL pointer. At the moment ECPG always parses the complete string and so it currently does not support to store the address of the first invalid character in <literal>*endptr</literal>. You can safely set <literal>endptr</literal> to NULL."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1983(function) 
msgid "PGTYPESnumeric_to_asc"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1985(para) 
msgid "Returns a pointer to a string allocated by <function>malloc</function> that contains the string representation of the numeric type <literal>num</literal>. <synopsis>\nchar *PGTYPESnumeric_to_asc(numeric *num, int dscale);\n</synopsis> The numeric value will be printed with <literal>dscale</literal> decimal digits, with rounding applied if necessary."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1998(function) 
msgid "PGTYPESnumeric_add"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2000(para) 
msgid "Add two numeric variables into a third one. <synopsis>\nint PGTYPESnumeric_add(numeric *var1, numeric *var2, numeric *result);\n</synopsis> The function adds the variables <literal>var1</literal> and <literal>var2</literal> into the result variable <literal>result</literal>. The function returns 0 on success and -1 in case of error."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2014(function) 
msgid "PGTYPESnumeric_sub"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2016(para) 
msgid "Subtract two numeric variables and return the result in a third one. <synopsis>\nint PGTYPESnumeric_sub(numeric *var1, numeric *var2, numeric *result);\n</synopsis> The function subtracts the variable <literal>var2</literal> from the variable <literal>var1</literal>. The result of the operation is stored in the variable <literal>result</literal>. The function returns 0 on success and -1 in case of error."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2030(function) 
msgid "PGTYPESnumeric_mul"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2032(para) 
msgid "Multiply two numeric variables and return the result in a third one. <synopsis>\nint PGTYPESnumeric_mul(numeric *var1, numeric *var2, numeric *result);\n</synopsis> The function multiplies the variables <literal>var1</literal> and <literal>var2</literal>. The result of the operation is stored in the variable <literal>result</literal>. The function returns 0 on success and -1 in case of error."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2046(function) 
msgid "PGTYPESnumeric_div"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2048(para) 
msgid "Divide two numeric variables and return the result in a third one. <synopsis>\nint PGTYPESnumeric_div(numeric *var1, numeric *var2, numeric *result);\n</synopsis> The function divides the variables <literal>var1</literal> by <literal>var2</literal>. The result of the operation is stored in the variable <literal>result</literal>. The function returns 0 on success and -1 in case of error."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2062(function) 
msgid "PGTYPESnumeric_cmp"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2074(para) 
msgid "1, if <literal>var1</literal> is bigger than <literal>var2</literal>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2079(para) 
msgid "-1, if <literal>var1</literal> is smaller than <literal>var2</literal>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2084(para) 
msgid "0, if <literal>var1</literal> and <literal>var2</literal> are equal"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2064(para) 
msgid "Compare two numeric variables. <synopsis>\nint PGTYPESnumeric_cmp(numeric *var1, numeric *var2)\n</synopsis> This function compares two numeric variables. In case of error, <literal>INT_MAX</literal> is returned. On success, the function returns one of three possible results: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2094(function) 
msgid "PGTYPESnumeric_from_int"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2096(para) 
msgid "Convert an int variable to a numeric variable. <synopsis>\nint PGTYPESnumeric_from_int(signed int int_val, numeric *var);\n</synopsis> This function accepts a variable of type signed int and stores it in the numeric variable <literal>var</literal>. Upon success, 0 is returned and -1 in case of a failure."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2109(function) 
msgid "PGTYPESnumeric_from_long"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2111(para) 
msgid "Convert a long int variable to a numeric variable. <synopsis>\nint PGTYPESnumeric_from_long(signed long int long_val, numeric *var);\n</synopsis> This function accepts a variable of type signed long int and stores it in the numeric variable <literal>var</literal>. Upon success, 0 is returned and -1 in case of a failure."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2124(function) 
msgid "PGTYPESnumeric_copy"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2126(para) 
msgid "Copy over one numeric variable into another one. <synopsis>\nint PGTYPESnumeric_copy(numeric *src, numeric *dst);\n</synopsis> This function copies over the value of the variable that <literal>src</literal> points to into the variable that <literal>dst</literal> points to. It returns 0 on success and -1 if an error occurs."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2139(function) 
msgid "PGTYPESnumeric_from_double"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2141(para) 
msgid "Convert a variable of type double to a numeric. <synopsis>\nint  PGTYPESnumeric_from_double(double d, numeric *dst);\n</synopsis> This function accepts a variable of type double and stores the result in the variable that <literal>dst</literal> points to. It returns 0 on success and -1 if an error occurs."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2154(function) 
msgid "PGTYPESnumeric_to_double"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2156(para) 
msgid "Convert a variable of type numeric to double. <synopsis>\nint PGTYPESnumeric_to_double(numeric *nv, double *dp)\n</synopsis> The function converts the numeric value from the variable that <literal>nv</literal> points to into the double variable that <literal>dp</literal> points to. It returns 0 on success and -1 if an error occurs, including overflow. On overflow, the global variable <literal>errno</literal> will be set to <literal>PGTYPES_NUM_OVERFLOW</literal> additionally."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2171(function) 
msgid "PGTYPESnumeric_to_int"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2173(para) 
msgid "Convert a variable of type numeric to int. <synopsis>\nint PGTYPESnumeric_to_int(numeric *nv, int *ip);\n</synopsis> The function converts the numeric value from the variable that <literal>nv</literal> points to into the integer variable that <literal>ip</literal> points to. It returns 0 on success and -1 if an error occurs, including overflow. On overflow, the global variable <literal>errno</literal> will be set to <literal>PGTYPES_NUM_OVERFLOW</literal> additionally."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2188(function) 
msgid "PGTYPESnumeric_to_long"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2190(para) 
msgid "Convert a variable of type numeric to long. <synopsis>\nint PGTYPESnumeric_to_long(numeric *nv, long *lp);\n</synopsis> The function converts the numeric value from the variable that <literal>nv</literal> points to into the long integer variable that <literal>lp</literal> points to. It returns 0 on success and -1 if an error occurs, including overflow. On overflow, the global variable <literal>errno</literal> will be set to <literal>PGTYPES_NUM_OVERFLOW</literal> additionally."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2206(function) 
msgid "PGTYPESnumeric_to_decimal"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2208(para) 
msgid "Convert a variable of type numeric to decimal. <synopsis>\nint PGTYPESnumeric_to_decimal(numeric *src, decimal *dst);\n</synopsis> The function converts the numeric value from the variable that <literal>src</literal> points to into the decimal variable that <literal>dst</literal> points to. It returns 0 on success and -1 if an error occurs, including overflow. On overflow, the global variable <literal>errno</literal> will be set to <literal>PGTYPES_NUM_OVERFLOW</literal> additionally."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2224(function) 
msgid "PGTYPESnumeric_from_decimal"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2226(para) 
msgid "Convert a variable of type decimal to numeric. <synopsis>\nint PGTYPESnumeric_from_decimal(decimal *src, numeric *dst);\n</synopsis> The function converts the decimal value from the variable that <literal>src</literal> points to into the numeric variable that <literal>dst</literal> points to. It returns 0 on success and -1 if an error occurs. Since the decimal type is implemented as a limited version of the numeric type, overflow cannot occur with this conversion."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:1932(para) 
msgid "The following functions can be used to work with the numeric type: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2244(title) 
msgid "The date Type"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2245(para) 
msgid "The date type in C enables your programs to deal with data of the SQL type date. See <xref linkend=\"datatype-datetime\"/> for the equivalent type in the <productname>PostgreSQL</productname> server."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2254(function) 
msgid "PGTYPESdate_from_timestamp"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2256(para) 
msgid "Extract the date part from a timestamp. <synopsis>\ndate PGTYPESdate_from_timestamp(timestamp dt);\n</synopsis> The function receives a timestamp as its only argument and returns the extracted date part from this timestamp."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2268(function) 
msgid "PGTYPESdate_from_asc"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2270(para) 
msgid "Parse a date from its textual representation. <synopsis>\ndate PGTYPESdate_from_asc(char *str, char **endptr);\n</synopsis> The function receives a C char* string <literal>str</literal> and a pointer to a C char* string <literal>endptr</literal>. At the moment ECPG always parses the complete string and so it currently does not support to store the address of the first invalid character in <literal>*endptr</literal>. You can safely set <literal>endptr</literal> to NULL."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2281(para) 
msgid "Note that the function always assumes MDY-formatted dates and there is currently no variable to change that within ECPG."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2285(para) 
msgid "<xref linkend=\"ecpg-pgtypesdate-from-asc-table\"/> shows the allowed input formats."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2289(title) 
msgid "Valid Input Formats for <function>PGTYPESdate_from_asc</function>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2293(entry) /tmp/cicero-YDWB/ecpg.xml:2767(entry) 
msgid "Input"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2294(entry) /tmp/cicero-YDWB/ecpg.xml:2551(entry) /tmp/cicero-YDWB/ecpg.xml:2642(entry) /tmp/cicero-YDWB/ecpg.xml:2768(entry) 
msgid "Result"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2299(literal) /tmp/cicero-YDWB/ecpg.xml:2300(literal) /tmp/cicero-YDWB/ecpg.xml:2304(literal) /tmp/cicero-YDWB/ecpg.xml:2308(literal) /tmp/cicero-YDWB/ecpg.xml:2320(literal) /tmp/cicero-YDWB/ecpg.xml:2324(literal) /tmp/cicero-YDWB/ecpg.xml:2328(literal) /tmp/cicero-YDWB/ecpg.xml:2332(literal) /tmp/cicero-YDWB/ecpg.xml:2336(literal) /tmp/cicero-YDWB/ecpg.xml:2344(literal) 
msgid "January 8, 1999"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2303(literal) 
msgid "1999-01-08"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2307(literal) 
msgid "1/8/1999"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2311(literal) 
msgid "1/18/1999"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2312(literal) 
msgid "January 18, 1999"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2315(literal) 
msgid "01/02/03"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2316(literal) 
msgid "February 1, 2003"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2319(literal) 
msgid "1999-Jan-08"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2323(literal) 
msgid "Jan-08-1999"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2327(literal) 
msgid "08-Jan-1999"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2331(literal) 
msgid "99-Jan-08"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2335(literal) 
msgid "08-Jan-99"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2339(literal) 
msgid "08-Jan-06"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2340(literal) 
msgid "January 8, 2006"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2343(literal) 
msgid "Jan-08-99"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2347(literal) 
msgid "19990108"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2348(literal) /tmp/cicero-YDWB/ecpg.xml:2352(literal) 
msgid "ISO 8601; January 8, 1999"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2351(literal) 
msgid "990108"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2355(literal) 
msgid "1999.008"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2356(literal) 
msgid "year and day of year"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2359(literal) 
msgid "J2451187"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2360(literal) 
msgid "Julian day"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2363(literal) 
msgid "January 8, 99 BC"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2364(literal) 
msgid "year 99 before the Common Era"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2373(function) 
msgid "PGTYPESdate_to_asc"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2375(para) 
msgid "Return the textual representation of a date variable. <synopsis>\nchar *PGTYPESdate_to_asc(date dDate);\n</synopsis> The function receives the date <literal>dDate</literal> as its only parameter. It will output the date in the form <literal>1999-01-18</literal>, i.e., in the <literal>YYYY-MM-DD</literal> format."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2388(function) 
msgid "PGTYPESdate_julmdy"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2390(para) 
msgid "Extract the values for the day, the month and the year from a variable of type date. <synopsis>\nvoid PGTYPESdate_julmdy(date d, int *mdy);\n</synopsis> The function receives the date <literal>d</literal> and a pointer to an array of 3 integer values <literal>mdy</literal>. The variable name indicates the sequential order: <literal>mdy[0]</literal> will be set to contain the number of the month, <literal>mdy[1]</literal> will be set to the value of the day and <literal>mdy[2]</literal> will contain the year."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2407(function) 
msgid "PGTYPESdate_mdyjul"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2409(para) 
msgid "Create a date value from an array of 3 integers that specify the day, the month and the year of the date. <synopsis>\nvoid PGTYPESdate_mdyjul(int *mdy, date *jdate);\n</synopsis> The function receives the array of the 3 integers (<literal>mdy</literal>) as its first argument and as its second argument a pointer to a variable of type date that should hold the result of the operation."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2423(function) 
msgid "PGTYPESdate_dayofweek"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2435(para) /tmp/cicero-YDWB/ecpg.xml:8743(para) 
msgid "0 - Sunday"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2440(para) /tmp/cicero-YDWB/ecpg.xml:8748(para) 
msgid "1 - Monday"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2445(para) /tmp/cicero-YDWB/ecpg.xml:8753(para) 
msgid "2 - Tuesday"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2450(para) /tmp/cicero-YDWB/ecpg.xml:8758(para) 
msgid "3 - Wednesday"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2455(para) /tmp/cicero-YDWB/ecpg.xml:8763(para) 
msgid "4 - Thursday"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2460(para) /tmp/cicero-YDWB/ecpg.xml:8768(para) 
msgid "5 - Friday"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2465(para) /tmp/cicero-YDWB/ecpg.xml:8773(para) 
msgid "6 - Saturday"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2425(para) 
msgid "Return a number representing the day of the week for a date value. <synopsis>\nint PGTYPESdate_dayofweek(date d);\n</synopsis> The function receives the date variable <literal>d</literal> as its only argument and returns an integer that indicates the day of the week for this date. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2475(function) 
msgid "PGTYPESdate_today"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2477(para) 
msgid "Get the current date. <synopsis>\nvoid PGTYPESdate_today(date *d);\n</synopsis> The function receives a pointer to a date variable (<literal>d</literal>) that it sets to the current date."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2489(function) 
msgid "PGTYPESdate_fmt_asc"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2491(para) 
msgid "Convert a variable of type date to its textual representation using a format mask. <synopsis>\nint PGTYPESdate_fmt_asc(date dDate, char *fmtstring, char *outbuf);\n</synopsis> The function receives the date to convert (<literal>dDate</literal>), the format mask (<literal>fmtstring</literal>) and the string that will hold the textual representation of the date (<literal>outbuf</literal>)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2501(para) /tmp/cicero-YDWB/ecpg.xml:8697(para) 
msgid "On success, 0 is returned and a negative value if an error occurred."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2508(para) 
msgid "<literal>dd</literal> - The number of the day of the month."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2513(para) 
msgid "<literal>mm</literal> - The number of the month of the year."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2518(para) 
msgid "<literal>yy</literal> - The number of the year as a two digit number."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2523(para) 
msgid "<literal>yyyy</literal> - The number of the year as a four digit number."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2528(para) 
msgid "<literal>ddd</literal> - The name of the day (abbreviated)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2533(para) 
msgid "<literal>mmm</literal> - The name of the month (abbreviated)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2504(para) 
msgid "The following literals are the field specifiers you can use: <placeholder-1/> All other characters are copied 1:1 to the output string."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2540(para) 
msgid "<xref linkend=\"ecpg-pgtypesdate-fmt-asc-example-table\"/> indicates a few possible formats. This will give you an idea of how to use this function. All output lines are based on the same date: November 23, 1959."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2546(title) 
msgid "Valid Input Formats for <function>PGTYPESdate_fmt_asc</function>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2550(entry) /tmp/cicero-YDWB/ecpg.xml:2640(entry) 
msgid "Format"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2556(literal) /tmp/cicero-YDWB/ecpg.xml:2707(literal) 
msgid "mmddyy"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2557(literal) 
msgid "112359"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2560(literal) /tmp/cicero-YDWB/ecpg.xml:2647(literal) /tmp/cicero-YDWB/ecpg.xml:2652(literal) /tmp/cicero-YDWB/ecpg.xml:2657(literal) /tmp/cicero-YDWB/ecpg.xml:2662(literal) 
msgid "ddmmyy"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2561(literal) 
msgid "231159"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2564(literal) 
msgid "yymmdd"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2565(literal) 
msgid "591123"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2568(literal) /tmp/cicero-YDWB/ecpg.xml:2672(literal) /tmp/cicero-YDWB/ecpg.xml:2682(literal) /tmp/cicero-YDWB/ecpg.xml:2697(literal) 
msgid "yy/mm/dd"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2569(literal) 
msgid "59/11/23"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2572(literal) 
msgid "yy mm dd"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2573(literal) 
msgid "59 11 23"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2576(literal) 
msgid "yy.mm.dd"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2577(literal) 
msgid "59.11.23"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2580(literal) 
msgid ".mm.yyyy.dd."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2581(literal) 
msgid ".11.1959.23."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2584(literal) 
msgid "mmm. dd, yyyy"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2585(literal) 
msgid "Nov. 23, 1959"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2588(literal) 
msgid "mmm dd yyyy"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2589(literal) 
msgid "Nov 23 1959"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2592(literal) 
msgid "yyyy dd mm"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2593(literal) 
msgid "1959 23 11"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2596(literal) 
msgid "ddd, mmm. dd, yyyy"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2597(literal) 
msgid "Mon, Nov. 23, 1959"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2600(literal) 
msgid "(ddd) mmm. dd, yyyy"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2601(literal) 
msgid "(Mon) Nov. 23, 1959"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2610(function) 
msgid "PGTYPESdate_defmt_asc"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2612(para) 
msgid "Use a format mask to convert a C <type>char*</type> string to a value of type date. <synopsis>\nint PGTYPESdate_defmt_asc(date *d, char *fmt, char *str);\n</synopsis> The function receives a pointer to the date value that should hold the result of the operation (<literal>d</literal>), the format mask to use for parsing the date (<literal>fmt</literal>) and the C char* string containing the textual representation of the date (<literal>str</literal>). The textual representation is expected to match the format mask. However you do not need to have a 1:1 mapping of the string to the format mask. The function only analyzes the sequential order and looks for the literals <literal>yy</literal> or <literal>yyyy</literal> that indicate the position of the year, <literal>mm</literal> to indicate the position of the month and <literal>dd</literal> to indicate the position of the day."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2631(para) 
msgid "<xref linkend=\"ecpg-rdefmtdate-example-table\"/> indicates a few possible formats. This will give you an idea of how to use this function."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2636(title) 
msgid "Valid Input Formats for <function>rdefmtdate</function>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2641(entry) 
msgid "String"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2648(literal) 
msgid "21-2-54"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2649(literal) 
msgid "1954-02-21"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2653(literal) 
msgid "2-12-54"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2654(literal) 
msgid "1954-12-02"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2658(literal) 
msgid "20111954"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2659(literal) 
msgid "1954-11-20"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2663(literal) 
msgid "130464"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2664(literal) 
msgid "1964-04-13"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2667(literal) /tmp/cicero-YDWB/ecpg.xml:2677(literal) /tmp/cicero-YDWB/ecpg.xml:2692(literal) /tmp/cicero-YDWB/ecpg.xml:2702(literal) 
msgid "mmm.dd.yyyy"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2668(literal) 
msgid "MAR-12-1967"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2669(literal) 
msgid "1967-03-12"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2673(literal) 
msgid "1954, February 3rd"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2674(literal) 
msgid "1954-02-03"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2678(literal) 
msgid "041269"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2679(literal) 
msgid "1969-04-12"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2683(literal) 
msgid "In the year 2525, in the month of July, mankind will be alive on the 28th day"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2684(literal) /tmp/cicero-YDWB/ecpg.xml:2689(literal) 
msgid "2525-07-28"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2687(literal) 
msgid "dd-mm-yy"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2688(literal) 
msgid "I said on the 28th of July in the year 2525"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2693(literal) 
msgid "9/14/58"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2694(literal) 
msgid "1958-09-14"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2698(literal) 
msgid "47/03/29"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2699(literal) 
msgid "1947-03-29"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2703(literal) 
msgid "oct 28 1975"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2704(literal) 
msgid "1975-10-28"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2708(literal) 
msgid "Nov 14th, 1985"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2709(literal) 
msgid "1985-11-14"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2250(para) 
msgid "The following functions can be used to work with the date type: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2721(title) 
msgid "The timestamp Type"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2722(para) 
msgid "The timestamp type in C enables your programs to deal with data of the SQL type timestamp. See <xref linkend=\"datatype-datetime\"/> for the equivalent type in the <productname>PostgreSQL</productname> server."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2731(function) 
msgid "PGTYPEStimestamp_from_asc"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2733(para) 
msgid "Parse a timestamp from its textual representation into a timestamp variable. <synopsis>\ntimestamp PGTYPEStimestamp_from_asc(char *str, char **endptr);\n</synopsis> The function receives the string to parse (<literal>str</literal>) and a pointer to a C char* (<literal>endptr</literal>). At the moment ECPG always parses the complete string and so it currently does not support to store the address of the first invalid character in <literal>*endptr</literal>. You can safely set <literal>endptr</literal> to NULL."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2746(para) 
msgid "The function returns the parsed timestamp on success. On error, <literal>PGTYPESInvalidTimestamp</literal> is returned and <varname>errno</varname> is set to <literal>PGTYPES_TS_BAD_TIMESTAMP</literal>. See <xref linkend=\"pgtypesinvalidtimestamp\"/> for important notes on this value."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2751(para) 
msgid "In general, the input string can contain any combination of an allowed date specification, a whitespace character and an allowed time specification. Note that timezones are not supported by ECPG. It can parse them but does not apply any calculation as the <productname>PostgreSQL</productname> server does for example. Timezone specifiers are silently discarded."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2759(para) 
msgid "<xref linkend=\"ecpg-pgtypestimestamp-from-asc-example-table\"/> contains a few examples for input strings."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2763(title) 
msgid "Valid Input Formats for <function>PGTYPEStimestamp_from_asc</function>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2773(literal) /tmp/cicero-YDWB/ecpg.xml:2774(literal) /tmp/cicero-YDWB/ecpg.xml:2778(literal) 
msgid "1999-01-08 04:05:06"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2777(literal) 
msgid "January 8 04:05:06 1999 PST"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2781(literal) 
msgid "1999-Jan-08 04:05:06.789-8"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2782(literal) 
msgid "1999-01-08 04:05:06.789 (time zone specifier ignored)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2785(literal) 
msgid "J2451187 04:05-08:00"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2786(literal) 
msgid "1999-01-08 04:05:00 (time zone specifier ignored)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2795(function) 
msgid "PGTYPEStimestamp_to_asc"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2797(para) 
msgid "Converts a date to a C char* string. <synopsis>\nchar *PGTYPEStimestamp_to_asc(timestamp tstamp);\n</synopsis> The function receives the timestamp <literal>tstamp</literal> as its only argument and returns an allocated string that contains the textual representation of the timestamp."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2810(function) 
msgid "PGTYPEStimestamp_current"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2812(para) 
msgid "Retrieve the current timestamp. <synopsis>\nvoid PGTYPEStimestamp_current(timestamp *ts);\n</synopsis> The function retrieves the current timestamp and saves it into the timestamp variable that <literal>ts</literal> points to."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2824(function) 
msgid "PGTYPEStimestamp_fmt_asc"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2826(para) 
msgid "Convert a timestamp variable to a C char* using a format mask. <synopsis>\nint PGTYPEStimestamp_fmt_asc(timestamp *ts, char *output, int str_len, char *fmtstr);\n</synopsis> The function receives a pointer to the timestamp to convert as its first argument (<literal>ts</literal>), a pointer to the output buffer (<literal>output</literal>), the maximal length that has been allocated for the output buffer (<literal>str_len</literal>) and the format mask to use for the conversion (<literal>fmtstr</literal>)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2837(para) /tmp/cicero-YDWB/ecpg.xml:3172(para) /tmp/cicero-YDWB/ecpg.xml:3219(para) /tmp/cicero-YDWB/ecpg.xml:3239(para) /tmp/cicero-YDWB/ecpg.xml:8865(para) /tmp/cicero-YDWB/ecpg.xml:8886(para) /tmp/cicero-YDWB/ecpg.xml:8907(para) /tmp/cicero-YDWB/ecpg.xml:8933(para) 
msgid "Upon success, the function returns 0 and a negative value if an error occurred."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2851(para) 
msgid "<literal>%A</literal> - is replaced by national representation of the full weekday name."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2857(para) 
msgid "<literal>%a</literal> - is replaced by national representation of the abbreviated weekday name."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2863(para) 
msgid "<literal>%B</literal> - is replaced by national representation of the full month name."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2869(para) 
msgid "<literal>%b</literal> - is replaced by national representation of the abbreviated month name."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2875(para) 
msgid "<literal>%C</literal> - is replaced by (year / 100) as decimal number; single digits are preceded by a zero."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2881(para) 
msgid "<literal>%c</literal> - is replaced by national representation of time and date."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2887(para) 
msgid "<literal>%D</literal> - is equivalent to <literal>%m/%d/%y</literal>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2893(para) 
msgid "<literal>%d</literal> - is replaced by the day of the month as a decimal number (01-31)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2899(para) 
msgid "<literal>%E*</literal><literal>%O*</literal> - POSIX locale extensions. The sequences <literal>%Ec</literal><literal>%EC</literal><literal>%Ex</literal><literal>%EX</literal><literal>%Ey</literal><literal>%EY</literal><literal>%Od</literal><literal>%Oe</literal><literal>%OH</literal><literal>%OI</literal><literal>%Om</literal><literal>%OM</literal><literal>%OS</literal><literal>%Ou</literal><literal>%OU</literal><literal>%OV</literal><literal>%Ow</literal><literal>%OW</literal><literal>%Oy</literal> are supposed to provide alternative representations."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2923(para) 
msgid "Additionally <literal>%OB</literal> implemented to represent alternative months names (used standalone, without day mentioned)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2929(para) 
msgid "<literal>%e</literal> - is replaced by the day of month as a decimal number (1-31); single digits are preceded by a blank."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2935(para) 
msgid "<literal>%F</literal> - is equivalent to <literal>%Y-%m-%d</literal>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2940(para) 
msgid "<literal>%G</literal> - is replaced by a year as a decimal number with century. This year is the one that contains the greater part of the week (Monday as the first day of the week)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2947(para) 
msgid "<literal>%g</literal> - is replaced by the same year as in <literal>%G</literal>, but as a decimal number without century (00-99)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2954(para) 
msgid "<literal>%H</literal> - is replaced by the hour (24-hour clock) as a decimal number (00-23)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2960(para) 
msgid "<literal>%h</literal> - the same as <literal>%b</literal>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2965(para) 
msgid "<literal>%I</literal> - is replaced by the hour (12-hour clock) as a decimal number (01-12)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2971(para) 
msgid "<literal>%j</literal> - is replaced by the day of the year as a decimal number (001-366)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2977(para) 
msgid "<literal>%k</literal> - is replaced by the hour (24-hour clock) as a decimal number (0-23); single digits are preceded by a blank."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2983(para) 
msgid "<literal>%l</literal> - is replaced by the hour (12-hour clock) as a decimal number (1-12); single digits are preceded by a blank."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2989(para) 
msgid "<literal>%M</literal> - is replaced by the minute as a decimal number (00-59)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2995(para) 
msgid "<literal>%m</literal> - is replaced by the month as a decimal number (01-12)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3001(para) 
msgid "<literal>%n</literal> - is replaced by a newline."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3006(para) 
msgid "<literal>%O*</literal> - the same as <literal>%E*</literal>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3011(para) 
msgid "<literal>%p</literal> - is replaced by national representation of either <quote>ante meridiem</quote> or <quote>post meridiem</quote> as appropriate."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3017(para) 
msgid "<literal>%R</literal> - is equivalent to <literal>%H:%M</literal>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3022(para) 
msgid "<literal>%r</literal> - is equivalent to <literal>%I:%M:%S %p</literal>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3028(para) 
msgid "<literal>%S</literal> - is replaced by the second as a decimal number (00-60)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3034(para) 
msgid "<literal>%s</literal> - is replaced by the number of seconds since the Epoch, UTC."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3040(para) 
msgid "<literal>%T</literal> - is equivalent to <literal>%H:%M:%S</literal>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3045(para) 
msgid "<literal>%t</literal> - is replaced by a tab."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3050(para) 
msgid "<literal>%U</literal> - is replaced by the week number of the year (Sunday as the first day of the week) as a decimal number (00-53)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3056(para) 
msgid "<literal>%u</literal> - is replaced by the weekday (Monday as the first day of the week) as a decimal number (1-7)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3062(para) 
msgid "<literal>%V</literal> - is replaced by the week number of the year (Monday as the first day of the week) as a decimal number (01-53). If the week containing January 1 has four or more days in the new year, then it is week 1; otherwise it is the last week of the previous year, and the next week is week 1."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3071(para) 
msgid "<literal>%v</literal> - is equivalent to <literal>%e-%b-%Y</literal>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3077(para) 
msgid "<literal>%W</literal> - is replaced by the week number of the year (Monday as the first day of the week) as a decimal number (00-53)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3083(para) 
msgid "<literal>%w</literal> - is replaced by the weekday (Sunday as the first day of the week) as a decimal number (0-6)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3089(para) 
msgid "<literal>%X</literal> - is replaced by national representation of the time."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3095(para) 
msgid "<literal>%x</literal> - is replaced by national representation of the date."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3101(para) 
msgid "<literal>%Y</literal> - is replaced by the year with century as a decimal number."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3107(para) 
msgid "<literal>%y</literal> - is replaced by the year without century as a decimal number (00-99)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3113(para) 
msgid "<literal>%Z</literal> - is replaced by the time zone name."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3118(para) 
msgid "<literal>%z</literal> - is replaced by the time zone offset from UTC; a leading plus sign stands for east of UTC, a minus sign for west of UTC, hours and minutes follow with two digits each and no delimiter between them (common form for RFC 822 date headers)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3126(para) 
msgid "<literal>%+</literal> - is replaced by national representation of the date and time."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3132(para) 
msgid "<literal>%-*</literal> - GNU libc extension. Do not do any padding when performing numerical outputs."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3138(para) 
msgid "$_* - GNU libc extension. Explicitly specify space for padding."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3143(para) 
msgid "<literal>%0*</literal> - GNU libc extension. Explicitly specify zero for padding."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3149(para) 
msgid "<literal>%%</literal> - is replaced by <literal>%</literal>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2841(para) 
msgid "You can use the following format specifiers for the format mask. The format specifiers are the same ones that are used in the <function>strftime</function> function in <productname>libc</productname>. Any non-format specifier will be copied into the output buffer. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3159(function) 
msgid "PGTYPEStimestamp_sub"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3161(para) 
msgid "Subtract one timestamp from another one and save the result in a variable of type interval. <synopsis>\nint PGTYPEStimestamp_sub(timestamp *ts1, timestamp *ts2, interval *iv);\n</synopsis> The function will subtract the timestamp variable that <literal>ts2</literal> points to from the timestamp variable that <literal>ts1</literal> points to and will store the result in the interval variable that <literal>iv</literal> points to."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3180(function) 
msgid "PGTYPEStimestamp_defmt_asc"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3182(para) 
msgid "Parse a timestamp value from its textual representation using a formatting mask. <synopsis>\nint PGTYPEStimestamp_defmt_asc(char *str, char *fmt, timestamp *d);\n</synopsis> The function receives the textual representation of a timestamp in the variable <literal>str</literal> as well as the formatting mask to use in the variable <literal>fmt</literal>. The result will be stored in the variable that <literal>d</literal> points to."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3193(para) 
msgid "If the formatting mask <literal>fmt</literal> is NULL, the function will fall back to the default formatting mask which is <literal>%Y-%m-%d %H:%M:%S</literal>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3198(para) 
msgid "This is the reverse function to <xref linkend=\"pgtypestimestampfmtasc\"/>. See the documentation there in order to find out about the possible formatting mask entries."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3207(function) 
msgid "PGTYPEStimestamp_add_interval"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3209(para) 
msgid "Add an interval variable to a timestamp variable. <synopsis>\nint PGTYPEStimestamp_add_interval(timestamp *tin, interval *span, timestamp *tout);\n</synopsis> The function receives a pointer to a timestamp variable <literal>tin</literal> and a pointer to an interval variable <literal>span</literal>. It adds the interval to the timestamp and saves the resulting timestamp in the variable that <literal>tout</literal> points to."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3227(function) 
msgid "PGTYPEStimestamp_sub_interval"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3229(para) 
msgid "Subtract an interval variable from a timestamp variable. <synopsis>\nint PGTYPEStimestamp_sub_interval(timestamp *tin, interval *span, timestamp *tout);\n</synopsis> The function subtracts the interval variable that <literal>span</literal> points to from the timestamp variable that <literal>tin</literal> points to and saves the result into the variable that <literal>tout</literal> points to."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:2727(para) 
msgid "The following functions can be used to work with the timestamp type: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3250(title) 
msgid "The interval Type"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3251(para) 
msgid "The interval type in C enables your programs to deal with data of the SQL type interval. See <xref linkend=\"datatype-datetime\"/> for the equivalent type in the <productname>PostgreSQL</productname> server."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3261(function) 
msgid "PGTYPESinterval_new"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3263(para) 
msgid "Return a pointer to a newly allocated interval variable. <synopsis>\ninterval *PGTYPESinterval_new(void);\n</synopsis>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3273(function) 
msgid "PGTYPESinterval_free"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3275(para) 
msgid "Release the memory of a previously allocated interval variable. <synopsis>\nvoid PGTYPESinterval_new(interval *intvl);\n</synopsis>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3285(function) 
msgid "PGTYPESinterval_from_asc"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3287(para) 
msgid "Parse an interval from its textual representation. <synopsis>\ninterval *PGTYPESinterval_from_asc(char *str, char **endptr);\n</synopsis> The function parses the input string <literal>str</literal> and returns a pointer to an allocated interval variable. At the moment ECPG always parses the complete string and so it currently does not support to store the address of the first invalid character in <literal>*endptr</literal>. You can safely set <literal>endptr</literal> to NULL."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3303(function) 
msgid "PGTYPESinterval_to_asc"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3305(para) 
msgid "Convert a variable of type interval to its textual representation. <synopsis>\nchar *PGTYPESinterval_to_asc(interval *span);\n</synopsis> The function converts the interval variable that <literal>span</literal> points to into a C char*. The output looks like this example: <literal>@ 1 day 12 hours 59 mins 10 secs</literal>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3318(function) 
msgid "PGTYPESinterval_copy"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3320(para) 
msgid "Copy a variable of type interval. <synopsis>\nint PGTYPESinterval_copy(interval *intvlsrc, interval *intvldest);\n</synopsis> The function copies the interval variable that <literal>intvlsrc</literal> points to into the variable that <literal>intvldest</literal> points to. Note that you need to allocate the memory for the destination variable before."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3256(para) 
msgid "The following functions can be used to work with the interval type: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3337(title) 
msgid "The decimal Type"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3338(para) 
msgid "The decimal type is similar to the numeric type. However it is limited to a maximum precision of 30 significant digits. In contrast to the numeric type which can be created on the heap only, the decimal type can be created either on the stack or on the heap (by means of the functions <function>PGTYPESdecimal_new</function> and <function>PGTYPESdecimal_free</function>). There are a lot of other functions that deal with the decimal type in the <productname>Informix</productname> compatibility mode described in <xref linkend=\"ecpg-informix-compat\"/>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3354(function) 
msgid "PGTYPESdecimal_new"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3356(para) 
msgid "Request a pointer to a newly allocated decimal variable. <synopsis>\ndecimal *PGTYPESdecimal_new(void);\n</synopsis>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3366(function) 
msgid "PGTYPESdecimal_free"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3368(para) 
msgid "Free a decimal type, release all of its memory. <synopsis>\nvoid PGTYPESdecimal_free(decimal *var);\n</synopsis>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3349(para) 
msgid "The following functions can be used to work with the decimal type and are not only contained in the <literal>libcompat</literal> library. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3381(title) 
msgid "errno Values of pgtypeslib"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3385(literal) 
msgid "PGTYPES_NUM_BAD_NUMERIC"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3387(para) 
msgid "An argument should contain a numeric variable (or point to a numeric variable) but in fact its in-memory representation was invalid."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3395(literal) 
msgid "PGTYPES_NUM_OVERFLOW"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3397(para) 
msgid "An overflow occurred. Since the numeric type can deal with almost arbitrary precision, converting a numeric variable into other types might cause overflow."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3406(literal) 
msgid "PGTYPES_NUM_UNDERFLOW"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3408(para) 
msgid "An underflow occurred. Since the numeric type can deal with almost arbitrary precision, converting a numeric variable into other types might cause underflow."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3417(literal) 
msgid "PGTYPES_NUM_DIVIDE_ZERO"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3419(para) 
msgid "A division by zero has been attempted."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3426(literal) 
msgid "PGTYPES_DATE_BAD_DATE"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3428(para) 
msgid "An invalid date string was passed to the <function>PGTYPESdate_from_asc</function> function."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3436(literal) 
msgid "PGTYPES_DATE_ERR_EARGS"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3438(para) 
msgid "Invalid arguments were passed to the <function>PGTYPESdate_defmt_asc</function> function."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3446(literal) 
msgid "PGTYPES_DATE_ERR_ENOSHORTDATE"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3448(para) 
msgid "An invalid token in the input string was found by the <function>PGTYPESdate_defmt_asc</function> function."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3456(literal) 
msgid "PGTYPES_INTVL_BAD_INTERVAL"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3458(para) 
msgid "An invalid interval string was passed to the <function>PGTYPESinterval_from_asc</function> function, or an invalid interval value was passed to the <function>PGTYPESinterval_to_asc</function> function."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3468(literal) 
msgid "PGTYPES_DATE_ERR_ENOTDMY"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3470(para) 
msgid "There was a mismatch in the day/month/year assignment in the <function>PGTYPESdate_defmt_asc</function> function."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3478(literal) 
msgid "PGTYPES_DATE_BAD_DAY"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3480(para) 
msgid "An invalid day of the month value was found by the <function>PGTYPESdate_defmt_asc</function> function."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3488(literal) 
msgid "PGTYPES_DATE_BAD_MONTH"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3490(para) 
msgid "An invalid month value was found by the <function>PGTYPESdate_defmt_asc</function> function."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3498(literal) 
msgid "PGTYPES_TS_BAD_TIMESTAMP"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3500(para) 
msgid "An invalid timestamp string pass passed to the <function>PGTYPEStimestamp_from_asc</function> function, or an invalid timestamp value was passed to the <function>PGTYPEStimestamp_to_asc</function> function."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3510(literal) 
msgid "PGTYPES_TS_ERR_EINFTIME"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3512(para) 
msgid "An infinite timestamp value was encountered in a context that cannot handle it."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3523(title) 
msgid "Special Constants of pgtypeslib"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3527(literal) 
msgid "PGTYPESInvalidTimestamp"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3529(para) 
msgid "A value of type timestamp representing an invalid time stamp. This is returned by the function <function>PGTYPEStimestamp_from_asc</function> on parse error. Note that due to the internal representation of the <type>timestamp</type> data type, <literal>PGTYPESInvalidTimestamp</literal> is also a valid timestamp at the same time. It is set to <literal>1899-12-31 23:59:59</literal>. In order to detect errors, make sure that your application does not only test for <literal>PGTYPESInvalidTimestamp</literal> but also for <literal>errno != 0</literal> after each call to <function>PGTYPEStimestamp_from_asc</function>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3549(title) 
msgid "Using Descriptor Areas"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3551(para) 
msgid "An SQL descriptor area is a more sophisticated method for processing the result of a <command>SELECT</command>, <command>FETCH</command> or a <command>DESCRIBE</command> statement. An SQL descriptor area groups the data of one row of data together with metadata items into one data structure. The metadata is particularly useful when executing dynamic SQL statements, where the nature of the result columns might not be known ahead of time. PostgreSQL provides two ways to use Descriptor Areas: the named SQL Descriptor Areas and the C-structure SQLDAs."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3564(title) 
msgid "Named SQL Descriptor Areas"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3566(para) 
msgid "A named SQL descriptor area consists of a header, which contains information concerning the entire descriptor, and one or more item descriptor areas, which basically each describe one column in the result row."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3575(programlisting) 
#, no-wrap
msgid "\nEXEC SQL ALLOCATE DESCRIPTOR <replaceable>identifier</replaceable>;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3582(programlisting) 
#, no-wrap
msgid "\nEXEC SQL DEALLOCATE DESCRIPTOR <replaceable>identifier</replaceable>;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3573(para) 
msgid "Before you can use an SQL descriptor area, you need to allocate one: <placeholder-1/> The identifier serves as the <quote>variable name</quote> of the descriptor area. <remark>The scope of the allocated descriptor is WHAT?.</remark> When you don't need the descriptor anymore, you should deallocate it: <placeholder-2/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3590(programlisting) 
#, no-wrap
msgid "\nEXEC SQL FETCH NEXT FROM mycursor INTO SQL DESCRIPTOR mydesc;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3587(para) 
msgid "To use a descriptor area, specify it as the storage target in an <literal>INTO</literal> clause, instead of listing host variables: <placeholder-1/> If the result set is empty, the Descriptor Area will still contain the metadata from the query, i.e. the field names."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3600(programlisting) 
#, no-wrap
msgid "\nEXEC SQL BEGIN DECLARE SECTION;\nchar *sql_stmt = \"SELECT * FROM table1\";\nEXEC SQL END DECLARE SECTION;\n\nEXEC SQL PREPARE stmt1 FROM :sql_stmt;\nEXEC SQL DESCRIBE stmt1 INTO SQL DESCRIPTOR mydesc;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3597(para) 
msgid "For not yet executed prepared queries, the <command>DESCRIBE</command> statement can be used to get the metadata of the result set: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3610(para) 
msgid "Before PostgreSQL 9.0, the <literal>SQL</literal> keyword was optional, so using <literal>DESCRIPTOR</literal> and <literal>SQL DESCRIPTOR</literal> produced named SQL Descriptor Areas. Now it is mandatory, omitting the <literal>SQL</literal> keyword produces SQLDA Descriptor Areas, see <xref linkend=\"ecpg-sqlda-descriptors\"/>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3618(para) 
msgid "In <command>DESCRIBE</command> and <command>FETCH</command> statements, the <literal>INTO</literal> and <literal>USING</literal> keywords can be used to similarly: they produce the result set and the metadata in a Descriptor Area."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3630(programlisting) 
#, no-wrap
msgid "\nEXEC SQL GET DESCRIPTOR <replaceable>name</replaceable> :<replaceable>hostvar</replaceable> = <replaceable>field</replaceable>;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3639(programlisting) 
#, no-wrap
msgid "\nEXEC SQL GET DESCRIPTOR <replaceable>name</replaceable> VALUE <replaceable>num</replaceable> :<replaceable>hostvar</replaceable> = <replaceable>field</replaceable>;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3647(term) 
msgid "<literal>CARDINALITY</literal> (integer)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3649(para) 
msgid "number of rows in the result set"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3656(literal) 
msgid "DATA"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3658(para) 
msgid "actual data item (therefore, the data type of this field depends on the query)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3666(term) 
msgid "<literal>DATETIME_INTERVAL_CODE</literal> (integer)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3668(para) 
msgid "When <literal>TYPE</literal> is <literal>9</literal>, <literal>DATETIME_INTERVAL_CODE</literal> will have a value of <literal>1</literal> for <literal>DATE</literal>, <literal>2</literal> for <literal>TIME</literal>, <literal>3</literal> for <literal>TIMESTAMP</literal>, <literal>4</literal> for <literal>TIME WITH TIME ZONE</literal>, or <literal>5</literal> for <literal>TIMESTAMP WITH TIME ZONE</literal>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3681(term) 
msgid "<literal>DATETIME_INTERVAL_PRECISION</literal> (integer)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3683(para) /tmp/cicero-YDWB/ecpg.xml:3701(para) /tmp/cicero-YDWB/ecpg.xml:3728(para) 
msgid "not implemented"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3690(term) 
msgid "<literal>INDICATOR</literal> (integer)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3692(para) 
msgid "the indicator (indicating a null value or a value truncation)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3699(term) 
msgid "<literal>KEY_MEMBER</literal> (integer)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3708(term) 
msgid "<literal>LENGTH</literal> (integer)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3710(para) /tmp/cicero-YDWB/ecpg.xml:3755(para) 
msgid "length of the datum in characters"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3717(term) 
msgid "<literal>NAME</literal> (string)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3719(para) 
msgid "name of the column"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3726(term) 
msgid "<literal>NULLABLE</literal> (integer)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3735(term) 
msgid "<literal>OCTET_LENGTH</literal> (integer)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3737(para) /tmp/cicero-YDWB/ecpg.xml:3764(para) 
msgid "length of the character representation of the datum in bytes"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3744(term) 
msgid "<literal>PRECISION</literal> (integer)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3746(para) 
msgid "precision (for type <type>numeric</type>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3753(term) 
msgid "<literal>RETURNED_LENGTH</literal> (integer)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3762(term) 
msgid "<literal>RETURNED_OCTET_LENGTH</literal> (integer)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3771(term) 
msgid "<literal>SCALE</literal> (integer)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3773(para) 
msgid "scale (for type <type>numeric</type>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3780(term) 
msgid "<literal>TYPE</literal> (integer)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3782(para) 
msgid "numeric code of the data type of the column"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3625(para) 
msgid "Now how do you get the data out of the descriptor area? You can think of the descriptor area as a structure with named fields. To retrieve the value of a field from the header and store it into a host variable, use the following command: <placeholder-1/> Currently, there is only one header field defined: <replaceable>COUNT</replaceable>, which tells how many item descriptor areas exist (that is, how many columns are contained in the result). The host variable needs to be of an integer type. To get a field from the item descriptor area, use the following command: <placeholder-2/><replaceable>num</replaceable> can be a literal integer or a host variable containing an integer. Possible fields are: <placeholder-3/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3798(programlisting) 
#, no-wrap
msgid "\nEXEC SQL SET DESCRIPTOR <replaceable>name</replaceable> VALUE <replaceable>num</replaceable> <replaceable>field</replaceable> = :<replaceable>hostvar</replaceable>;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3790(para) 
msgid "In <command>EXECUTE</command>, <command>DECLARE</command> and <command>OPEN</command> statements, the effect of the <literal>INTO</literal> and <literal>USING</literal> keywords are different. A Descriptor Area can also be manually built to provide the input parameters for a query or a cursor and <literal>USING SQL DESCRIPTOR <replaceable>name</replaceable></literal> is the way to pass the input parameters into a parametrized query. The statement to build a named SQL Descriptor Area is below: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3807(programlisting) 
#, no-wrap
msgid "\nEXEC SQL BEGIN DECLARE SECTION;\nint id[5];\nEXEC SQL END DECLARE SECTION;\n\nEXEC SQL FETCH 5 FROM mycursor INTO SQL DESCRIPTOR mydesc;\n\nEXEC SQL GET DESCRIPTOR mydesc VALUE 1 :id = DATA;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3803(para) 
msgid "PostgreSQL supports retrieving more that one record in one <command>FETCH</command> statement and storing the data in host variables in this case assumes that the variable is an array. E.g.: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3822(title) 
msgid "SQLDA Descriptor Areas"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3828(programlisting) 
#, no-wrap
msgid "\nEXEC SQL include sqlda.h;\nsqlda_t         *mysqlda;\n\nEXEC SQL FETCH 3 FROM mycursor INTO DESCRIPTOR mysqlda;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3839(programlisting) 
#, no-wrap
msgid "\nEXEC SQL DESCRIBE prepared_statement INTO mysqlda;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3824(para) 
msgid "An SQLDA Descriptor Area is a C language structure which can be also used to get the result set and the metadata of a query. One structure stores one record from the result set. <placeholder-1/> Note that the <literal>SQL</literal> keyword is omitted. The paragraphs about the use cases of the <literal>INTO</literal> and <literal>USING</literal> keywords in <xref linkend=\"ecpg-named-descriptors\"/> also apply here with an addition. In a <command>DESCRIBE</command> statement the <literal>DESCRIPTOR</literal> keyword can be completely omitted if the <literal>INTO</literal> keyword is used: <placeholder-2/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3845(para) 
msgid "The general flow of a program that uses SQLDA is:"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3848(simpara) 
msgid "Prepare a query, and declare a cursor for it."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3849(simpara) 
msgid "Declare an SQLDA for the result rows."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3850(simpara) 
msgid "Declare an SQLDA for the input parameters, and initialize them (memory allocation, parameter settings)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3851(simpara) 
msgid "Open a cursor with the input SQLDA."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3852(simpara) 
msgid "Fetch rows from the cursor, and store them into an output SQLDA."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3853(simpara) 
msgid "Read values from the output SQLDA into the host variables (with conversion if necessary)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3854(simpara) 
msgid "Close the cursor."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3855(simpara) 
msgid "Free the memory area allocated for the input SQLDA."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3859(title) 
msgid "SQLDA Data Structure"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3861(para) 
msgid "SQLDA uses three data structure types: <type>sqlda_t</type>, <type>sqlvar_t</type>, and <type>struct sqlname</type>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3868(para) 
msgid "PostgreSQL's SQLDA has a similar data structure to the one in IBM DB2 Universal Database, so some technical information on DB2's SQLDA could help understanding PostgreSQL's one better."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3876(title) 
msgid "sqlda_t Structure"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3878(para) 
msgid "The structure type <type>sqlda_t</type> is the type of the actual SQLDA. It holds one record. And two or more <type>sqlda_t</type> structures can be connected in a linked list with the pointer in the <structfield>desc_next</structfield> field, thus representing an ordered collection of rows. So, when two or more rows are fetched, the application can read them by following the <structfield>desc_next</structfield> pointer in each <type>sqlda_t</type> node."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3892(programlisting) 
#, no-wrap
msgid "\nstruct sqlda_struct\n{\n    char            sqldaid[8];\n    long            sqldabc;\n    short           sqln;\n    short           sqld;\n    struct sqlda_struct *desc_next;\n    struct sqlvar_struct sqlvar[1];\n};\n\ntypedef struct sqlda_struct sqlda_t;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3910(literal) 
msgid "sqldaid"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3912(para) 
msgid "It contains the literal string <literal>\"SQLDA \"</literal>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3919(literal) 
msgid "sqldabc"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3921(para) 
msgid "It contains the size of the allocated space in bytes."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3928(literal) 
msgid "sqln"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3930(para) 
msgid "It contains the number of input parameters for a parametrized query case it's passed into <command>OPEN</command>, <command>DECLARE</command> or <command>EXECUTE</command> statements using the <literal>USING</literal> keyword. In case it's used as output of <command>SELECT</command>, <command>EXECUTE</command> or <command>FETCH</command> statements, its value is the same as <literal>sqld</literal> statement"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3943(literal) /tmp/cicero-YDWB/ecpg.xml:7954(literal) 
msgid "sqld"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3945(para) 
msgid "It contains the number of fields in a result set."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3952(literal) /tmp/cicero-YDWB/ecpg.xml:7990(literal) 
msgid "desc_next"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3954(para) 
msgid "If the query returns more than one record, multiple linked SQLDA structures are returned, and <literal>desc_next</literal> holds a pointer to the next entry in the list."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3962(literal) /tmp/cicero-YDWB/ecpg.xml:7963(literal) 
msgid "sqlvar"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3964(para) 
msgid "This is the array of the columns in the result set."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3890(para) 
msgid "The definition of <type>sqlda_t</type> is: <placeholder-1/> The meaning of the fields is: <placeholder-2/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3974(title) 
msgid "sqlvar_t Structure"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3981(programlisting) 
#, no-wrap
msgid "\nstruct sqlvar_struct\n{\n    short          sqltype;\n    short          sqllen;\n    char          *sqldata;\n    short         *sqlind;\n    struct sqlname sqlname;\n};\n\ntypedef struct sqlvar_struct sqlvar_t;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3998(literal) /tmp/cicero-YDWB/ecpg.xml:8014(literal) 
msgid "sqltype"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4000(para) 
msgid "Contains the type identifier of the field. For values, see <literal>enum ECPGttype</literal> in <literal>ecpgtype.h</literal>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4008(literal) /tmp/cicero-YDWB/ecpg.xml:8023(literal) 
msgid "sqllen"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4010(para) 
msgid "Contains the binary length of the field. e.g. 4 bytes for <type>ECPGt_int</type>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4017(literal) /tmp/cicero-YDWB/ecpg.xml:8032(literal) 
msgid "sqldata"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4019(para) 
msgid "Points to the data. The format of the data is described in <xref linkend=\"ecpg-variables-type-mapping\"/>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4027(literal) /tmp/cicero-YDWB/ecpg.xml:8053(literal) 
msgid "sqlind"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4029(para) 
msgid "Points to the null indicator. 0 means not null, -1 means null."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4037(literal) /tmp/cicero-YDWB/ecpg.xml:8069(literal) 
msgid "sqlname"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4039(para) 
msgid "The the name of the field."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:3976(para) 
msgid "The structure type <type>sqlvar_t</type> holds a column value and metadata such as type and length. The definition of the type is: <placeholder-1/> The meaning of the fields is: <placeholder-2/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4049(title) 
msgid "struct sqlname Structure"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4055(programlisting) 
#, no-wrap
msgid "\n#define NAMEDATALEN 64\n\nstruct sqlname\n{\n        short           length;\n        char            data[NAMEDATALEN];\n};\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4067(literal) 
msgid "length"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4069(para) 
msgid "Contains the length of the field name."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4075(literal) 
msgid "data"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4077(para) 
msgid "Contains the actual field name."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4051(para) 
msgid "A <type>struct sqlname</type> structure holds a column name. It is used as a member of the <type>sqlvar_t</type> structure. The definition of the structure is: <placeholder-1/> The meaning of the fields is: <placeholder-2/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4088(title) 
msgid "Retrieving a Result Set Using an SQLDA"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4091(para) 
msgid "The general steps to retrieve a query result set through an SQLDA are:"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4095(simpara) 
msgid "Declare an <type>sqlda_t</type> structure to receive the result set."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4096(simpara) 
msgid "Execute <command>FETCH</command>/<command>EXECUTE</command>/<command>DESCRIBE</command> commands to process a query specifying the declared SQLDA."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4097(simpara) 
msgid "Check the number of records in the result set by looking at <structfield>sqln</structfield>, a member of the <type>sqlda_t</type> structure."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4098(simpara) 
msgid "Get the values of each column from <literal>sqlvar[0]</literal>, <literal>sqlvar[1]</literal>, etc., members of the <type>sqlda_t</type> structure."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4099(simpara) 
msgid "Go to next row (<type>sqlda_t</type> structure) by following the <structfield>desc_next</structfield> pointer, a member of the <type>sqlda_t</type> structure."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4100(simpara) 
msgid "Repeat above as you need."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4103(para) 
msgid "Here is an example retrieving a result set through an SQLDA."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4109(programlisting) 
#, no-wrap
msgid "\nsqlda_t *sqlda1;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4107(para) 
msgid "First, declare a <type>sqlda_t</type> structure to receive the result set. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4117(programlisting) 
#, no-wrap
msgid "\nEXEC SQL FETCH NEXT FROM cur1 INTO DESCRIPTOR sqlda1;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4114(para) 
msgid "Next, specify the SQLDA in a command. This is a <command>FETCH</command> command example. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4124(programlisting) 
#, no-wrap
msgid "\nsqlda_t *cur_sqlda;\n\nfor (cur_sqlda = sqlda1;\n     cur_sqlda != NULL;\n     cur_sqlda = cur_sqlda-&gt;desc_next)\n{\n    ...\n}\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4122(para) 
msgid "Run a loop following the linked list to retrieve the rows. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4139(programlisting) 
#, no-wrap
msgid "\nfor (i = 0; i &lt; cur_sqlda-&gt;sqld; i++)\n{\n    sqlvar_t v = cur_sqlda-&gt;sqlvar[i];\n    char *sqldata = v.sqldata;\n    short sqllen  = v.sqllen;\n    ...\n}\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4136(para) 
msgid "Inside the loop, run another loop to retrieve each column data (<type>sqlvar_t</type> structure) of the row. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4155(programlisting) 
#, no-wrap
msgid "\nchar var_buf[1024];\n\nswitch (v.sqltype)\n{\n    case ECPGt_char:\n        memset(&amp;var_buf, 0, sizeof(var_buf));\n        memcpy(&amp;var_buf, sqldata, (sizeof(var_buf) &lt;= sqllen ? sizeof(var_buf) - 1 : sqllen));\n        break;\n\n    case ECPGt_int: /* integer */\n        memcpy(&amp;intval, sqldata, sqllen);\n        snprintf(var_buf, sizeof(var_buf), \"%d\", intval);\n        break;\n\n    ...\n}\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4150(para) 
msgid "To get a column value, check the <structfield>sqltype</structfield> value, a member of the <type>sqlvar_t</type> structure. Then, switch to an appropriate way, depending on the column type, to copy data from the <structfield>sqlvar</structfield> field to a host variable. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4177(title) 
msgid "Passing Query Parameters Using an SQLDA"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4180(para) 
msgid "The general steps to use an SQLDA to pass input parameters to a prepared query are:"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4184(simpara) 
msgid "Create a prepared query (prepared statement)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4185(simpara) 
msgid "Declare a sqlda_t structure as an input SQLDA."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4186(simpara) 
msgid "Allocate memory area (as sqlda_t structure) for the input SQLDA."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4187(simpara) 
msgid "Set (copy) input values in the allocated memory."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4188(simpara) 
msgid "Open a cursor with specifying the input SQLDA."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4191(para) 
msgid "Here is an example."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4197(programlisting) 
#, no-wrap
msgid "\nEXEC SQL BEGIN DECLARE SECTION;\nchar query[1024] = \"SELECT d.oid, * FROM pg_database d, pg_stat_database s WHERE d.oid = s.datid AND (d.datname = ? OR d.oid = ?)\";\nEXEC SQL END DECLARE SECTION;\n\nEXEC SQL PREPARE stmt1 FROM :query;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4195(para) 
msgid "First, create a prepared statement. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4214(programlisting) 
#, no-wrap
msgid "\nsqlda_t *sqlda2;\n\nsqlda2 = (sqlda_t *) malloc(sizeof(sqlda_t) + sizeof(sqlvar_t));\nmemset(sqlda2, 0, sizeof(sqlda_t) + sizeof(sqlvar_t));\n\nsqlda2-&gt;sqln = 2; /* number of input variables */\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4206(para) 
msgid "Next, allocate memory for an SQLDA, and set the number of input parameters in <structfield>sqln</structfield>, a member variable of the <type>sqlda_t</type> structure. When two or more input parameters are required for the prepared query, the application has to allocate additional memory space which is calculated by (nr. of params - 1) * sizeof(sqlvar_t). The example shown here allocates memory space for two input parameters. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4231(programlisting) 
#, no-wrap
msgid "\nsqlda2-&gt;sqlvar[0].sqltype = ECPGt_char;\nsqlda2-&gt;sqlvar[0].sqldata = \"postgres\";\nsqlda2-&gt;sqlvar[0].sqllen  = 8;\n\nint intval = 1;\nsqlda2-&gt;sqlvar[1].sqltype = ECPGt_int;\nsqlda2-&gt;sqlvar[1].sqldata = (char *) &amp;intval;\nsqlda2-&gt;sqlvar[1].sqllen  = sizeof(intval);\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4224(para) 
msgid "After memory allocation, store the parameter values into the <literal>sqlvar[]</literal> array. (This is same array used for retrieving column values when the SQLDA is receiving a result set.) In this example, the input parameters are <literal>\"postgres\"</literal>, having a string type, and <literal>1</literal>, having an integer type. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4247(programlisting) 
#, no-wrap
msgid "\nEXEC SQL OPEN cur1 USING DESCRIPTOR sqlda2;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4243(para) 
msgid "By opening a cursor and specifying the SQLDA that was set up beforehand, the input parameters are passed to the prepared statement. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4256(programlisting) 
#, no-wrap
msgid "\nfree(sqlda2);\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4252(para) 
msgid "Finally, after using input SQLDAs, the allocated memory space must be freed explicitly, unlike SQLDAs used for receiving query results. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4263(title) 
msgid "A Sample Application Using SQLDA"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4265(para) 
msgid "Here is an example program, which describes how to fetch access statistics of the databases, specified by the input parameters, from the system catalogs."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4271(para) 
msgid "This application joins two system tables, pg_database and pg_stat_database on the database OID, and also fetches and shows the database statistics which are retrieved by two input parameters (a database <literal>postgres</literal>, and OID <literal>1</literal>)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4280(programlisting) 
#, no-wrap
msgid "\nEXEC SQL include sqlda.h;\n\nsqlda_t *sqlda1; /* an output descriptor */\nsqlda_t *sqlda2; /* an input descriptor  */\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4278(para) 
msgid "First, declare an SQLDA for input and an SQLDA for output. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4291(programlisting) 
#, no-wrap
msgid "\nint\nmain(void)\n{\n    EXEC SQL BEGIN DECLARE SECTION;\n    char query[1024] = \"SELECT d.oid,* FROM pg_database d, pg_stat_database s WHERE d.oid=s.datid AND ( d.datname=? OR d.oid=? )\";\n    EXEC SQL END DECLARE SECTION;\n\n    EXEC SQL CONNECT TO testdb AS con1 USER testuser;\n\n    EXEC SQL PREPARE stmt1 FROM :query;\n    EXEC SQL DECLARE cur1 CURSOR FOR stmt1;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4288(para) 
msgid "Next, connect to the database, prepare a statement, and declare a cursor for the prepared statement. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4314(programlisting) 
#, no-wrap
msgid "\n    /* Create SQLDA structure for input parameters. */\n    sqlda2 = (sqlda_t *) malloc(sizeof(sqlda_t) + sizeof(sqlvar_t));\n    memset(sqlda2, 0, sizeof(sqlda_t) + sizeof(sqlvar_t));\n    sqlda2-&gt;sqln = 2; /* number of input variables */\n\n    sqlda2-&gt;sqlvar[0].sqltype = ECPGt_char;\n    sqlda2-&gt;sqlvar[0].sqldata = \"postgres\";\n    sqlda2-&gt;sqlvar[0].sqllen  = 8;\n\n    intval = 1;\n    sqlda2-&gt;sqlvar[1].sqltype = ECPGt_int;\n    sqlda2-&gt;sqlvar[1].sqldata = (char *)&amp;intval;\n    sqlda2-&gt;sqlvar[1].sqllen  = sizeof(intval);\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4306(para) 
msgid "Next, put some values in the input SQLDA for the input parameters. Allocate memory for the input SQLDA, and set the number of input parameters to <literal>sqln</literal>. Store type, value, and value length into <literal>sqltype</literal>, <literal>sqldata</literal>, and <literal>sqllen</literal> in the <literal>sqlvar</literal> structure. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4335(programlisting) 
#, no-wrap
msgid "\n    /* Open a cursor with input parameters. */\n    EXEC SQL OPEN cur1 USING DESCRIPTOR sqlda2;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4331(para) 
msgid "After setting up the input SQLDA, open a cursor with the input SQLDA. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4345(programlisting) 
#, no-wrap
msgid "\n    while (1)\n    {\n        sqlda_t *cur_sqlda;\n\n        /* Assign descriptor to the cursor  */\n        EXEC SQL FETCH NEXT FROM cur1 INTO DESCRIPTOR sqlda1;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4341(para) 
msgid "Fetch rows into the output SQLDA from the opened cursor. (Generally, you have to call <command>FETCH</command> repeatedly in the loop, to fetch all rows in the result set.) <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4358(programlisting) 
#, no-wrap
msgid "\n    for (cur_sqlda = sqlda1 ;\n         cur_sqlda != NULL ;\n         cur_sqlda = cur_sqlda-&gt;desc_next)\n    {\n        ...\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4355(para) 
msgid "Next, retrieve the fetched records from the SQLDA, by following the linked list of the <type>sqlda_t</type> structure. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4373(programlisting) 
#, no-wrap
msgid "\n        /* Print every column in a row. */\n        for (i = 0; i &lt; sqlda1-&gt;sqld; i++)\n        {\n            sqlvar_t v = sqlda1-&gt;sqlvar[i];\n            char *sqldata = v.sqldata;\n            short sqllen  = v.sqllen;\n\n            strncpy(name_buf, v.sqlname.data, v.sqlname.length);\n            name_buf[v.sqlname.length] = '\\0';\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4367(para) 
msgid "Read each columns in the first record. The number of columns is stored in <structfield>sqld</structfield>, the actual data of the first column is stored in <literal>sqlvar[0]</literal>, both members of the <type>sqlda_t</type> structure. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4390(programlisting) 
#, no-wrap
msgid "\n            switch (v.sqltype) {\n                int intval;\n                double doubleval;\n                unsigned long long int longlongval;\n\n                case ECPGt_char:\n                    memset(&amp;var_buf, 0, sizeof(var_buf));\n                    memcpy(&amp;var_buf, sqldata, (sizeof(var_buf) &lt;= sqllen ? sizeof(var_buf)-1 : sqllen));\n                    break;\n\n                case ECPGt_int: /* integer */\n                    memcpy(&amp;intval, sqldata, sqllen);\n                    snprintf(var_buf, sizeof(var_buf), \"%d\", intval);\n                    break;\n\n                ...\n\n                default:\n                    ...\n            }\n\n            printf(\"%s = %s (type: %d)\\n\", name_buf, var_buf, v.sqltype);\n        }\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4386(para) 
msgid "Now, the column data is stored in the variable <varname>v</varname>. Copy every datum into host variables, looking at <literal>v.sqltype</literal> for the type of the column. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4420(programlisting) 
#, no-wrap
msgid "\n    EXEC SQL CLOSE cur1;\n    EXEC SQL COMMIT;\n\n    EXEC SQL DISCONNECT ALL;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4417(para) 
msgid "Close the cursor after processing all of records, and disconnect from the database. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4428(para) 
msgid "The whole program is shown in <xref linkend=\"ecpg-sqlda-example-example\"/>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4434(title) 
msgid "Example SQLDA Program"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4435(programlisting) 
#, no-wrap
msgid "\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;unistd.h&gt;\n\nEXEC SQL include sqlda.h;\n\nsqlda_t *sqlda1; /* descriptor for output */\nsqlda_t *sqlda2; /* descriptor for input */\n\nEXEC SQL WHENEVER NOT FOUND DO BREAK;\nEXEC SQL WHENEVER SQLERROR STOP;\n\nint\nmain(void)\n{\n    EXEC SQL BEGIN DECLARE SECTION;\n    char query[1024] = \"SELECT d.oid,* FROM pg_database d, pg_stat_database s WHERE d.oid=s.datid AND ( d.datname=? OR d.oid=? )\";\n\n    int intval;\n    unsigned long long int longlongval;\n    EXEC SQL END DECLARE SECTION;\n\n    EXEC SQL CONNECT TO uptimedb AS con1 USER uptime;\n\n    EXEC SQL PREPARE stmt1 FROM :query;\n    EXEC SQL DECLARE cur1 CURSOR FOR stmt1;\n\n    /* Create a SQLDA structure for an input parameter */\n    sqlda2 = (sqlda_t *)malloc(sizeof(sqlda_t) + sizeof(sqlvar_t));\n    memset(sqlda2, 0, sizeof(sqlda_t) + sizeof(sqlvar_t));\n    sqlda2-&gt;sqln = 2; /* a number of input variables */\n\n    sqlda2-&gt;sqlvar[0].sqltype = ECPGt_char;\n    sqlda2-&gt;sqlvar[0].sqldata = \"postgres\";\n    sqlda2-&gt;sqlvar[0].sqllen  = 8;\n\n    intval = 1;\n    sqlda2-&gt;sqlvar[1].sqltype = ECPGt_int;\n    sqlda2-&gt;sqlvar[1].sqldata = (char *) &amp;intval;\n    sqlda2-&gt;sqlvar[1].sqllen  = sizeof(intval);\n\n    /* Open a cursor with input parameters. */\n    EXEC SQL OPEN cur1 USING DESCRIPTOR sqlda2;\n\n    while (1)\n    {\n        sqlda_t *cur_sqlda;\n\n        /* Assign descriptor to the cursor  */\n        EXEC SQL FETCH NEXT FROM cur1 INTO DESCRIPTOR sqlda1;\n\n        for (cur_sqlda = sqlda1 ;\n             cur_sqlda != NULL ;\n             cur_sqlda = cur_sqlda-&gt;desc_next)\n        {\n            int i;\n            char name_buf[1024];\n            char var_buf[1024];\n\n            /* Print every column in a row. */\n            for (i=0 ; i&lt;cur_sqlda-&gt;sqld ; i++)\n            {\n                sqlvar_t v = cur_sqlda-&gt;sqlvar[i];\n                char *sqldata = v.sqldata;\n                short sqllen  = v.sqllen;\n\n                strncpy(name_buf, v.sqlname.data, v.sqlname.length);\n                name_buf[v.sqlname.length] = '\\0';\n\n                switch (v.sqltype)\n                {\n                    case ECPGt_char:\n                        memset(&amp;var_buf, 0, sizeof(var_buf));\n                        memcpy(&amp;var_buf, sqldata, (sizeof(var_buf)&lt;=sqllen ? sizeof(var_buf)-1 : sqllen) );\n                        break;\n\n                    case ECPGt_int: /* integer */\n                        memcpy(&amp;intval, sqldata, sqllen);\n                        snprintf(var_buf, sizeof(var_buf), \"%d\", intval);\n                        break;\n\n                    case ECPGt_long_long: /* bigint */\n                        memcpy(&amp;longlongval, sqldata, sqllen);\n                        snprintf(var_buf, sizeof(var_buf), \"%lld\", longlongval);\n                        break;\n\n                    default:\n                    {\n                        int i;\n                        memset(var_buf, 0, sizeof(var_buf));\n                        for (i = 0; i &lt; sqllen; i++)\n                        {\n                            char tmpbuf[16];\n                            snprintf(tmpbuf, sizeof(tmpbuf), \"%02x \", (unsigned char) sqldata[i]);\n                            strncat(var_buf, tmpbuf, sizeof(var_buf));\n                        }\n                    }\n                        break;\n                }\n\n                printf(\"%s = %s (type: %d)\\n\", name_buf, var_buf, v.sqltype);\n            }\n\n            printf(\"\\n\");\n        }\n    }\n\n    EXEC SQL CLOSE cur1;\n    EXEC SQL COMMIT;\n\n    EXEC SQL DISCONNECT ALL;\n\n    return 0;\n}\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4554(para) 
msgid "The output of this example should look something like the following (some numbers will vary)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4559(screen) 
#, no-wrap
msgid "\noid = 1 (type: 1)\ndatname = template1 (type: 1)\ndatdba = 10 (type: 1)\nencoding = 0 (type: 5)\ndatistemplate = t (type: 1)\ndatallowconn = t (type: 1)\ndatconnlimit = -1 (type: 5)\ndatlastsysoid = 11510 (type: 1)\ndatfrozenxid = 379 (type: 1)\ndattablespace = 1663 (type: 1)\ndatconfig =  (type: 1)\ndatacl = {=c/uptime,uptime=CTc/uptime} (type: 1)\ndatid = 1 (type: 1)\ndatname = template1 (type: 1)\nnumbackends = 0 (type: 5)\nxact_commit = 113606 (type: 9)\nxact_rollback = 0 (type: 9)\nblks_read = 130 (type: 9)\nblks_hit = 7341714 (type: 9)\ntup_returned = 38262679 (type: 9)\ntup_fetched = 1836281 (type: 9)\ntup_inserted = 0 (type: 9)\ntup_updated = 0 (type: 9)\ntup_deleted = 0 (type: 9)\n\noid = 11511 (type: 1)\ndatname = postgres (type: 1)\ndatdba = 10 (type: 1)\nencoding = 0 (type: 5)\ndatistemplate = f (type: 1)\ndatallowconn = t (type: 1)\ndatconnlimit = -1 (type: 5)\ndatlastsysoid = 11510 (type: 1)\ndatfrozenxid = 379 (type: 1)\ndattablespace = 1663 (type: 1)\ndatconfig =  (type: 1)\ndatacl =  (type: 1)\ndatid = 11511 (type: 1)\ndatname = postgres (type: 1)\nnumbackends = 0 (type: 5)\nxact_commit = 221069 (type: 9)\nxact_rollback = 18 (type: 9)\nblks_read = 1176 (type: 9)\nblks_hit = 13943750 (type: 9)\ntup_returned = 77410091 (type: 9)\ntup_fetched = 3253694 (type: 9)\ntup_inserted = 0 (type: 9)\ntup_updated = 0 (type: 9)\ntup_deleted = 0 (type: 9)\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4616(title) 
msgid "Error Handling"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4625(simpara) 
msgid "Callbacks can be configured to handle warning and error conditions using the <literal>WHENEVER</literal> command."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4632(simpara) 
msgid "Detailed information about the error or warning can be obtained from the <varname>sqlca</varname> variable."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4618(para) 
msgid "This section describes how you can handle exceptional conditions and warnings in an embedded SQL program. There are two nonexclusive facilities for this. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4641(title) 
msgid "Setting Callbacks"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4647(programlisting) 
#, no-wrap
msgid "\nEXEC SQL WHENEVER <replaceable>condition</replaceable> <replaceable>action</replaceable>;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4643(para) 
msgid "One simple method to catch errors and warnings is to set a specific action to be executed whenever a particular condition occurs. In general: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4657(literal) 
msgid "SQLERROR"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4659(para) 
msgid "The specified action is called whenever an error occurs during the execution of an SQL statement."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4667(literal) 
msgid "SQLWARNING"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4669(para) 
msgid "The specified action is called whenever a warning occurs during the execution of an SQL statement."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4677(literal) 
msgid "NOT FOUND"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4679(para) 
msgid "The specified action is called whenever an SQL statement retrieves or affects zero rows. (This condition is not an error, but you might be interested in handling it specially.)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4652(para) 
msgid "<replaceable>condition</replaceable> can be one of the following: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4694(literal) 
msgid "CONTINUE"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4696(para) 
msgid "This effectively means that the condition is ignored. This is the default."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4704(replaceable) /tmp/cicero-YDWB/ecpg.xml:4705(replaceable) 
msgid "label"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4704(literal) 
msgid "GOTO <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4705(literal) 
msgid "GO TO <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4707(para) 
msgid "Jump to the specified label (using a C <literal>goto</literal> statement)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4715(literal) 
msgid "SQLPRINT"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4717(para) 
msgid "Print a message to standard error. This is useful for simple programs or during prototyping. The details of the message cannot be configured."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4726(literal) 
msgid "STOP"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4728(para) 
msgid "Call <literal>exit(1)</literal>, which will terminate the program."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4736(literal) 
msgid "DO BREAK"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4738(para) 
msgid "Execute the C statement <literal>break</literal>. This should only be used in loops or <literal>switch</literal> statements."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4746(replaceable) /tmp/cicero-YDWB/ecpg.xml:4747(replaceable) 
msgid "args"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4746(literal) 
msgid "CALL <placeholder-1/> (<placeholder-2/>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4747(literal) 
msgid "DO <placeholder-1/> (<placeholder-2/>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4749(para) 
msgid "Call the specified C functions with the specified arguments."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4689(para) 
msgid "<replaceable>action</replaceable> can be one of the following: <placeholder-1/> The SQL standard only provides for the actions <literal>CONTINUE</literal> and <literal>GOTO</literal> (and <literal>GO TO</literal>)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4765(programlisting) 
#, no-wrap
msgid "\nEXEC SQL WHENEVER SQLWARNING SQLPRINT;\nEXEC SQL WHENEVER SQLERROR STOP;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4761(para) 
msgid "Here is an example that you might want to use in a simple program. It prints a simple message when a warning occurs and aborts the program when an error happens: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4781(programlisting) 
#, no-wrap
msgid "\n/*\n * WRONG\n */\nint main(int argc, char *argv[])\n{\n    ...\n    if (verbose) {\n        EXEC SQL WHENEVER SQLWARNING SQLPRINT;\n    }\n    ...\n    EXEC SQL SELECT ...;\n    ...\n}\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4797(programlisting) 
#, no-wrap
msgid "\n/*\n * WRONG\n */\nint main(int argc, char *argv[])\n{\n    ...\n    set_error_handler();\n    ...\n    EXEC SQL SELECT ...;\n    ...\n}\n\nstatic void set_error_handler(void)\n{\n    EXEC SQL WHENEVER SQLERROR STOP;\n}\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4771(para) 
msgid "The statement <literal>EXEC SQL WHENEVER</literal> is a directive of the SQL preprocessor, not a C statement. The error or warning actions that it sets apply to all embedded SQL statements that appear below the point where the handler is set, unless a different action was set for the same condition between the first <literal>EXEC SQL WHENEVER</literal> and the SQL statement causing the condition, regardless of the flow of control in the C program. So neither of the two following C program excerpts will have the desired effect: <placeholder-1/><placeholder-2/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4819(title) 
msgid "sqlca"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4826(programlisting) 
#, no-wrap
msgid "\nstruct\n{\n    char sqlcaid[8];\n    long sqlabc;\n    long sqlcode;\n    struct\n    {\n        int sqlerrml;\n        char sqlerrmc[SQLERRMC_LEN];\n    } sqlerrm;\n    char sqlerrp[8];\n    long sqlerrd[6];\n    char sqlwarn[8];\n    char sqlstate[5];\n} sqlca;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4821(para) 
msgid "For more powerful error handling, the embedded SQL interface provides a global variable with the name <varname>sqlca</varname> (SQL communication area) that has the following structure: <placeholder-1/> (In a multithreaded program, every thread automatically gets its own copy of <varname>sqlca</varname>. This works similarly to the handling of the standard C global variable <varname>errno</varname>.)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4849(para) 
msgid "<varname>sqlca</varname> covers both warnings and errors. If multiple warnings or errors occur during the execution of a statement, then <varname>sqlca</varname> will only contain information about the last one."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4856(para) 
msgid "If no error occurred in the last <acronym>SQL</acronym> statement, <literal>sqlca.sqlcode</literal> will be 0 and <literal>sqlca.sqlstate</literal> will be <literal>\"00000\"</literal>. If a warning or error occurred, then <literal>sqlca.sqlcode</literal> will be negative and <literal>sqlca.sqlstate</literal> will be different from <literal>\"00000\"</literal>. A positive <literal>sqlca.sqlcode</literal> indicates a harmless condition, such as that the last query returned zero rows. <literal>sqlcode</literal> and <literal>sqlstate</literal> are two different error code schemes; details appear below."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4870(para) 
msgid "If the last SQL statement was successful, then <literal>sqlca.sqlerrd[1]</literal> contains the OID of the processed row, if applicable, and <literal>sqlca.sqlerrd[2]</literal> contains the number of processed or returned rows, if applicable to the command."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4878(para) 
msgid "In case of an error or warning, <literal>sqlca.sqlerrm.sqlerrmc</literal> will contain a string that describes the error. The field <literal>sqlca.sqlerrm.sqlerrml</literal> contains the length of the error message that is stored in <literal>sqlca.sqlerrm.sqlerrmc</literal> (the result of <function>strlen()</function>, not really interesting for a C programmer). Note that some messages are too long to fit in the fixed-size <literal>sqlerrmc</literal> array; they will be truncated."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4890(para) 
msgid "In case of a warning, <literal>sqlca.sqlwarn[2]</literal> is set to <literal>W</literal>. (In all other cases, it is set to something different from <literal>W</literal>.) If <literal>sqlca.sqlwarn[1]</literal> is set to <literal>W</literal>, then a value was truncated when it was stored in a host variable. <literal>sqlca.sqlwarn[0]</literal> is set to <literal>W</literal> if any of the other elements are set to indicate a warning."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4901(para) 
msgid "The fields <structfield>sqlcaid</structfield>, <structfield>sqlcabc</structfield>, <structfield>sqlerrp</structfield>, and the remaining elements of <structfield>sqlerrd</structfield> and <structfield>sqlwarn</structfield> currently contain no useful information."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4910(para) 
msgid "The structure <varname>sqlca</varname> is not defined in the SQL standard, but is implemented in several other SQL database systems. The definitions are similar at the core, but if you want to write portable applications, then you should investigate the different implementations carefully."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4925(programlisting) 
#, no-wrap
msgid "\nEXEC SQL WHENEVER SQLERROR CALL print_sqlca();\n\nvoid\nprint_sqlca()\n{\n    fprintf(stderr, \"==== sqlca ====\\n\");\n    fprintf(stderr, \"sqlcode: %ld\\n\", sqlca.sqlcode);\n    fprintf(stderr, \"sqlerrm.sqlerrml: %d\\n\", sqlca.sqlerrm.sqlerrml);\n    fprintf(stderr, \"sqlerrm.sqlerrmc: %s\\n\", sqlca.sqlerrm.sqlerrmc);\n    fprintf(stderr, \"sqlerrd: %ld %ld %ld %ld %ld %ld\\n\", sqlca.sqlerrd[0],sqlca.sqlerrd[1],sqlca.sqlerrd[2],\n                                                          sqlca.sqlerrd[3],sqlca.sqlerrd[4],sqlca.sqlerrd[5]);\n    fprintf(stderr, \"sqlwarn: %d %d %d %d %d %d %d %d\\n\", sqlca.sqlwarn[0], sqlca.sqlwarn[1], sqlca.sqlwarn[2],\n                                                          sqlca.sqlwarn[3], sqlca.sqlwarn[4], sqlca.sqlwarn[5],\n                                                          sqlca.sqlwarn[6], sqlca.sqlwarn[7]);\n    fprintf(stderr, \"sqlstate: %5s\\n\", sqlca.sqlstate);\n    fprintf(stderr, \"===============\\n\");\n}\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4918(para) 
msgid "Here is one example that combines the use of <literal>WHENEVER</literal> and <varname>sqlca</varname>, printing out the contents of <varname>sqlca</varname> when an error occurs. This is perhaps useful for debugging or prototyping applications, before installing a more <quote>user-friendly</quote> error handler. <placeholder-1/> The result could look as follows (here an error due to a misspelled table name): <screen>\n==== sqlca ====\nsqlcode: -400\nsqlerrm.sqlerrml: 49\nsqlerrm.sqlerrmc: relation \"pg_databasep\" does not exist on line 38\nsqlerrd: 0 0 0 0 0 0\nsqlwarn: 0 0 0 0 0 0 0 0\nsqlstate: 42P01\n===============\n</screen>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4962(title) 
msgid "<literal>SQLSTATE</literal> vs. <literal>SQLCODE</literal>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4964(para) 
msgid "The fields <literal>sqlca.sqlstate</literal> and <literal>sqlca.sqlcode</literal> are two different schemes that provide error codes. Both are derived from the SQL standard, but <literal>SQLCODE</literal> has been marked deprecated in the SQL-92 edition of the standard and has been dropped in later editions. Therefore, new applications are strongly encouraged to use <literal>SQLSTATE</literal>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4974(para) 
msgid "<literal>SQLSTATE</literal> is a five-character array. The five characters contain digits or upper-case letters that represent codes of various error and warning conditions. <literal>SQLSTATE</literal> has a hierarchical scheme: the first two characters indicate the general class of the condition, the last three characters indicate a subclass of the general condition. A successful state is indicated by the code <literal>00000</literal>. The <literal>SQLSTATE</literal> codes are for the most part defined in the SQL standard. The <productname>PostgreSQL</productname> server natively supports <literal>SQLSTATE</literal> error codes; therefore a high degree of consistency can be achieved by using this error code scheme throughout all applications. For further information see <xref linkend=\"errcodes-appendix\"/>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:4991(para) 
msgid "<literal>SQLCODE</literal>, the deprecated error code scheme, is a simple integer. A value of 0 indicates success, a positive value indicates success with additional information, a negative value indicates an error. The SQL standard only defines the positive value +100, which indicates that the last command returned or affected zero rows, and no specific negative values. Therefore, this scheme can only achieve poor portability and does not have a hierarchical code assignment. Historically, the embedded SQL processor for <productname>PostgreSQL</productname> has assigned some specific <literal>SQLCODE</literal> values for its use, which are listed below with their numeric value and their symbolic name. Remember that these are not portable to other SQL implementations. To simplify the porting of applications to the <literal>SQLSTATE</literal> scheme, the corresponding <literal>SQLSTATE</literal> is also listed. There is, however, no one-to-one or one-to-many mapping between the two schemes (indeed it is many-to-many), so you should consult the global <literal>SQLSTATE</literal> listing in <xref linkend=\"errcodes-appendix\"/> in each case."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5018(term) 
msgid "0 (<symbol>ECPG_NO_ERROR</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5020(para) 
msgid "Indicates no error. (SQLSTATE 00000)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5027(term) 
msgid "100 (<symbol>ECPG_NOT_FOUND</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5029(para) 
msgid "This is a harmless condition indicating that the last command retrieved or processed zero rows, or that you are at the end of the cursor. (SQLSTATE 02000)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5038(programlisting) 
#, no-wrap
msgid "\nwhile (1)\n{\n    EXEC SQL FETCH ... ;\n    if (sqlca.sqlcode == ECPG_NOT_FOUND)\n        break;\n}\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5035(para) 
msgid "When processing a cursor in a loop, you could use this code as a way to detect when to abort the loop, like this: <placeholder-1/> But <literal>WHENEVER NOT FOUND DO BREAK</literal> effectively does this internally, so there is usually no advantage in writing this out explicitly."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5054(term) 
msgid "-12 (<symbol>ECPG_OUT_OF_MEMORY</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5056(para) 
msgid "Indicates that your virtual memory is exhausted. The numeric value is defined as <literal>-ENOMEM</literal>. (SQLSTATE YE001)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5065(term) 
msgid "-200 (<symbol>ECPG_UNSUPPORTED</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5067(para) 
msgid "Indicates the preprocessor has generated something that the library does not know about. Perhaps you are running incompatible versions of the preprocessor and the library. (SQLSTATE YE002)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5077(term) 
msgid "-201 (<symbol>ECPG_TOO_MANY_ARGUMENTS</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5079(para) 
msgid "This means that the command specified more host variables than the command expected. (SQLSTATE 07001 or 07002)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5087(term) 
msgid "-202 (<symbol>ECPG_TOO_FEW_ARGUMENTS</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5089(para) 
msgid "This means that the command specified fewer host variables than the command expected. (SQLSTATE 07001 or 07002)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5097(term) 
msgid "-203 (<symbol>ECPG_TOO_MANY_MATCHES</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5099(para) 
msgid "This means a query has returned multiple rows but the statement was only prepared to store one result row (for example, because the specified variables are not arrays). (SQLSTATE 21000)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5108(term) 
msgid "-204 (<symbol>ECPG_INT_FORMAT</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5110(para) 
msgid "The host variable is of type <type>int</type> and the datum in the database is of a different type and contains a value that cannot be interpreted as an <type>int</type>. The library uses <function>strtol()</function> for this conversion. (SQLSTATE 42804)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5121(term) 
msgid "-205 (<symbol>ECPG_UINT_FORMAT</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5123(para) 
msgid "The host variable is of type <type>unsigned int</type> and the datum in the database is of a different type and contains a value that cannot be interpreted as an <type>unsigned int</type>. The library uses <function>strtoul()</function> for this conversion. (SQLSTATE 42804)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5134(term) 
msgid "-206 (<symbol>ECPG_FLOAT_FORMAT</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5136(para) 
msgid "The host variable is of type <type>float</type> and the datum in the database is of another type and contains a value that cannot be interpreted as a <type>float</type>. The library uses <function>strtod()</function> for this conversion. (SQLSTATE 42804)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5147(term) 
msgid "-207 (<symbol>ECPG_NUMERIC_FORMAT</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5149(para) 
msgid "The host variable is of type <type>numeric</type> and the datum in the database is of another type and contains a value that cannot be interpreted as a <type>numeric</type> value. (SQLSTATE 42804)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5159(term) 
msgid "-208 (<symbol>ECPG_INTERVAL_FORMAT</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5161(para) 
msgid "The host variable is of type <type>interval</type> and the datum in the database is of another type and contains a value that cannot be interpreted as an <type>interval</type> value. (SQLSTATE 42804)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5171(term) 
msgid "-209 (<symbol>ECPG_DATE_FORMAT</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5173(para) 
msgid "The host variable is of type <type>date</type> and the datum in the database is of another type and contains a value that cannot be interpreted as a <type>date</type> value. (SQLSTATE 42804)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5183(term) 
msgid "-210 (<symbol>ECPG_TIMESTAMP_FORMAT</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5185(para) 
msgid "The host variable is of type <type>timestamp</type> and the datum in the database is of another type and contains a value that cannot be interpreted as a <type>timestamp</type> value. (SQLSTATE 42804)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5195(term) 
msgid "-211 (<symbol>ECPG_CONVERT_BOOL</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5197(para) 
msgid "This means the host variable is of type <type>bool</type> and the datum in the database is neither <literal>'t'</literal> nor <literal>'f'</literal>. (SQLSTATE 42804)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5206(term) 
msgid "-212 (<symbol>ECPG_EMPTY</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5208(para) 
msgid "The statement sent to the <productname>PostgreSQL</productname> server was empty. (This cannot normally happen in an embedded SQL program, so it might point to an internal error.) (SQLSTATE YE002)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5218(term) 
msgid "-213 (<symbol>ECPG_MISSING_INDICATOR</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5220(para) 
msgid "A null value was returned and no null indicator variable was supplied. (SQLSTATE 22002)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5228(term) 
msgid "-214 (<symbol>ECPG_NO_ARRAY</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5230(para) 
msgid "An ordinary variable was used in a place that requires an array. (SQLSTATE 42804)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5238(term) 
msgid "-215 (<symbol>ECPG_DATA_NOT_ARRAY</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5240(para) 
msgid "The database returned an ordinary variable in a place that requires array value. (SQLSTATE 42804)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5250(term) 
msgid "-220 (<symbol>ECPG_NO_CONN</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5252(para) 
msgid "The program tried to access a connection that does not exist. (SQLSTATE 08003)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5260(term) 
msgid "-221 (<symbol>ECPG_NOT_CONN</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5262(para) 
msgid "The program tried to access a connection that does exist but is not open. (This is an internal error.) (SQLSTATE YE002)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5270(term) 
msgid "-230 (<symbol>ECPG_INVALID_STMT</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5272(para) 
msgid "The statement you are trying to use has not been prepared. (SQLSTATE 26000)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5280(term) 
msgid "-239 (<symbol>ECPG_INFORMIX_DUPLICATE_KEY</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5282(para) 
msgid "Duplicate key error, violation of unique constraint (Informix compatibility mode). (SQLSTATE 23505)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5290(term) 
msgid "-240 (<symbol>ECPG_UNKNOWN_DESCRIPTOR</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5292(para) 
msgid "The descriptor specified was not found. The statement you are trying to use has not been prepared. (SQLSTATE 33000)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5300(term) 
msgid "-241 (<symbol>ECPG_INVALID_DESCRIPTOR_INDEX</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5302(para) 
msgid "The descriptor index specified was out of range. (SQLSTATE 07009)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5310(term) 
msgid "-242 (<symbol>ECPG_UNKNOWN_DESCRIPTOR_ITEM</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5312(para) 
msgid "An invalid descriptor item was requested. (This is an internal error.) (SQLSTATE YE002)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5320(term) 
msgid "-243 (<symbol>ECPG_VAR_NOT_NUMERIC</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5322(para) 
msgid "During the execution of a dynamic statement, the database returned a numeric value and the host variable was not numeric. (SQLSTATE 07006)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5331(term) 
msgid "-244 (<symbol>ECPG_VAR_NOT_CHAR</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5333(para) 
msgid "During the execution of a dynamic statement, the database returned a non-numeric value and the host variable was numeric. (SQLSTATE 07006)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5342(term) 
msgid "-284 (<symbol>ECPG_INFORMIX_SUBSELECT_NOT_ONE</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5344(para) 
msgid "A result of the subquery is not single row (Informix compatibility mode). (SQLSTATE 21000)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5352(term) 
msgid "-400 (<symbol>ECPG_PGSQL</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5354(para) 
msgid "Some error caused by the <productname>PostgreSQL</productname> server. The message contains the error message from the <productname>PostgreSQL</productname> server."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5363(term) 
msgid "-401 (<symbol>ECPG_TRANS</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5365(para) 
msgid "The <productname>PostgreSQL</productname> server signaled that we cannot start, commit, or rollback the transaction. (SQLSTATE 08007)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5374(term) 
msgid "-402 (<symbol>ECPG_CONNECT</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5376(para) 
msgid "The connection attempt to the database did not succeed. (SQLSTATE 08001)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5384(term) 
msgid "-403 (<symbol>ECPG_DUPLICATE_KEY</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5386(para) 
msgid "Duplicate key error, violation of unique constraint. (SQLSTATE 23505)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5394(term) 
msgid "-404 (<symbol>ECPG_SUBSELECT_NOT_ONE</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5396(para) 
msgid "A result for the subquery is not single row. (SQLSTATE 21000)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5405(term) 
msgid "-602 (<symbol>ECPG_WARNING_UNKNOWN_PORTAL</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5407(para) 
msgid "An invalid cursor name was specified. (SQLSTATE 34000)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5414(term) 
msgid "-603 (<symbol>ECPG_WARNING_IN_TRANSACTION</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5416(para) 
msgid "Transaction is in progress. (SQLSTATE 25001)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5423(term) 
msgid "-604 (<symbol>ECPG_WARNING_NO_TRANSACTION</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5425(para) 
msgid "There is no active (in-progress) transaction. (SQLSTATE 25P01)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5432(term) 
msgid "-605 (<symbol>ECPG_WARNING_PORTAL_EXISTS</symbol>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5434(para) 
msgid "An existing cursor name was specified. (SQLSTATE 42P03)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5013(para) 
msgid "These are the assigned <literal>SQLCODE</literal> values: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5446(title) 
msgid "Preprocessor Directives"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5448(para) 
msgid "Several preprocessor directives are available that modify how the <command>ecpg</command> preprocessor parses and processes a file."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5455(title) 
msgid "Including Files"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5459(programlisting) 
#, no-wrap
msgid "\nEXEC SQL INCLUDE <replaceable>filename</replaceable>;\nEXEC SQL INCLUDE &lt;<replaceable>filename</replaceable>&gt;;\nEXEC SQL INCLUDE \"<replaceable>filename</replaceable>\";\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5457(para) 
msgid "To include an external file into your embedded SQL program, use: <placeholder-1/> The embedded SQL preprocessor will look for a file named <literal><replaceable>filename</replaceable>.h</literal>, preprocess it, and include it in the resulting C output. Thus, embedded SQL statements in the included file are handled correctly."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5475(simpara) 
msgid "current directory"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5476(filename) 
msgid "/usr/local/include"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5477(simpara) 
msgid "PostgreSQL include directory, defined at build time (e.g., <filename>/usr/local/pgsql/include</filename>)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5478(filename) 
msgid "/usr/include"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5470(para) 
msgid "The <command>ecpg</command> preprocessor will search a file at several directories in following order: <placeholder-1/> But when <literal>EXEC SQL INCLUDE \"<replaceable>filename</replaceable>\"</literal> is used, only the current directory is searched."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5486(para) 
msgid "In each directory, the preprocessor will first look for the file name as given, and if not found will append <literal>.h</literal> to the file name and try again (unless the specified file name already has that suffix)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5495(programlisting) 
#, no-wrap
msgid "\n#include &lt;<replaceable>filename</replaceable>.h&gt;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5493(para) 
msgid "Note that <command>EXEC SQL INCLUDE</command> is <emphasis>not</emphasis> the same as: <placeholder-1/> because this file would not be subject to SQL command preprocessing. Naturally, you can continue to use the C <literal>#include</literal> directive to include other header files."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5505(para) 
msgid "The include file name is case-sensitive, even though the rest of the <literal>EXEC SQL INCLUDE</literal> command follows the normal SQL case-sensitivity rules."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5514(title) 
msgid "The define and undef Directives"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5518(programlisting) 
#, no-wrap
msgid "\nEXEC SQL DEFINE <replaceable>name</replaceable>;\nEXEC SQL DEFINE <replaceable>name</replaceable> <replaceable>value</replaceable>;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5523(programlisting) 
#, no-wrap
msgid "\nEXEC SQL DEFINE HAVE_FEATURE;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5527(programlisting) 
#, no-wrap
msgid "\nEXEC SQL DEFINE MYNUMBER 12;\nEXEC SQL DEFINE MYSTRING 'abc';\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5532(programlisting) 
#, no-wrap
msgid "\nEXEC SQL UNDEF MYNUMBER;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5515(para) 
msgid "Similar to the directive <literal>#define</literal> that is known from C, embedded SQL has a similar concept: <placeholder-1/> So you can define a name: <placeholder-2/> And you can also define constants: <placeholder-3/> Use <literal>undef</literal> to remove a previous definition: <placeholder-4/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5543(programlisting) 
#, no-wrap
msgid "\nEXEC SQL DEFINE MYNUMBER 12;\n...\nEXEC SQL UPDATE Tbl SET col = MYNUMBER;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5537(para) 
msgid "Of course you can continue to use the C versions <literal>#define</literal> and <literal>#undef</literal> in your embedded SQL program. The difference is where your defined values get evaluated. If you use <literal>EXEC SQL DEFINE</literal> then the <command>ecpg</command> preprocessor evaluates the defines and substitutes the values. For example if you write: <placeholder-1/> then <command>ecpg</command> will already do the substitution and your C compiler will never see any name or identifier <literal>MYNUMBER</literal>. Note that you cannot use <literal>#define</literal> for a constant that you are going to use in an embedded SQL query because in this case the embedded SQL precompiler is not able to see this declaration."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5557(title) 
msgid "ifdef, ifndef, else, elif, and endif Directives"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5563(literal) 
msgid "EXEC SQL ifdef <placeholder-1/>;"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5565(para) 
msgid "Checks a <replaceable>name</replaceable> and processes subsequent lines if <replaceable>name</replaceable> has been created with <literal>EXEC SQL define <replaceable>name</replaceable></literal>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5574(literal) 
msgid "EXEC SQL ifndef <placeholder-1/>;"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5576(para) 
msgid "Checks a <replaceable>name</replaceable> and processes subsequent lines if <replaceable>name</replaceable> has <emphasis>not</emphasis> been created with <literal>EXEC SQL define <replaceable>name</replaceable></literal>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5585(literal) 
msgid "EXEC SQL else;"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5587(para) 
msgid "Starts processing an alternative section to a section introduced by either <literal>EXEC SQL ifdef <replaceable>name</replaceable></literal> or <literal>EXEC SQL ifndef <replaceable>name</replaceable></literal>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5596(literal) 
msgid "EXEC SQL elif <placeholder-1/>;"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5598(para) 
msgid "Checks <replaceable>name</replaceable> and starts an alternative section if <replaceable>name</replaceable> has been created with <literal>EXEC SQL define <replaceable>name</replaceable></literal>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5607(literal) 
msgid "EXEC SQL endif;"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5609(para) 
msgid "Ends an alternative section."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5558(para) 
msgid "You can use the following directives to compile code sections conditionally: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5619(programlisting) 
#, no-wrap
msgid "\nEXEC SQL ifndef TZVAR;\nEXEC SQL SET TIMEZONE TO 'GMT';\nEXEC SQL elif TZNAME;\nEXEC SQL SET TIMEZONE TO TZNAME;\nEXEC SQL else;\nEXEC SQL SET TIMEZONE TO TZVAR;\nEXEC SQL endif;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5617(para) 
msgid "Example: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5634(title) 
msgid "Processing Embedded SQL Programs"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5636(para) 
msgid "Now that you have an idea how to form embedded SQL C programs, you probably want to know how to compile them. Before compiling you run the file through the embedded <acronym>SQL</acronym><acronym>C</acronym> preprocessor, which converts the <acronym>SQL</acronym> statements you used to special function calls. After compiling, you must link with a special library that contains the needed functions. These functions fetch information from the arguments, perform the <acronym>SQL</acronym> command using the <application>libpq</application> interface, and put the result in the arguments specified for output."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5656(programlisting) 
#, no-wrap
msgid "\necpg prog1.pgc\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5649(para) 
msgid "The preprocessor program is called <filename>ecpg</filename> and is included in a normal <productname>PostgreSQL</productname> installation. Embedded SQL programs are typically named with an extension <filename>.pgc</filename>. If you have a program file called <filename>prog1.pgc</filename>, you can preprocess it by simply calling: <placeholder-1/> This will create a file called <filename>prog1.c</filename>. If your input files do not follow the suggested naming pattern, you can specify the output file explicitly using the <option>-o</option> option."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5667(programlisting) 
#, no-wrap
msgid "\ncc -c prog1.c\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5665(para) 
msgid "The preprocessed file can be compiled normally, for example: <placeholder-1/> The generated C source files include header files from the <productname>PostgreSQL</productname> installation, so if you installed <productname>PostgreSQL</productname> in a location that is not searched by default, you have to add an option such as <literal>-I/usr/local/pgsql/include</literal> to the compilation command line."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5681(programlisting) 
#, no-wrap
msgid "\ncc -o myprog prog1.o prog2.o ... -lecpg\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5678(para) 
msgid "To link an embedded SQL program, you need to include the <filename>libecpg</filename> library, like so: <placeholder-1/> Again, you might have to add an option like <literal>-L/usr/local/pgsql/lib</literal> to that command line."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5692(programlisting) 
#, no-wrap
msgid "\nECPG = ecpg\n\n%.c: %.pgc\n        $(ECPG) $&lt;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5688(para) 
msgid "If you manage the build process of a larger project using <application>make</application>, it might be convenient to include the following implicit rule to your makefiles: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5700(para) 
msgid "The complete syntax of the <command>ecpg</command> command is detailed in <xref linkend=\"app-ecpg\"/>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5705(para) 
msgid "The <application>ecpg</application> library is thread-safe by default. However, you might need to use some threading command-line options to compile your client code."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5713(title) 
msgid "Library Functions"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5715(para) 
msgid "The <filename>libecpg</filename> library primarily contains <quote>hidden</quote> functions that are used to implement the functionality expressed by the embedded SQL commands. But there are some functions that can usefully be called directly. Note that this makes your code unportable."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5725(para) 
msgid "<function>ECPGdebug(int <replaceable>on</replaceable>, FILE *<replaceable>stream</replaceable>)</function> turns on debug logging if called with the first argument non-zero. Debug logging is done on <replaceable>stream</replaceable>. The log contains all <acronym>SQL</acronym> statements with all the input variables inserted, and the results from the <productname>PostgreSQL</productname> server. This can be very useful when searching for errors in your <acronym>SQL</acronym> statements."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5737(para) 
msgid "On Windows, if the <application>ecpg</application> libraries and an application are compiled with different flags, this function call will crash the application because the internal representation of the <literal>FILE</literal> pointers differ. Specifically, multithreaded/single-threaded, release/debug, and static/dynamic flags should be the same for the library and all applications using that library."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5750(para) 
msgid "<function>ECPGget_PGconn(const char *<replaceable>connection_name</replaceable>) </function> returns the library database connection handle identified by the given name. If <replaceable>connection_name</replaceable> is set to <literal>NULL</literal>, the current connection handle is returned. If no connection handle can be identified, the function returns <literal>NULL</literal>. The returned connection handle can be used to call any other functions from <application>libpq</application>, if necessary."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5759(para) 
msgid "It is a bad idea to manipulate database connection handles made from <application>ecpg</application> directly with <application>libpq</application> routines."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5767(para) 
msgid "<function>ECPGtransactionStatus(const char *<replaceable>connection_name</replaceable>)</function> returns the current transaction status of the given connection identified by <replaceable>connection_name</replaceable>. See <xref linkend=\"libpq-status\"/> and libpq's <function>PQtransactionStatus()</function> for details about the returned status codes."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5775(para) 
msgid "<function>ECPGstatus(int <replaceable>lineno</replaceable>, const char* <replaceable>connection_name</replaceable>)</function> returns true if you are connected to a database and false if not. <replaceable>connection_name</replaceable> can be <literal>NULL</literal> if a single connection is being used."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5787(title) 
msgid "Large Objects"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5789(para) 
msgid "Large objects are not directly supported by ECPG, but ECPG application can manipulate large objects through the libpq large object functions, obtaining the necessary <type>PGconn</type> object by calling the <function>ECPGget_PGconn()</function> function. (However, use of the <function>ECPGget_PGconn()</function> function and touching <type>PGconn</type> objects directly should be done very carefully and ideally not mixed with other ECPG database access calls.)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5800(para) 
msgid "For more details about the <function>ECPGget_PGconn()</function>, see <xref linkend=\"ecpg-library\"/>. For information about the large object function interface, see <xref linkend=\"largeobjects\"/>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5806(para) 
msgid "Large object functions have to be called in a transaction block, so when autocommit is off, <command>BEGIN</command> commands have to be issued explicitly."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5812(para) 
msgid "<xref linkend=\"ecpg-lo-example\"/> shows an example program that illustrates how to create, write, and read a large object in an ECPG application."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5819(title) 
msgid "ECPG Program Accessing Large Objects"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5899(title) 
msgid "<acronym>C++</acronym> Applications"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5901(para) 
msgid "ECPG has some limited support for C++ applications. This section describes some caveats."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5906(para) 
msgid "The <command>ecpg</command> preprocessor takes an input file written in C (or something like C) and embedded SQL commands, converts the embedded SQL commands into C language chunks, and finally generates a <filename>.c</filename> file. The header file declarations of the library functions used by the C language chunks that <command>ecpg</command> generates are wrapped in <literal>extern \"C\" { ... }</literal> blocks when used under C++, so they should work seamlessly in C++."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5917(para) 
msgid "In general, however, the <command>ecpg</command> preprocessor only understands C; it does not handle the special syntax and reserved words of the C++ language. So, some embedded SQL code written in C++ application code that uses complicated features specific to C++ might fail to be preprocessed correctly or might not work as expected."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5926(para) 
msgid "A safe way to use the embedded SQL code in a C++ application is hiding the ECPG calls in a C module, which the C++ application code calls into to access the database, and linking that together with the rest of the C++ code. See <xref linkend=\"ecpg-cpp-and-c\"/> about that."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5935(title) 
msgid "Scope for Host Variables"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5937(para) 
msgid "The <command>ecpg</command> preprocessor understands the scope of variables in C. In the C language, this is rather simple because the scopes of variables is based on their code blocks. In C++, however, the class member variables are referenced in a different code block from the declared position, so the <command>ecpg</command> preprocessor will not understand the scope of the class member variables."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5953(programlisting) 
#, no-wrap
msgid "\nclass TestCpp\n{\n    EXEC SQL BEGIN DECLARE SECTION;\n    char dbname[1024];\n    EXEC SQL END DECLARE SECTION;\n\n  public:\n    TestCpp();\n    void test();\n    ~TestCpp();\n};\n\nTestCpp::TestCpp()\n{\n    EXEC SQL CONNECT TO testdb1;\n}\n\nvoid Test::test()\n{\n    EXEC SQL SELECT current_database() INTO :dbname;\n    printf(\"current_database = %s\\n\", dbname);\n}\n\nTestCpp::~TestCpp()\n{\n    EXEC SQL DISCONNECT ALL;\n}\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5947(para) 
msgid "For example, in the following case, the <command>ecpg</command> preprocessor cannot find any declaration for the variable <literal>dbname</literal> in the <literal>test</literal> method, so an error will occur. <placeholder-1/> This code will result in an error like this: <screen>\n<userinput>ecpg test_cpp.pgc</userinput>\ntest_cpp.pgc:28: ERROR: variable \"dbname\" is not declared\n</screen>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5996(programlisting) 
#, no-wrap
msgid "\nvoid TestCpp::test()\n{\n    EXEC SQL BEGIN DECLARE SECTION;\n    char tmp[1024];\n    EXEC SQL END DECLARE SECTION;\n\n    EXEC SQL SELECT current_database() INTO :tmp;\n    strlcpy(dbname, tmp, sizeof(tmp));\n\n    printf(\"current_database = %s\\n\", dbname);\n}\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:5990(para) 
msgid "To avoid this scope issue, the <literal>test</literal> method could be modified to use a local variable as intermediate storage. But this approach is only a poor workaround, because it uglifies the code and reduces performance. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6013(title) 
msgid "C++ Application Development with External C Module"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6015(para) 
msgid "If you understand these technical limitations of the <command>ecpg</command> preprocessor in C++, you might come to the conclusion that linking C objects and C++ objects at the link stage to enable C++ applications to use ECPG features could be better than writing some embedded SQL commands in C++ code directly. This section describes a way to separate some embedded SQL commands from C++ application code with a simple example. In this example, the application is implemented in C++, while C and ECPG is used to connect to the PostgreSQL server."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6033(filename) 
msgid "test_mod.pgc"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6040(programlisting) 
#, no-wrap
msgid "\n#include \"test_mod.h\"\n#include &lt;stdio.h&gt;\n\nvoid\ndb_connect()\n{\n    EXEC SQL CONNECT TO testdb1;\n}\n\nvoid\ndb_test()\n{\n    EXEC SQL BEGIN DECLARE SECTION;\n    char dbname[1024];\n    EXEC SQL END DECLARE SECTION;\n\n    EXEC SQL SELECT current_database() INTO :dbname;\n    printf(\"current_database = %s\\n\", dbname);\n}\n\nvoid\ndb_disconnect()\n{\n    EXEC SQL DISCONNECT ALL;\n}\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6035(para) 
msgid "A sub-routine module to execute SQL commands embedded in C. It is going to be converted into <filename>test_mod.c</filename> by the preprocessor. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6072(filename) 
msgid "test_mod.h"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6081(programlisting) 
#, no-wrap
msgid "\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\nvoid db_connect();\nvoid db_test();\nvoid db_disconnect();\n\n#ifdef __cplusplus\n}\n#endif\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6074(para) 
msgid "A header file with declarations of the functions in the C module (<filename>test_mod.pgc</filename>). It is included by <filename>test_cpp.cpp</filename>. This file has to have an <literal>extern \"C\"</literal> block around the declarations, because it will be linked from the C++ module. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6099(filename) 
msgid "test_cpp.cpp"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6106(programlisting) 
#, no-wrap
msgid "\n#include \"test_mod.h\"\n\nclass TestCpp\n{\n  public:\n    TestCpp();\n    void test();\n    ~TestCpp();\n};\n\nTestCpp::TestCpp()\n{\n    db_connect();\n}\n\nvoid\nTestCpp::test()\n{\n    db_test();\n}\n\nTestCpp::~TestCpp()\n{\n    db_disconnect();\n}\n\nint\nmain(void)\n{\n    TestCpp *t = new TestCpp();\n\n    t-&gt;test();\n    return 0;\n}\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6101(para) 
msgid "The main code for the application, including the <function>main</function> routine, and in this example a C++ class. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6027(para) 
msgid "Three kinds of files have to be created: a C file (<filename>*.pgc</filename>), a header file, and a C++ file: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6154(programlisting) 
#, no-wrap
msgid "\necpg -o test_mod.c test_mod.pgc\ncc -c test_mod.c -o test_mod.o\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6148(para) 
msgid "To build the application, proceed as follows. Convert <filename>test_mod.pgc</filename> into <filename>test_mod.c</filename> by running <command>ecpg</command>, and generate <filename>test_mod.o</filename> by compiling <filename>test_mod.c</filename> with the C compiler: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6163(programlisting) 
#, no-wrap
msgid "\nc++ -c test_cpp.cpp -o test_cpp.o\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6160(para) 
msgid "Next, generate <filename>test_cpp.o</filename> by compiling <filename>test_cpp.cpp</filename> with the C++ compiler:. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6172(programlisting) 
#, no-wrap
msgid "\nc++ test_cpp.o test_mod.o -lecpg -o test_cpp\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6168(para) 
msgid "Finally, link these object files, <filename>test_cpp.o</filename> and <filename>test_mod.o</filename>, into one executable, using the C++ compiler driver: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6180(title) 
msgid "Embedded SQL Commands"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6182(para) 
msgid "This section describes all SQL commands that are specific to embedded SQL. Also refer to the SQL commands listed in <xref linkend=\"sql-commands\"/>, which can also be used in embedded SQL, unless stated otherwise."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6191(refname) 
msgid "ALLOCATE DESCRIPTOR"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6192(refpurpose) 
msgid "allocate an SQL descriptor area"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6196(synopsis) 
#, no-wrap
msgid "\nALLOCATE DESCRIPTOR <placeholder-1/>\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6202(title) /tmp/cicero-YDWB/ecpg.xml:6276(title) /tmp/cicero-YDWB/ecpg.xml:6491(title) /tmp/cicero-YDWB/ecpg.xml:6558(title) /tmp/cicero-YDWB/ecpg.xml:6670(title) /tmp/cicero-YDWB/ecpg.xml:6760(title) /tmp/cicero-YDWB/ecpg.xml:6867(title) /tmp/cicero-YDWB/ecpg.xml:6929(title) /tmp/cicero-YDWB/ecpg.xml:7118(title) /tmp/cicero-YDWB/ecpg.xml:7210(title) /tmp/cicero-YDWB/ecpg.xml:7289(title) /tmp/cicero-YDWB/ecpg.xml:7323(title) /tmp/cicero-YDWB/ecpg.xml:7398(title) /tmp/cicero-YDWB/ecpg.xml:7513(title) /tmp/cicero-YDWB/ecpg.xml:7651(title) /tmp/cicero-YDWB/ecpg.xml:7715(title) 
msgid "Description"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6204(para) 
msgid "<command>ALLOCATE DESCRIPTOR</command> allocates a new named SQL descriptor area, which can be used to exchange data between the PostgreSQL server and the host program."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6210(para) 
msgid "Descriptor areas should be freed after use using the <command>DEALLOCATE DESCRIPTOR</command> command."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6217(title) /tmp/cicero-YDWB/ecpg.xml:6285(title) /tmp/cicero-YDWB/ecpg.xml:6500(title) /tmp/cicero-YDWB/ecpg.xml:6574(title) /tmp/cicero-YDWB/ecpg.xml:6680(title) /tmp/cicero-YDWB/ecpg.xml:6769(title) /tmp/cicero-YDWB/ecpg.xml:6877(title) /tmp/cicero-YDWB/ecpg.xml:6951(title) /tmp/cicero-YDWB/ecpg.xml:7131(title) /tmp/cicero-YDWB/ecpg.xml:7222(title) /tmp/cicero-YDWB/ecpg.xml:7333(title) /tmp/cicero-YDWB/ecpg.xml:7415(title) /tmp/cicero-YDWB/ecpg.xml:7528(title) /tmp/cicero-YDWB/ecpg.xml:7661(title) /tmp/cicero-YDWB/ecpg.xml:7724(title) 
msgid "Parameters"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6223(para) 
msgid "A name of SQL descriptor, case sensitive. This can be an SQL identifier or a host variable."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6233(title) /tmp/cicero-YDWB/ecpg.xml:6392(title) /tmp/cicero-YDWB/ecpg.xml:6517(title) /tmp/cicero-YDWB/ecpg.xml:6616(title) /tmp/cicero-YDWB/ecpg.xml:6715(title) /tmp/cicero-YDWB/ecpg.xml:6816(title) /tmp/cicero-YDWB/ecpg.xml:6893(title) /tmp/cicero-YDWB/ecpg.xml:7008(title) /tmp/cicero-YDWB/ecpg.xml:7169(title) /tmp/cicero-YDWB/ecpg.xml:7248(title) /tmp/cicero-YDWB/ecpg.xml:7358(title) /tmp/cicero-YDWB/ecpg.xml:7472(title) /tmp/cicero-YDWB/ecpg.xml:7552(title) /tmp/cicero-YDWB/ecpg.xml:7685(title) /tmp/cicero-YDWB/ecpg.xml:7733(title) 
msgid "Examples"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6235(programlisting) 
#, no-wrap
msgid "\nEXEC SQL ALLOCATE DESCRIPTOR mydesc;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6241(title) /tmp/cicero-YDWB/ecpg.xml:6459(title) /tmp/cicero-YDWB/ecpg.xml:6525(title) /tmp/cicero-YDWB/ecpg.xml:6637(title) /tmp/cicero-YDWB/ecpg.xml:6727(title) /tmp/cicero-YDWB/ecpg.xml:6837(title) /tmp/cicero-YDWB/ecpg.xml:6907(title) /tmp/cicero-YDWB/ecpg.xml:7086(title) /tmp/cicero-YDWB/ecpg.xml:7180(title) /tmp/cicero-YDWB/ecpg.xml:7260(title) /tmp/cicero-YDWB/ecpg.xml:7302(title) /tmp/cicero-YDWB/ecpg.xml:7367(title) /tmp/cicero-YDWB/ecpg.xml:7483(title) /tmp/cicero-YDWB/ecpg.xml:7630(title) /tmp/cicero-YDWB/ecpg.xml:7694(title) /tmp/cicero-YDWB/ecpg.xml:7783(title) 
msgid "Compatibility"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6243(para) 
msgid "<command>ALLOCATE DESCRIPTOR</command> is specified in the SQL standard."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6250(title) /tmp/cicero-YDWB/ecpg.xml:6469(title) /tmp/cicero-YDWB/ecpg.xml:6534(title) /tmp/cicero-YDWB/ecpg.xml:6645(title) /tmp/cicero-YDWB/ecpg.xml:6735(title) /tmp/cicero-YDWB/ecpg.xml:6845(title) /tmp/cicero-YDWB/ecpg.xml:7094(title) /tmp/cicero-YDWB/ecpg.xml:7188(title) /tmp/cicero-YDWB/ecpg.xml:7268(title) /tmp/cicero-YDWB/ecpg.xml:7375(title) /tmp/cicero-YDWB/ecpg.xml:7491(title) 
msgid "See Also"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6262(refname) 
msgid "CONNECT"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6263(refpurpose) 
msgid "establish a database connection"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6268(replaceable) /tmp/cicero-YDWB/ecpg.xml:6271(replaceable) /tmp/cicero-YDWB/ecpg.xml:6289(replaceable) 
msgid "connection_target"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6268(replaceable) /tmp/cicero-YDWB/ecpg.xml:6752(replaceable) /tmp/cicero-YDWB/ecpg.xml:6773(replaceable) /tmp/cicero-YDWB/ecpg.xml:7318(replaceable) /tmp/cicero-YDWB/ecpg.xml:7337(replaceable) 
msgid "connection_name"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6268(replaceable) /tmp/cicero-YDWB/ecpg.xml:6270(replaceable) 
msgid "connection_user_name"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6267(synopsis) 
#, no-wrap
msgid "\nCONNECT TO <placeholder-1/> [ AS <placeholder-2/> ] [ USER <placeholder-3/> ]\nCONNECT TO DEFAULT\nCONNECT <placeholder-4/>\nDATABASE <placeholder-5/>\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6278(para) 
msgid "The <command>CONNECT</command> command establishes a connection between the client and the PostgreSQL server."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6298(term) 
msgid "[ <replaceable>database_name</replaceable> ] [ <literal>@</literal><replaceable>host</replaceable> ] [ <literal>:</literal><replaceable>port</replaceable> ]"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6300(para) /tmp/cicero-YDWB/ecpg.xml:6318(para) 
msgid "Connect over TCP/IP"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6307(term) 
msgid "<literal>unix:postgresql://</literal><replaceable>host</replaceable> [ <literal>:</literal><replaceable>port</replaceable> ] <literal>/</literal> [ <replaceable>database_name</replaceable> ] [ <literal>?</literal><replaceable>connection_option</replaceable> ]"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6309(para) 
msgid "Connect over Unix-domain sockets"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6316(term) 
msgid "<literal>tcp:postgresql://</literal><replaceable>host</replaceable> [ <literal>:</literal><replaceable>port</replaceable> ] <literal>/</literal> [ <replaceable>database_name</replaceable> ] [ <literal>?</literal><replaceable>connection_option</replaceable> ]"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6325(term) 
msgid "SQL string constant"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6327(para) 
msgid "containing a value in one of the above forms"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6334(term) 
msgid "host variable"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6336(para) 
msgid "host variable of type <type>char[]</type> or <type>VARCHAR[]</type> containing a value in one of the above forms"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6291(para) 
msgid "<replaceable class=\"PARAMETER\">connection_target</replaceable> specifies the target server of the connection on one of several forms. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6349(replaceable) 
msgid "connection_object"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6351(para) 
msgid "An optional identifier for the connection, so that it can be referred to in other commands. This can be an SQL identifier or a host variable."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6360(replaceable) 
msgid "connection_user"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6362(para) 
msgid "The user name for the database connection."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6366(para) 
msgid "This parameter can also specify user name and password, using one the forms <literal><replaceable>user_name</replaceable>/<replaceable>password</replaceable></literal>, <literal><replaceable>user_name</replaceable> IDENTIFIED BY <replaceable>password</replaceable></literal>, or <literal><replaceable>user_name</replaceable> USING <replaceable>password</replaceable></literal>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6373(para) 
msgid "User name and password can be SQL identifiers, string constants, or host variables."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6383(para) 
msgid "Use all default connection parameters, as defined by libpq."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6396(programlisting) 
#, no-wrap
msgid "\nEXEC SQL CONNECT TO \"connectdb\" AS main;\nEXEC SQL CONNECT TO \"connectdb\" AS second;\nEXEC SQL CONNECT TO \"unix:postgresql://200.46.204.71/connectdb\" AS main USER connectuser;\nEXEC SQL CONNECT TO \"unix:postgresql://localhost/connectdb\" AS main USER connectuser;\nEXEC SQL CONNECT TO 'connectdb' AS main;\nEXEC SQL CONNECT TO 'unix:postgresql://localhost/connectdb' AS main USER :user;\nEXEC SQL CONNECT TO :db AS :id;\nEXEC SQL CONNECT TO :db USER connectuser USING :pw;\nEXEC SQL CONNECT TO @localhost AS main USER connectdb;\nEXEC SQL CONNECT TO REGRESSDB1 as main;\nEXEC SQL CONNECT TO AS main USER connectdb;\nEXEC SQL CONNECT TO connectdb AS :id;\nEXEC SQL CONNECT TO connectdb AS main USER connectuser/connectdb;\nEXEC SQL CONNECT TO connectdb AS main;\nEXEC SQL CONNECT TO connectdb@localhost AS main;\nEXEC SQL CONNECT TO tcp:postgresql://localhost/ USER connectdb;\nEXEC SQL CONNECT TO tcp:postgresql://localhost/connectdb USER connectuser IDENTIFIED BY connectpw;\nEXEC SQL CONNECT TO tcp:postgresql://localhost:20/connectdb USER connectuser IDENTIFIED BY connectpw;\nEXEC SQL CONNECT TO unix:postgresql://localhost/ AS main USER connectdb;\nEXEC SQL CONNECT TO unix:postgresql://localhost/connectdb AS main USER connectuser;\nEXEC SQL CONNECT TO unix:postgresql://localhost/connectdb USER connectuser IDENTIFIED BY \"connectpw\";\nEXEC SQL CONNECT TO unix:postgresql://localhost/connectdb USER connectuser USING \"connectpw\";\nEXEC SQL CONNECT TO unix:postgresql://localhost/connectdb?connect_timeout=14 USER connectuser;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6394(para) 
msgid "Here a several variants for specifying connection parameters: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6426(programlisting) 
#, no-wrap
msgid "\nint\nmain(void)\n{\nEXEC SQL BEGIN DECLARE SECTION;\n    char *dbname     = \"testdb\";    /* database name */\n    char *user       = \"testuser\";  /* connection user name */\n    char *connection = \"tcp:postgresql://localhost:5432/testdb\";\n                                    /* connection string */\n    char ver[256];                  /* buffer to store the version string */\nEXEC SQL END DECLARE SECTION;\n\n    ECPGdebug(1, stderr);\n\n    EXEC SQL CONNECT TO :dbname USER :user;\n    EXEC SQL SELECT version() INTO :ver;\n    EXEC SQL DISCONNECT;\n\n    printf(\"version: %s\\n\", ver);\n\n    EXEC SQL CONNECT TO :connection USER :user;\n    EXEC SQL SELECT version() INTO :ver;\n    EXEC SQL DISCONNECT;\n\n    printf(\"version: %s\\n\", ver);\n\n    return 0;\n}\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6423(para) 
msgid "Here is an example program that illustrates the use of host variables to specify connection parameters: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6461(para) 
msgid "<command>CONNECT</command> is specified in the SQL standard, but the format of the connection parameters is implementation-specific."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6480(refname) 
msgid "DEALLOCATE DESCRIPTOR"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6481(refpurpose) 
msgid "deallocate an SQL descriptor area"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6485(synopsis) 
#, no-wrap
msgid "\nDEALLOCATE DESCRIPTOR <placeholder-1/>\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6493(para) 
msgid "<command>DEALLOCATE DESCRIPTOR</command> deallocates a named SQL descriptor area."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6506(para) 
msgid "The name of the descriptor which is going to be deallocated. It is case sensitive. This can be an SQL identifier or a host variable."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6519(programlisting) 
#, no-wrap
msgid "\nEXEC SQL DEALLOCATE DESCRIPTOR mydesc;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6527(para) 
msgid "<command>DEALLOCATE DESCRIPTOR</command> is specified in the SQL standard."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6546(refname) 
msgid "DECLARE"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6547(refpurpose) 
msgid "define a cursor"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6552(replaceable) /tmp/cicero-YDWB/ecpg.xml:6553(replaceable) /tmp/cicero-YDWB/ecpg.xml:6578(replaceable) /tmp/cicero-YDWB/ecpg.xml:7111(replaceable) /tmp/cicero-YDWB/ecpg.xml:7112(replaceable) /tmp/cicero-YDWB/ecpg.xml:7113(replaceable) /tmp/cicero-YDWB/ecpg.xml:7135(replaceable) 
msgid "cursor_name"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6552(replaceable) /tmp/cicero-YDWB/ecpg.xml:6588(replaceable) /tmp/cicero-YDWB/ecpg.xml:6663(replaceable) /tmp/cicero-YDWB/ecpg.xml:6664(replaceable) /tmp/cicero-YDWB/ecpg.xml:6665(replaceable) /tmp/cicero-YDWB/ecpg.xml:6684(replaceable) /tmp/cicero-YDWB/ecpg.xml:7226(replaceable) 
msgid "prepared_name"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6553(replaceable) /tmp/cicero-YDWB/ecpg.xml:6598(replaceable) 
msgid "query"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6551(synopsis) 
#, no-wrap
msgid "\nDECLARE <placeholder-1/> [ BINARY ] [ INSENSITIVE ] [ [ NO ] SCROLL ] CURSOR [ { WITH | WITHOUT } HOLD ] FOR <placeholder-2/>\nDECLARE <placeholder-3/> [ BINARY ] [ INSENSITIVE ] [ [ NO ] SCROLL ] CURSOR [ { WITH | WITHOUT } HOLD ] FOR <placeholder-4/>\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6560(para) 
msgid "<command>DECLARE</command> declares a cursor for iterating over the result set of a prepared statement. This command has slightly different semantics from the direct SQL command <command>DECLARE</command>: Whereas the latter executes a query and prepares the result set for retrieval, this embedded SQL command merely declares a name as a <quote>loop variable</quote> for iterating over the result set of a query; the actual execution happens when the cursor is opened with the <command>OPEN</command> command."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6580(para) 
msgid "A cursor name, case sensitive. This can be an SQL identifier or a host variable."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6590(para) 
msgid "The name of a prepared query, either as an SQL identifier or a host variable."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6600(para) 
msgid "A <xref linkend=\"sql-select\"/> or <xref linkend=\"sql-values\"/> command which will provide the rows to be returned by the cursor."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6609(para) 
msgid "For the meaning of the cursor options, see <xref linkend=\"sql-declare\"/>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6620(programlisting) 
#, no-wrap
msgid "\nEXEC SQL DECLARE C CURSOR FOR SELECT * FROM My_Table;\nEXEC SQL DECLARE C CURSOR FOR SELECT Item1 FROM T;\nEXEC SQL DECLARE cur1 CURSOR FOR SELECT version();\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6618(para) 
msgid "Examples declaring a cursor for a query: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6629(programlisting) 
#, no-wrap
msgid "\nEXEC SQL PREPARE stmt1 AS SELECT version();\nEXEC SQL DECLARE cur1 CURSOR FOR stmt1;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6627(para) 
msgid "An example declaring a cursor for a prepared statement: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6639(para) 
msgid "<command>DECLARE</command> is specified in the SQL standard."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6657(refname) 
msgid "DESCRIBE"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6658(refpurpose) 
msgid "obtain information about a prepared statement or result set"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6663(replaceable) /tmp/cicero-YDWB/ecpg.xml:6664(replaceable) /tmp/cicero-YDWB/ecpg.xml:6694(replaceable) /tmp/cicero-YDWB/ecpg.xml:6923(replaceable) /tmp/cicero-YDWB/ecpg.xml:6924(replaceable) /tmp/cicero-YDWB/ecpg.xml:6955(replaceable) /tmp/cicero-YDWB/ecpg.xml:7113(replaceable) /tmp/cicero-YDWB/ecpg.xml:7156(replaceable) /tmp/cicero-YDWB/ecpg.xml:7392(replaceable) /tmp/cicero-YDWB/ecpg.xml:7393(replaceable) /tmp/cicero-YDWB/ecpg.xml:7419(replaceable) 
msgid "descriptor_name"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6665(replaceable) /tmp/cicero-YDWB/ecpg.xml:6704(replaceable) 
msgid "sqlda_name"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6662(synopsis) 
#, no-wrap
msgid "\nDESCRIBE [ OUTPUT ] <placeholder-1/> USING [ SQL ] DESCRIPTOR <placeholder-2/>\nDESCRIBE [ OUTPUT ] <placeholder-3/> INTO [ SQL ] DESCRIPTOR <placeholder-4/>\nDESCRIBE [ OUTPUT ] <placeholder-5/> INTO <placeholder-6/>\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6672(para) 
msgid "<command>DESCRIBE</command> retrieves metadata information about the result columns contained in a prepared statement, without actually fetching a row."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6686(para) 
msgid "The name of a prepared statement. This can be an SQL identifier or a host variable."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6696(para) 
msgid "A descriptor name. It is case sensitive. It can be an SQL identifier or a host variable."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6706(para) 
msgid "The name of an SQLDA variable."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6717(programlisting) 
#, no-wrap
msgid "\nEXEC SQL ALLOCATE DESCRIPTOR mydesc;\nEXEC SQL PREPARE stmt1 FROM :sql_stmt;\nEXEC SQL DESCRIBE stmt1 INTO SQL DESCRIPTOR mydesc;\nEXEC SQL GET DESCRIPTOR mydesc VALUE 1 :charvar = NAME;\nEXEC SQL DEALLOCATE DESCRIPTOR mydesc;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6729(para) 
msgid "<command>DESCRIBE</command> is specified in the SQL standard."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6746(refname) 
msgid "DISCONNECT"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6747(refpurpose) 
msgid "terminate a database connection"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6751(synopsis) 
#, no-wrap
msgid "\nDISCONNECT <placeholder-1/>\nDISCONNECT [ CURRENT ]\nDISCONNECT DEFAULT\nDISCONNECT ALL\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6762(para) 
msgid "<command>DISCONNECT</command> closes a connection (or all connections) to the database."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6775(para) /tmp/cicero-YDWB/ecpg.xml:7339(para) 
msgid "A database connection name established by the <command>CONNECT</command> command."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6785(para) 
msgid "Close the <quote>current</quote> connection, which is either the most recently opened connection, or the connection set by the <command>SET CONNECTION</command> command. This is also the default if no argument is given to the <command>DISCONNECT</command> command."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6798(para) 
msgid "Close the default connection."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6807(para) 
msgid "Close all open connections."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6818(programlisting) 
#, no-wrap
msgid "\nint\nmain(void)\n{\n    EXEC SQL CONNECT TO testdb AS DEFAULT USER testuser;\n    EXEC SQL CONNECT TO testdb AS con1 USER testuser;\n    EXEC SQL CONNECT TO testdb AS con2 USER testuser;\n    EXEC SQL CONNECT TO testdb AS con3 USER testuser;\n\n    EXEC SQL DISCONNECT CURRENT;  /* close con3          */\n    EXEC SQL DISCONNECT DEFAULT;  /* close DEFAULT       */\n    EXEC SQL DISCONNECT ALL;      /* close con2 and con1 */\n\n    return 0;\n}\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6839(para) 
msgid "<command>DISCONNECT</command> is specified in the SQL standard."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6856(refname) 
msgid "EXECUTE IMMEDIATE"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6857(refpurpose) 
msgid "dynamically prepare and execute a statement"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6862(replaceable) /tmp/cicero-YDWB/ecpg.xml:6881(replaceable) /tmp/cicero-YDWB/ecpg.xml:7205(replaceable) /tmp/cicero-YDWB/ecpg.xml:7235(replaceable) 
msgid "string"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6861(synopsis) 
#, no-wrap
msgid "\nEXECUTE IMMEDIATE <placeholder-1/>\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6869(para) 
msgid "<command>EXECUTE IMMEDIATE</command> immediately prepares and executes a dynamically specified SQL statement, without retrieving result rows."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6883(para) 
msgid "A literal C string or a host variable containing the SQL statement to be executed."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6899(programlisting) 
#, no-wrap
msgid "\nsprintf(command, \"INSERT INTO test (name, amount, letter) VALUES ('db: ''r1''', 1, 'f')\");\nEXEC SQL EXECUTE IMMEDIATE :command;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6895(para) 
msgid "Here is an example that executes an <command>INSERT</command> statement using <command>EXECUTE IMMEDIATE</command> and a host variable named <varname>command</varname>: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6909(para) 
msgid "<command>EXECUTE IMMEDIATE</command> is specified in the SQL standard."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6917(refname) 
msgid "GET DESCRIPTOR"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6918(refpurpose) 
msgid "get information from an SQL descriptor area"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6923(replaceable) /tmp/cicero-YDWB/ecpg.xml:6924(replaceable) 
msgid ":cvariable"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6923(replaceable) /tmp/cicero-YDWB/ecpg.xml:6964(replaceable) /tmp/cicero-YDWB/ecpg.xml:7392(replaceable) /tmp/cicero-YDWB/ecpg.xml:7428(replaceable) 
msgid "descriptor_header_item"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6924(replaceable) /tmp/cicero-YDWB/ecpg.xml:6975(replaceable) 
msgid "column_number"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6924(replaceable) /tmp/cicero-YDWB/ecpg.xml:6985(replaceable) /tmp/cicero-YDWB/ecpg.xml:7393(replaceable) /tmp/cicero-YDWB/ecpg.xml:7449(replaceable) 
msgid "descriptor_item"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6922(synopsis) 
#, no-wrap
msgid "\nGET DESCRIPTOR <placeholder-1/> <placeholder-2/> = <placeholder-3/> [, ... ]\nGET DESCRIPTOR <placeholder-4/> VALUE <placeholder-5/> <placeholder-6/> = <placeholder-7/> [, ... ]\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6931(para) 
msgid "<command>GET DESCRIPTOR</command> retrieves information about a query result set from an SQL descriptor area and stores it into host variables. A descriptor area is typically populated using <command>FETCH</command> or <command>SELECT</command> before using this command to transfer the information into host language variables."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6940(para) 
msgid "This command has two forms: The first form retrieves descriptor <quote>header</quote> items, which apply to the result set in its entirety. One example is the row count. The second form, which requires the column number as additional parameter, retrieves information about a particular column. Examples are the column name and the actual column value."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6957(para) /tmp/cicero-YDWB/ecpg.xml:7421(para) 
msgid "A descriptor name."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6966(para) 
msgid "A token identifying which header information item to retrieve. Only <literal>COUNT</literal>, to get the number of columns in the result set, is currently supported."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6977(para) 
msgid "The number of the column about which information is to be retrieved. The count starts at 1."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6987(para) 
msgid "A token identifying which item of information about a column to retrieve. See <xref linkend=\"ecpg-named-descriptors\"/> for a list of supported items."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6996(replaceable) 
msgid "cvariable"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:6998(para) 
msgid "A host variable that will receive the data retrieved from the descriptor area."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7012(programlisting) 
#, no-wrap
msgid "\nEXEC SQL GET DESCRIPTOR d :d_count = COUNT;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7010(para) 
msgid "An example to retrieve the number of columns in a result set: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7019(programlisting) 
#, no-wrap
msgid "\nEXEC SQL GET DESCRIPTOR d VALUE 1 :d_returned_octet_length = RETURNED_OCTET_LENGTH;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7017(para) 
msgid "An example to retrieve a data length in the first column: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7027(programlisting) 
#, no-wrap
msgid "\nEXEC SQL GET DESCRIPTOR d VALUE 2 :d_data = DATA;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7024(para) 
msgid "An example to retrieve the data body of the second column as a string: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7036(programlisting) 
#, no-wrap
msgid "\nint\nmain(void)\n{\nEXEC SQL BEGIN DECLARE SECTION;\n    int  d_count;\n    char d_data[1024];\n    int  d_returned_octet_length;\nEXEC SQL END DECLARE SECTION;\n\n    EXEC SQL CONNECT TO testdb AS con1 USER testuser;\n    EXEC SQL ALLOCATE DESCRIPTOR d;\n\n    /* Declare, open a cursor, and assign a descriptor to the cursor  */\n    EXEC SQL DECLARE cur CURSOR FOR SELECT current_database();\n    EXEC SQL OPEN cur;\n    EXEC SQL FETCH NEXT FROM cur INTO SQL DESCRIPTOR d;\n\n    /* Get a number of total columns */\n    EXEC SQL GET DESCRIPTOR d :d_count = COUNT;\n    printf(\"d_count                 = %d\\n\", d_count);\n\n    /* Get length of a returned column */\n    EXEC SQL GET DESCRIPTOR d VALUE 1 :d_returned_octet_length = RETURNED_OCTET_LENGTH;\n    printf(\"d_returned_octet_length = %d\\n\", d_returned_octet_length);\n\n    /* Fetch the returned column as a string */\n    EXEC SQL GET DESCRIPTOR d VALUE 1 :d_data = DATA;\n    printf(\"d_data                  = %s\\n\", d_data);\n\n    /* Closing */\n    EXEC SQL CLOSE cur;\n    EXEC SQL COMMIT;\n\n    EXEC SQL DEALLOCATE DESCRIPTOR d;\n    EXEC SQL DISCONNECT ALL;\n\n    return 0;\n}\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7032(para) 
msgid "Here is an example for a whole procedure of executing <literal>SELECT current_database();</literal> and showing the number of columns, the column data length, and the column data: <placeholder-1/> When the example is executed, the result will look like this: <screen>\nd_count                 = 1\nd_returned_octet_length = 6\nd_data                  = testdb\n</screen>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7088(para) 
msgid "<command>GET DESCRIPTOR</command> is specified in the SQL standard."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7105(refname) 
msgid "OPEN"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7106(refpurpose) 
msgid "open a dynamic cursor"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7112(replaceable) /tmp/cicero-YDWB/ecpg.xml:7145(replaceable) /tmp/cicero-YDWB/ecpg.xml:7392(replaceable) /tmp/cicero-YDWB/ecpg.xml:7393(replaceable) /tmp/cicero-YDWB/ecpg.xml:7460(replaceable) 
msgid "value"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7110(synopsis) 
#, no-wrap
msgid "\nOPEN <placeholder-1/>\nOPEN <placeholder-2/> USING <placeholder-3/> [, ... ]\nOPEN <placeholder-4/> USING SQL DESCRIPTOR <placeholder-5/>\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7120(para) 
msgid "<command>OPEN</command> opens a cursor and optionally binds actual values to the placeholders in the cursor's declaration. The cursor must previously have been declared with the <command>DECLARE</command> command. The execution of <command>OPEN</command> causes the query to start executing on the server."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7137(para) 
msgid "The name of the cursor to be opened. This can be an SQL identifier or a host variable."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7147(para) 
msgid "A value to be bound to a placeholder in the cursor. This can be an SQL constant, a host variable, or a host variable with indicator."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7158(para) 
msgid "The name of a descriptor containing values to be bound to the placeholders in the cursor. This can be an SQL identifier or a host variable."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7171(programlisting) 
#, no-wrap
msgid "\nEXEC SQL OPEN a;\nEXEC SQL OPEN d USING 1, 'test';\nEXEC SQL OPEN c1 USING SQL DESCRIPTOR mydesc;\nEXEC SQL OPEN :curname1;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7182(para) 
msgid "<command>OPEN</command> is specified in the SQL standard."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7199(refname) 
msgid "PREPARE"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7200(refpurpose) 
msgid "prepare a statement for execution"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7204(synopsis) 
#, no-wrap
msgid "\nPREPARE <placeholder-1/> FROM <placeholder-2/>\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7212(para) 
msgid "<command>PREPARE</command> prepares a statement dynamically specified as a string for execution. This is different from the direct SQL statement <xref linkend=\"sql-prepare\"/>, which can also be used in embedded programs. The <xref linkend=\"sql-execute\"/> command is used to execute either kind of prepared statement."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7228(para) 
msgid "An identifier for the prepared query."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7237(para) 
msgid "A literal C string or a host variable containing a preparable statement, one of the SELECT, INSERT, UPDATE, or DELETE."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7249(programlisting) 
#, no-wrap
msgid "\nchar *stmt = \"SELECT * FROM test1 WHERE a = ? AND b = ?\";\n\nEXEC SQL ALLOCATE DESCRIPTOR outdesc;\nEXEC SQL PREPARE foo FROM :stmt;\n\nEXEC SQL EXECUTE foo USING SQL DESCRIPTOR indesc INTO SQL DESCRIPTOR outdesc;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7262(para) 
msgid "<command>PREPARE</command> is specified in the SQL standard."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7278(refname) 
msgid "SET AUTOCOMMIT"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7279(refpurpose) 
msgid "set the autocommit behavior of the current session"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7283(synopsis) 
#, no-wrap
msgid "\nSET AUTOCOMMIT { = | TO } { ON | OFF }\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7291(para) 
msgid "<command>SET AUTOCOMMIT</command> sets the autocommit behavior of the current database session. By default, embedded SQL programs are <emphasis>not</emphasis> in autocommit mode, so <command>COMMIT</command> needs to be issued explicitly when desired. This command can change the session to autocommit mode, where each individual statement is committed implicitly."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7304(para) 
msgid "<command>SET AUTOCOMMIT</command> is an extension of PostgreSQL ECPG."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7312(refname) 
msgid "SET CONNECTION"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7313(refpurpose) 
msgid "select a database connection"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7317(synopsis) 
#, no-wrap
msgid "\nSET CONNECTION [ TO | = ] <placeholder-1/>\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7325(para) 
msgid "<command>SET CONNECTION</command> sets the <quote>current</quote> database connection, which is the one that all commands use unless overridden."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7349(para) 
msgid "Set the connection to the default connection."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7360(programlisting) 
#, no-wrap
msgid "\nEXEC SQL SET CONNECTION TO con2;\nEXEC SQL SET CONNECTION = con1;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7369(para) 
msgid "<command>SET CONNECTION</command> is specified in the SQL standard."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7386(refname) 
msgid "SET DESCRIPTOR"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7387(refpurpose) 
msgid "set information in an SQL descriptor area"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7393(replaceable) /tmp/cicero-YDWB/ecpg.xml:7439(replaceable) 
msgid "number"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7391(synopsis) 
#, no-wrap
msgid "\nSET DESCRIPTOR <placeholder-1/> <placeholder-2/> = <placeholder-3/> [, ... ]\nSET DESCRIPTOR <placeholder-4/> VALUE <placeholder-5/> <placeholder-6/> = <placeholder-7/> [, ...]\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7400(para) 
msgid "<command>SET DESCRIPTOR</command> populates an SQL descriptor area with values. The descriptor area is then typically used to bind parameters in a prepared query execution."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7406(para) 
msgid "This command has two forms: The first form applies to the descriptor <quote>header</quote>, which is independent of a particular datum. The second form assigns values to particular datums, identified by number."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7430(para) 
msgid "A token identifying which header information item to set. Only <literal>COUNT</literal>, to set the number of descriptor items, is currently supported."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7441(para) 
msgid "The number of the descriptor item to set. The count starts at 1."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7451(para) 
msgid "A token identifying which item of information to set in the descriptor. See <xref linkend=\"ecpg-named-descriptors\"/> for a list of supported items."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7462(para) 
msgid "A value to store into the descriptor item. This can be an SQL constant or a host variable."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7473(programlisting) 
#, no-wrap
msgid "\nEXEC SQL SET DESCRIPTOR indesc COUNT = 1;\nEXEC SQL SET DESCRIPTOR indesc VALUE 1 DATA = 2;\nEXEC SQL SET DESCRIPTOR indesc VALUE 1 DATA = :val1;\nEXEC SQL SET DESCRIPTOR indesc VALUE 2 INDICATOR = :val1, DATA = 'some string';\nEXEC SQL SET DESCRIPTOR indesc VALUE 2 INDICATOR = :val2null, DATA = :val2;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7485(para) 
msgid "<command>SET DESCRIPTOR</command> is specified in the SQL standard."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7502(refname) 
msgid "TYPE"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7503(refpurpose) 
msgid "define a new data type"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7508(replaceable) /tmp/cicero-YDWB/ecpg.xml:7532(replaceable) 
msgid "type_name"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7508(replaceable) /tmp/cicero-YDWB/ecpg.xml:7541(replaceable) /tmp/cicero-YDWB/ecpg.xml:7646(replaceable) /tmp/cicero-YDWB/ecpg.xml:7674(replaceable) 
msgid "ctype"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7507(synopsis) 
#, no-wrap
msgid "\nTYPE <placeholder-1/> IS <placeholder-2/>\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7515(para) 
msgid "The <command>TYPE</command> command defines a new C type. It is equivalent to putting a <literal>typedef</literal> into a declare section."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7521(para) 
msgid "This command is only recognized when <command>ecpg</command> is run with the <option>-c</option> option."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7534(para) 
msgid "The name for the new type. It must be a valid C type name."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7543(para) /tmp/cicero-YDWB/ecpg.xml:7676(para) 
msgid "A C type specification."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7554(programlisting) 
#, no-wrap
msgid "\nEXEC SQL TYPE customer IS\n    struct\n    {\n        varchar name[50];\n        int     phone;\n    };\n\nEXEC SQL TYPE cust_ind IS\n    struct ind\n    {\n        short   name_ind;\n        short   phone_ind;\n    };\n\nEXEC SQL TYPE c IS char reference;\nEXEC SQL TYPE ind IS union { int integer; short smallint; };\nEXEC SQL TYPE intarray IS int[AMOUNT];\nEXEC SQL TYPE str IS varchar[BUFFERSIZ];\nEXEC SQL TYPE string IS char[11];\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7579(programlisting) 
#, no-wrap
msgid "\nEXEC SQL WHENEVER SQLERROR SQLPRINT;\n\nEXEC SQL TYPE tt IS\n    struct\n    {\n        varchar v[256];\n        int     i;\n    };\n\nEXEC SQL TYPE tt_ind IS\n    struct ind {\n        short   v_ind;\n        short   i_ind;\n    };\n\nint\nmain(void)\n{\nEXEC SQL BEGIN DECLARE SECTION;\n    tt t;\n    tt_ind t_ind;\nEXEC SQL END DECLARE SECTION;\n\n    EXEC SQL CONNECT TO testdb AS con1;\n\n    EXEC SQL SELECT current_database(), 256 INTO :t:t_ind LIMIT 1;\n\n    printf(\"t.v = %s\\n\", t.v.arr);\n    printf(\"t.i = %d\\n\", t.i);\n\n    printf(\"t_ind.v_ind = %d\\n\", t_ind.v_ind);\n    printf(\"t_ind.i_ind = %d\\n\", t_ind.i_ind);\n\n    EXEC SQL DISCONNECT con1;\n\n    return 0;\n}\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7576(para) 
msgid "Here is an example program that uses <command>EXEC SQL TYPE</command>: <placeholder-1/> The output from this program looks like this: <screen>\nt.v = testdb\nt.i = 256\nt_ind.v_ind = 0\nt_ind.i_ind = 0\n</screen>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7632(para) 
msgid "The <command>TYPE</command> command is a PostgreSQL extension."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7640(refname) 
msgid "VAR"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7641(refpurpose) 
msgid "define a variable"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7646(replaceable) /tmp/cicero-YDWB/ecpg.xml:7665(replaceable) 
msgid "varname"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7645(synopsis) 
#, no-wrap
msgid "\nVAR <placeholder-1/> IS <placeholder-2/>\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7653(para) 
msgid "The <command>VAR</command> command defines a host variable. It is equivalent to an ordinary C variable definition inside a declare section."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7667(para) 
msgid "A C variable name."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7687(programlisting) 
#, no-wrap
msgid "\nEXEC SQL VAR vc IS VARCHAR[10];\nEXEC SQL VAR boolvar IS bool;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7696(para) 
msgid "The <command>VAR</command> command is a PostgreSQL extension."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7704(refname) 
msgid "WHENEVER"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7705(refpurpose) 
msgid "specify the action to be taken when an SQL statement causes a specific class condition to be raised"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7710(replaceable) 
msgid "action"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7709(synopsis) 
#, no-wrap
msgid "\nWHENEVER { NOT FOUND | SQLERROR | SQLWARNING } <placeholder-1/>\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7717(para) 
msgid "Define a behavior which is called on the special cases (Rows not found, SQL warnings or errors) in the result of SQL execution."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7726(para) 
msgid "See <xref linkend=\"ecpg-whenever\"/> for a description of the parameters."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7735(programlisting) 
#, no-wrap
msgid "\nEXEC SQL WHENEVER NOT FOUND CONTINUE;\nEXEC SQL WHENEVER NOT FOUND DO BREAK;\nEXEC SQL WHENEVER SQLWARNING SQLPRINT;\nEXEC SQL WHENEVER SQLWARNING DO warn();\nEXEC SQL WHENEVER SQLERROR sqlprint;\nEXEC SQL WHENEVER SQLERROR CALL print2();\nEXEC SQL WHENEVER SQLERROR DO handle_error(\"select\");\nEXEC SQL WHENEVER SQLERROR DO sqlnotice(NULL, NONO);\nEXEC SQL WHENEVER SQLERROR DO sqlprint();\nEXEC SQL WHENEVER SQLERROR GOTO error_label;\nEXEC SQL WHENEVER SQLERROR STOP;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7752(programlisting) 
#, no-wrap
msgid "\nint\nmain(void)\n{\n    EXEC SQL CONNECT TO testdb AS con1;\n    EXEC SQL ALLOCATE DESCRIPTOR d;\n    EXEC SQL DECLARE cur CURSOR FOR SELECT current_database(), 'hoge', 256;\n    EXEC SQL OPEN cur;\n\n    /* when end of result set reached, break out of while loop */\n    EXEC SQL WHENEVER NOT FOUND DO BREAK;\n\n    while (1)\n    {\n        EXEC SQL FETCH NEXT FROM cur INTO SQL DESCRIPTOR d;\n        ...\n    }\n\n    EXEC SQL CLOSE cur;\n    EXEC SQL COMMIT;\n\n    EXEC SQL DEALLOCATE DESCRIPTOR d;\n    EXEC SQL DISCONNECT ALL;\n\n    return 0;\n}\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7749(para) 
msgid "A typical application is the use of <literal>WHENEVER NOT FOUND BREAK</literal> to handle looping through result sets: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7785(para) 
msgid "<command>WHENEVER</command> is specified in the SQL standard, but most of the actions are PostgreSQL extensions."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7794(title) 
msgid "<productname>Informix</productname> Compatibility Mode"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7801(programlisting) 
#, no-wrap
msgid "\n$int j = 3;\n$CONNECT TO :dbname;\n$CREATE TABLE test(i INT PRIMARY KEY, j INT);\n$INSERT INTO test(i, j) VALUES (7, :j);\n$COMMIT;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7795(para) 
msgid "<command>ecpg</command> can be run in a so-called <firstterm>Informix compatibility mode</firstterm>. If this mode is active, it tries to behave as if it were the <productname>Informix</productname> precompiler for <productname>Informix</productname> E/SQL. Generally spoken this will allow you to use the dollar sign instead of the <literal>EXEC SQL</literal> primitive to introduce embedded SQL commands.: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7811(para) 
msgid "There must not be any white space between the <literal>$</literal> and a following preprocessor directive, that is, <literal>include</literal>, <literal>define</literal>, <literal>ifdef</literal>, etc. Otherwise, the preprocessor will parse the token as a host variable."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7820(para) 
msgid "There are two compatibility modes: <literal>INFORMIX</literal>, <literal>INFORMIX_SE</literal>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7823(para) 
msgid "When linking programs that use this compatibility mode, remember to link against <literal>libcompat</literal> that is shipped with ECPG."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7827(para) 
msgid "Besides the previously explained syntactic sugar, the <productname>Informix</productname> compatibility mode ports some functions for input, output and transformation of data as well as embedded SQL statements known from E/SQL to ECPG."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7832(para) 
msgid "<productname>Informix</productname> compatibility mode is closely connected to the pgtypeslib library of ECPG. pgtypeslib maps SQL data types to data types within the C host program and most of the additional functions of the <productname>Informix</productname> compatibility mode allow you to operate on those C host program types. Note however that the extent of the compatibility is limited. It does not try to copy <productname>Informix</productname> behavior; it allows you to do more or less the same operations and gives you functions that have the same name and the same basic behavior but it is no drop-in replacement if you are using <productname>Informix</productname> at the moment. Moreover, some of the data types are different. For example, <productname>PostgreSQL's</productname> datetime and interval types do not know about ranges like for example <literal>YEAR TO MINUTE</literal> so you won't find support in ECPG for that either."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7848(title) 
msgid "Additional Types"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7853(programlisting) 
#, no-wrap
msgid "\nEXEC SQL BEGIN DECLARE SECTION;\nstring userid; /* this variable will contain trimmed data */\nEXEC SQL END DECLARE SECTION;\n\nEXEC SQL FETCH MYCUR INTO :userid;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7849(para) 
msgid "The Informix-special \"string\" pseudo-type for storing right-trimmed character string data is now supported in Informix-mode without using <literal>typedef</literal>. In fact, in Informix-mode, ECPG refuses to process source files that contain <literal>typedef sometype string;</literal><placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7864(title) 
msgid "Additional/Missing Embedded SQL Statements"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7868(literal) 
msgid "CLOSE DATABASE"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7873(programlisting) 
#, no-wrap
msgid "\n$CLOSE DATABASE;                /* close the current connection */\nEXEC SQL CLOSE DATABASE;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7870(para) 
msgid "This statement closes the current connection. In fact, this is a synonym for ECPG's <literal>DISCONNECT CURRENT</literal>.: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7881(literal) 
msgid "FREE cursor_name"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7883(para) 
msgid "Due to the differences how ECPG works compared to Informix's ESQL/C (i.e. which steps are purely grammar transformations and which steps rely on the underlying run-time library) there is no <literal>FREE cursor_name</literal> statement in ECPG. This is because in ECPG, <literal>DECLARE CURSOR</literal> doesn't translate to a function call into the run-time library that uses to the cursor name. This means that there's no run-time bookkeeping of SQL cursors in the ECPG run-time library, only in the PostgreSQL server."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7894(literal) 
msgid "FREE statement_name"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7896(para) 
msgid "<literal>FREE statement_name</literal> is a synonym for <literal>DEALLOCATE PREPARE statement_name</literal>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7906(title) 
msgid "Informix-compatible SQLDA Descriptor Areas"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7910(programlisting) 
#, no-wrap
msgid "\nstruct sqlvar_compat\n{\n    short   sqltype;\n    int     sqllen;\n    char   *sqldata;\n    short  *sqlind;\n    char   *sqlname;\n    char   *sqlformat;\n    short   sqlitype;\n    short   sqlilen;\n    char   *sqlidata;\n    int     sqlxid;\n    char   *sqltypename;\n    short   sqltypelen;\n    short   sqlownerlen;\n    short   sqlsourcetype;\n    char   *sqlownername;\n    int     sqlsourceid;\n    char   *sqlilongdata;\n    int     sqlflags;\n    void   *sqlreserved;\n};\n\nstruct sqlda_compat\n{\n    short  sqld;\n    struct sqlvar_compat *sqlvar;\n    char   desc_name[19];\n    short  desc_occ;\n    struct sqlda_compat *desc_next;\n    void  *reserved;\n};\n\ntypedef struct sqlvar_compat    sqlvar_t;\ntypedef struct sqlda_compat     sqlda_t;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7907(para) 
msgid "Informix-compatible mode supports a different structure than the one described in <xref linkend=\"ecpg-sqlda-descriptors\"/>. See below: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7956(para) 
msgid "The number of fields in the <literal>SQLDA</literal> descriptor."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7965(para) 
msgid "Pointer to the per-field properties."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7972(literal) 
msgid "desc_name"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7974(para) 
msgid "Unused, filled with zero-bytes."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7981(literal) 
msgid "desc_occ"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7983(para) 
msgid "Size of the allocated structure."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7992(para) 
msgid "Pointer to the next SQLDA structure if the result set contains more than one record."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7999(literal) 
msgid "reserved"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8001(para) 
msgid "Unused pointer, contains NULL. Kept for Informix-compatibility."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8016(para) 
msgid "Type of the field. Constants are in <literal>sqltypes.h</literal>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8025(para) 
msgid "Length of the field data."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8037(programlisting) 
#, no-wrap
msgid "\nint intval;\n\nswitch (sqldata-&gt;sqlvar[i].sqltype)\n{\n    case SQLINTEGER:\n        intval = *(int *)sqldata-&gt;sqlvar[i].sqldata;\n        break;\n  ...\n}\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8034(para) 
msgid "Pointer to the field data. The pointer is of <literal>char *</literal> type, the data pointed by it is in a binary format. Example: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8060(programlisting) 
#, no-wrap
msgid "\nif (*(int2 *)sqldata-&gt;sqlvar[i].sqlind != 0)\n    printf(\"value is NULL\\n\");\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8055(para) 
msgid "Pointer to the NULL indicator. If returned by DESCRIBE or FETCH then it's always a valid pointer. If used as input for <literal>EXECUTE ... USING sqlda;</literal> then NULL-pointer value means that the value for this field is non-NULL. Otherwise a valid pointer and <literal>sqlitype</literal> has to be properly set. Example: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8071(para) 
msgid "Name of the field. 0-terminated string."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8078(literal) 
msgid "sqlformat"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8080(para) 
msgid "Reserved in Informix, value of <function>PQfformat()</function> for the field."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8087(literal) 
msgid "sqlitype"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8089(para) 
msgid "Type of the NULL indicator data. It's always SQLSMINT when returning data from the server. When the <literal>SQLDA</literal> is used for a parametrized query, the data is treated according to the set type."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8098(literal) 
msgid "sqlilen"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8100(para) 
msgid "Length of the NULL indicator data."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8107(literal) 
msgid "sqlxid"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8109(para) 
msgid "Extended type of the field, result of <function>PQftype()</function>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8116(literal) 
msgid "sqltypename"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8117(literal) 
msgid "sqltypelen"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8118(literal) 
msgid "sqlownerlen"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8119(literal) 
msgid "sqlsourcetype"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8120(literal) 
msgid "sqlownername"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8121(literal) 
msgid "sqlsourceid"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8122(literal) 
msgid "sqlflags"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8123(literal) 
msgid "sqlreserved"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8125(para) 
msgid "Unused."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8132(literal) 
msgid "sqlilongdata"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8134(para) 
msgid "It equals to <literal>sqldata</literal> if <literal>sqllen</literal> is larger than 32KB."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8143(programlisting) 
#, no-wrap
msgid "\nEXEC SQL INCLUDE sqlda.h;\n\n    sqlda_t        *sqlda; /* This doesn't need to be under embedded DECLARE SECTION */\n\n    EXEC SQL BEGIN DECLARE SECTION;\n    char *prep_stmt = \"select * from table1\";\n    int i;\n    EXEC SQL END DECLARE SECTION;\n\n    ...\n\n    EXEC SQL PREPARE mystmt FROM :prep_stmt;\n\n    EXEC SQL DESCRIBE mystmt INTO sqlda;\n\n    printf(\"# of fields: %d\\n\", sqlda-&gt;sqld);\n    for (i = 0; i &lt; sqlda-&gt;sqld; i++)\n      printf(\"field %d: \\\"%s\\\"\\n\", sqlda-&gt;sqlvar[i]-&gt;sqlname);\n\n    EXEC SQL DECLARE mycursor CURSOR FOR mystmt;\n    EXEC SQL OPEN mycursor;\n    EXEC SQL WHENEVER NOT FOUND GOTO out;\n\n    while (1)\n    {\n      EXEC SQL FETCH mycursor USING sqlda;\n    }\n\n    EXEC SQL CLOSE mycursor;\n\n    free(sqlda); /* The main structure is all to be free(),\n                  * sqlda and sqlda-&gt;sqlvar is in one allocated area */\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:7949(para) 
msgid "The global properties are: <placeholder-1/> The per-field properties are below, they are stored in the <literal>sqlvar</literal> array: <placeholder-2/> Example: <placeholder-3/> For more information, see the <literal>sqlda.h</literal> header and the <literal>src/interfaces/ecpg/test/compat_informix/sqlda.pgc</literal> regression test."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8183(title) 
msgid "Additional Functions"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8187(function) 
msgid "decadd"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8189(para) 
msgid "Add two decimal type values. <synopsis>\nint decadd(decimal *arg1, decimal *arg2, decimal *sum);\n</synopsis> The function receives a pointer to the first operand of type decimal (<literal>arg1</literal>), a pointer to the second operand of type decimal (<literal>arg2</literal>) and a pointer to a value of type decimal that will contain the sum (<literal>sum</literal>). On success, the function returns 0. <symbol>ECPG_INFORMIX_NUM_OVERFLOW</symbol> is returned in case of overflow and <symbol>ECPG_INFORMIX_NUM_UNDERFLOW</symbol> in case of underflow. -1 is returned for other failures and <varname>errno</varname> is set to the respective <varname>errno</varname> number of the pgtypeslib."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8207(function) 
msgid "deccmp"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8220(para) 
msgid "1, if the value that <literal>arg1</literal> points to is bigger than the value that <literal>var2</literal> points to"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8226(para) 
msgid "-1, if the value that <literal>arg1</literal> points to is smaller than the value that <literal>arg2</literal> points to"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8231(para) 
msgid "0, if the value that <literal>arg1</literal> points to and the value that <literal>arg2</literal> points to are equal"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8209(para) 
msgid "Compare two variables of type decimal. <synopsis>\nint deccmp(decimal *arg1, decimal *arg2);\n</synopsis> The function receives a pointer to the first decimal value (<literal>arg1</literal>), a pointer to the second decimal value (<literal>arg2</literal>) and returns an integer value that indicates which is the bigger value. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8242(function) 
msgid "deccopy"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8244(para) 
msgid "Copy a decimal value. <synopsis>\nvoid deccopy(decimal *src, decimal *target);\n</synopsis> The function receives a pointer to the decimal value that should be copied as the first argument (<literal>src</literal>) and a pointer to the target structure of type decimal (<literal>target</literal>) as the second argument."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8258(function) 
msgid "deccvasc"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8260(para) 
msgid "Convert a value from its ASCII representation into a decimal type. <synopsis>\nint deccvasc(char *cp, int len, decimal *np);\n</synopsis> The function receives a pointer to string that contains the string representation of the number to be converted (<literal>cp</literal>) as well as its length <literal>len</literal>. <literal>np</literal> is a pointer to the decimal value that saves the result of the operation."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8270(para) 
msgid "Valid formats are for example: <literal>-2</literal>, <literal>.794</literal>, <literal>+3.44</literal>, <literal>592.49E07</literal> or <literal>-32.84e-4</literal>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8278(para) 
msgid "The function returns 0 on success. If overflow or underflow occurred, <literal>ECPG_INFORMIX_NUM_OVERFLOW</literal> or <literal>ECPG_INFORMIX_NUM_UNDERFLOW</literal> is returned. If the ASCII representation could not be parsed, <literal>ECPG_INFORMIX_BAD_NUMERIC</literal> is returned or <literal>ECPG_INFORMIX_BAD_EXPONENT</literal> if this problem occurred while parsing the exponent."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8291(function) 
msgid "deccvdbl"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8293(para) 
msgid "Convert a value of type double to a value of type decimal. <synopsis>\nint deccvdbl(double dbl, decimal *np);\n</synopsis> The function receives the variable of type double that should be converted as its first argument (<literal>dbl</literal>). As the second argument (<literal>np</literal>), the function receives a pointer to the decimal variable that should hold the result of the operation."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8303(para) /tmp/cicero-YDWB/ecpg.xml:8323(para) /tmp/cicero-YDWB/ecpg.xml:8343(para) 
msgid "The function returns 0 on success and a negative value if the conversion failed."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8311(function) 
msgid "deccvint"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8313(para) 
msgid "Convert a value of type int to a value of type decimal. <synopsis>\nint deccvint(int in, decimal *np);\n</synopsis> The function receives the variable of type int that should be converted as its first argument (<literal>in</literal>). As the second argument (<literal>np</literal>), the function receives a pointer to the decimal variable that should hold the result of the operation."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8331(function) 
msgid "deccvlong"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8333(para) 
msgid "Convert a value of type long to a value of type decimal. <synopsis>\nint deccvlong(long lng, decimal *np);\n</synopsis> The function receives the variable of type long that should be converted as its first argument (<literal>lng</literal>). As the second argument (<literal>np</literal>), the function receives a pointer to the decimal variable that should hold the result of the operation."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8351(function) 
msgid "decdiv"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8353(para) 
msgid "Divide two variables of type decimal. <synopsis>\nint decdiv(decimal *n1, decimal *n2, decimal *result);\n</synopsis> The function receives pointers to the variables that are the first (<literal>n1</literal>) and the second (<literal>n2</literal>) operands and calculates <literal>n1</literal>/<literal>n2</literal>. <literal>result</literal> is a pointer to the variable that should hold the result of the operation."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8363(para) 
msgid "On success, 0 is returned and a negative value if the division fails. If overflow or underflow occurred, the function returns <literal>ECPG_INFORMIX_NUM_OVERFLOW</literal> or <literal>ECPG_INFORMIX_NUM_UNDERFLOW</literal> respectively. If an attempt to divide by zero is observed, the function returns <literal>ECPG_INFORMIX_DIVIDE_ZERO</literal>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8375(function) 
msgid "decmul"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8377(para) 
msgid "Multiply two decimal values. <synopsis>\nint decmul(decimal *n1, decimal *n2, decimal *result);\n</synopsis> The function receives pointers to the variables that are the first (<literal>n1</literal>) and the second (<literal>n2</literal>) operands and calculates <literal>n1</literal>*<literal>n2</literal>. <literal>result</literal> is a pointer to the variable that should hold the result of the operation."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8387(para) 
msgid "On success, 0 is returned and a negative value if the multiplication fails. If overflow or underflow occurred, the function returns <literal>ECPG_INFORMIX_NUM_OVERFLOW</literal> or <literal>ECPG_INFORMIX_NUM_UNDERFLOW</literal> respectively."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8397(function) 
msgid "decsub"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8399(para) 
msgid "Subtract one decimal value from another. <synopsis>\nint decsub(decimal *n1, decimal *n2, decimal *result);\n</synopsis> The function receives pointers to the variables that are the first (<literal>n1</literal>) and the second (<literal>n2</literal>) operands and calculates <literal>n1</literal>-<literal>n2</literal>. <literal>result</literal> is a pointer to the variable that should hold the result of the operation."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8409(para) 
msgid "On success, 0 is returned and a negative value if the subtraction fails. If overflow or underflow occurred, the function returns <literal>ECPG_INFORMIX_NUM_OVERFLOW</literal> or <literal>ECPG_INFORMIX_NUM_UNDERFLOW</literal> respectively."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8419(function) 
msgid "dectoasc"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8421(para) 
msgid "Convert a variable of type decimal to its ASCII representation in a C char* string. <synopsis>\nint dectoasc(decimal *np, char *cp, int len, int right)\n</synopsis> The function receives a pointer to a variable of type decimal (<literal>np</literal>) that it converts to its textual representation. <literal>cp</literal> is the buffer that should hold the result of the operation. The parameter <literal>right</literal> specifies, how many digits right of the decimal point should be included in the output. The result will be rounded to this number of decimal digits. Setting <literal>right</literal> to -1 indicates that all available decimal digits should be included in the output. If the length of the output buffer, which is indicated by <literal>len</literal> is not sufficient to hold the textual representation including the trailing zero byte, only a single <literal>*</literal> character is stored in the result and -1 is returned."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8440(para) 
msgid "The function returns either -1 if the buffer <literal>cp</literal> was too small or <literal>ECPG_INFORMIX_OUT_OF_MEMORY</literal> if memory was exhausted."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8449(function) 
msgid "dectodbl"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8451(para) 
msgid "Convert a variable of type decimal to a double. <synopsis>\nint dectodbl(decimal *np, double *dblp);\n</synopsis> The function receives a pointer to the decimal value to convert (<literal>np</literal>) and a pointer to the double variable that should hold the result of the operation (<literal>dblp</literal>)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8460(para) 
msgid "On success, 0 is returned and a negative value if the conversion failed."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8468(function) 
msgid "dectoint"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8470(para) 
msgid "Convert a variable to type decimal to an integer. <synopsis>\nint dectoint(decimal *np, int *ip);\n</synopsis> The function receives a pointer to the decimal value to convert (<literal>np</literal>) and a pointer to the integer variable that should hold the result of the operation (<literal>ip</literal>)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8479(para) /tmp/cicero-YDWB/ecpg.xml:8505(para) 
msgid "On success, 0 is returned and a negative value if the conversion failed. If an overflow occurred, <literal>ECPG_INFORMIX_NUM_OVERFLOW</literal> is returned."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8484(para) 
msgid "Note that the ECPG implementation differs from the <productname>Informix</productname> implementation. <productname>Informix</productname> limits an integer to the range from -32767 to 32767, while the limits in the ECPG implementation depend on the architecture (<literal>-INT_MAX .. INT_MAX</literal>)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8494(function) 
msgid "dectolong"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8496(para) 
msgid "Convert a variable to type decimal to a long integer. <synopsis>\nint dectolong(decimal *np, long *lngp);\n</synopsis> The function receives a pointer to the decimal value to convert (<literal>np</literal>) and a pointer to the long variable that should hold the result of the operation (<literal>lngp</literal>)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8510(para) 
msgid "Note that the ECPG implementation differs from the <productname>Informix</productname> implementation. <productname>Informix</productname> limits a long integer to the range from -2,147,483,647 to 2,147,483,647, while the limits in the ECPG implementation depend on the architecture (<literal>-LONG_MAX .. LONG_MAX</literal>)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8521(function) 
msgid "rdatestr"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8523(para) 
msgid "Converts a date to a C char* string. <synopsis>\nint rdatestr(date d, char *str);\n</synopsis> The function receives two arguments, the first one is the date to convert (<literal>d</literal> and the second one is a pointer to the target string. The output format is always <literal>yyyy-mm-dd</literal>, so you need to allocate at least 11 bytes (including the zero-byte terminator) for the string."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8534(para) /tmp/cicero-YDWB/ecpg.xml:8813(para) /tmp/cicero-YDWB/ecpg.xml:8844(para) 
msgid "The function returns 0 on success and a negative value in case of error."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8538(para) 
msgid "Note that ECPG's implementation differs from the <productname>Informix</productname> implementation. In <productname>Informix</productname> the format can be influenced by setting environment variables. In ECPG however, you cannot change the output format."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8548(function) 
msgid "rstrdate"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8550(para) 
msgid "Parse the textual representation of a date. <synopsis>\nint rstrdate(char *str, date *d);\n</synopsis> The function receives the textual representation of the date to convert (<literal>str</literal>) and a pointer to a variable of type date (<literal>d</literal>). This function does not allow you to specify a format mask. It uses the default format mask of <productname>Informix</productname> which is <literal>mm/dd/yyyy</literal>. Internally, this function is implemented by means of <function>rdefmtdate</function>. Therefore, <function>rstrdate</function> is not faster and if you have the choice you should opt for <function>rdefmtdate</function> which allows you to specify the format mask explicitly."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8565(para) 
msgid "The function returns the same values as <function>rdefmtdate</function>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8572(function) 
msgid "rtoday"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8574(para) 
msgid "Get the current date. <synopsis>\nvoid rtoday(date *d);\n</synopsis> The function receives a pointer to a date variable (<literal>d</literal>) that it sets to the current date."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8582(para) 
msgid "Internally this function uses the <xref linkend=\"pgtypesdatetoday\"/> function."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8590(function) 
msgid "rjulmdy"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8592(para) 
msgid "Extract the values for the day, the month and the year from a variable of type date. <synopsis>\nint rjulmdy(date d, short mdy[3]);\n</synopsis> The function receives the date <literal>d</literal> and a pointer to an array of 3 short integer values <literal>mdy</literal>. The variable name indicates the sequential order: <literal>mdy[0]</literal> will be set to contain the number of the month, <literal>mdy[1]</literal> will be set to the value of the day and <literal>mdy[2]</literal> will contain the year."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8604(para) 
msgid "The function always returns 0 at the moment."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8607(para) 
msgid "Internally the function uses the <xref linkend=\"pgtypesdatejulmdy\"/> function."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8615(function) 
msgid "rdefmtdate"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8617(para) 
msgid "Use a format mask to convert a character string to a value of type date. <synopsis>\nint rdefmtdate(date *d, char *fmt, char *str);\n</synopsis> The function receives a pointer to the date value that should hold the result of the operation (<literal>d</literal>), the format mask to use for parsing the date (<literal>fmt</literal>) and the C char* string containing the textual representation of the date (<literal>str</literal>). The textual representation is expected to match the format mask. However you do not need to have a 1:1 mapping of the string to the format mask. The function only analyzes the sequential order and looks for the literals <literal>yy</literal> or <literal>yyyy</literal> that indicate the position of the year, <literal>mm</literal> to indicate the position of the month and <literal>dd</literal> to indicate the position of the day."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8639(para) 
msgid "0 - The function terminated successfully."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8644(para) 
msgid "<literal>ECPG_INFORMIX_ENOSHORTDATE</literal> - The date does not contain delimiters between day, month and year. In this case the input string must be exactly 6 or 8 bytes long but isn't."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8651(para) 
msgid "<literal>ECPG_INFORMIX_ENOTDMY</literal> - The format string did not correctly indicate the sequential order of year, month and day."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8657(para) 
msgid "<literal>ECPG_INFORMIX_BAD_DAY</literal> - The input string does not contain a valid day."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8663(para) 
msgid "<literal>ECPG_INFORMIX_BAD_MONTH</literal> - The input string does not contain a valid month."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8669(para) 
msgid "<literal>ECPG_INFORMIX_BAD_YEAR</literal> - The input string does not contain a valid year."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8635(para) 
msgid "The function returns the following values: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8676(para) 
msgid "Internally this function is implemented to use the <xref linkend=\"pgtypesdatedefmtasc\"/> function. See the reference there for a table of example input."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8685(function) 
msgid "rfmtdate"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8687(para) 
msgid "Convert a variable of type date to its textual representation using a format mask. <synopsis>\nint rfmtdate(date d, char *fmt, char *str);\n</synopsis> The function receives the date to convert (<literal>d</literal>), the format mask (<literal>fmt</literal>) and the string that will hold the textual representation of the date (<literal>str</literal>)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8700(para) 
msgid "Internally this function uses the <xref linkend=\"pgtypesdatefmtasc\"/> function, see the reference there for examples."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8708(function) 
msgid "rmdyjul"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8710(para) 
msgid "Create a date value from an array of 3 short integers that specify the day, the month and the year of the date. <synopsis>\nint rmdyjul(short mdy[3], date *d);\n</synopsis> The function receives the array of the 3 short integers (<literal>mdy</literal>) and a pointer to a variable of type date that should hold the result of the operation."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8720(para) 
msgid "Currently the function returns always 0."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8723(para) 
msgid "Internally the function is implemented to use the function <xref linkend=\"pgtypesdatemdyjul\"/>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8731(function) 
msgid "rdayofweek"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8733(para) 
msgid "Return a number representing the day of the week for a date value. <synopsis>\nint rdayofweek(date d);\n</synopsis> The function receives the date variable <literal>d</literal> as its only argument and returns an integer that indicates the day of the week for this date. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8779(para) 
msgid "Internally the function is implemented to use the function <xref linkend=\"pgtypesdatedayofweek\"/>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8787(function) 
msgid "dtcurrent"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8789(para) 
msgid "Retrieve the current timestamp. <synopsis>\nvoid dtcurrent(timestamp *ts);\n</synopsis> The function retrieves the current timestamp and saves it into the timestamp variable that <literal>ts</literal> points to."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8801(function) 
msgid "dtcvasc"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8803(para) 
msgid "Parses a timestamp from its textual representation into a timestamp variable. <synopsis>\nint dtcvasc(char *str, timestamp *ts);\n</synopsis> The function receives the string to parse (<literal>str</literal>) and a pointer to the timestamp variable that should hold the result of the operation (<literal>ts</literal>)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8817(para) 
msgid "Internally this function uses the <xref linkend=\"pgtypestimestampfromasc\"/> function. See the reference there for a table with example inputs."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8826(function) 
msgid "dtcvfmtasc"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8828(para) 
msgid "Parses a timestamp from its textual representation using a format mask into a timestamp variable. <synopsis>\ndtcvfmtasc(char *inbuf, char *fmtstr, timestamp *dtvalue)\n</synopsis> The function receives the string to parse (<literal>inbuf</literal>), the format mask to use (<literal>fmtstr</literal>) and a pointer to the timestamp variable that should hold the result of the operation (<literal>dtvalue</literal>)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8839(para) 
msgid "This function is implemented by means of the <xref linkend=\"pgtypestimestampdefmtasc\"/> function. See the documentation there for a list of format specifiers that can be used."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8852(function) 
msgid "dtsub"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8854(para) 
msgid "Subtract one timestamp from another and return a variable of type interval. <synopsis>\nint dtsub(timestamp *ts1, timestamp *ts2, interval *iv);\n</synopsis> The function will subtract the timestamp variable that <literal>ts2</literal> points to from the timestamp variable that <literal>ts1</literal> points to and will store the result in the interval variable that <literal>iv</literal> points to."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8873(function) 
msgid "dttoasc"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8875(para) 
msgid "Convert a timestamp variable to a C char* string. <synopsis>\nint dttoasc(timestamp *ts, char *output);\n</synopsis> The function receives a pointer to the timestamp variable to convert (<literal>ts</literal>) and the string that should hold the result of the operation <literal>output</literal>). It converts <literal>ts</literal> to its textual representation according to the SQL standard, which is be <literal>YYYY-MM-DD HH:MM:SS</literal>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8894(function) 
msgid "dttofmtasc"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8896(para) 
msgid "Convert a timestamp variable to a C char* using a format mask. <synopsis>\nint dttofmtasc(timestamp *ts, char *output, int str_len, char *fmtstr);\n</synopsis> The function receives a pointer to the timestamp to convert as its first argument (<literal>ts</literal>), a pointer to the output buffer (<literal>output</literal>), the maximal length that has been allocated for the output buffer (<literal>str_len</literal>) and the format mask to use for the conversion (<literal>fmtstr</literal>)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8911(para) 
msgid "Internally, this function uses the <xref linkend=\"pgtypestimestampfmtasc\"/> function. See the reference there for information on what format mask specifiers can be used."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8920(function) 
msgid "intoasc"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8922(para) 
msgid "Convert an interval variable to a C char* string. <synopsis>\nint intoasc(interval *i, char *str);\n</synopsis> The function receives a pointer to the interval variable to convert (<literal>i</literal>) and the string that should hold the result of the operation <literal>str</literal>). It converts <literal>i</literal> to its textual representation according to the SQL standard, which is be <literal>YYYY-MM-DD HH:MM:SS</literal>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8941(function) 
msgid "rfmtlong"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8943(para) 
msgid "Convert a long integer value to its textual representation using a format mask. <synopsis>\nint rfmtlong(long lng_val, char *fmt, char *outbuf);\n</synopsis> The function receives the long value <literal>lng_val</literal>, the format mask <literal>fmt</literal> and a pointer to the output buffer <literal>outbuf</literal>. It converts the long value according to the format mask to its textual representation."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8959(para) 
msgid "<literal>*</literal> (asterisk) - if this position would be blank otherwise, fill it with an asterisk."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8965(para) 
msgid "<literal>&amp;</literal> (ampersand) - if this position would be blank otherwise, fill it with a zero."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8971(para) 
msgid "<literal>#</literal> - turn leading zeroes into blanks."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8976(para) 
msgid "<literal>&lt;</literal> - left-justify the number in the string."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8981(para) 
msgid "<literal>,</literal> (comma) - group numbers of four or more digits into groups of three digits separated by a comma."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8987(para) 
msgid "<literal>.</literal> (period) - this character separates the whole-number part of the number from the fractional part."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8993(para) 
msgid "<literal>-</literal> (minus) - the minus sign appears if the number is a negative value."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8999(para) 
msgid "<literal>+</literal> (plus) - the plus sign appears if the number is a positive value."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9005(para) 
msgid "<literal>(</literal> - this replaces the minus sign in front of the negative number. The minus sign will not appear."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9011(para) 
msgid "<literal>)</literal> - this character replaces the minus and is printed behind the negative value."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9017(para) 
msgid "<literal>$</literal> - the currency symbol."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:8954(para) 
msgid "The format mask can be composed of the following format specifying characters: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9027(function) 
msgid "rupshift"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9029(para) 
msgid "Convert a string to upper case. <synopsis>\nvoid rupshift(char *str);\n</synopsis> The function receives a pointer to the string and transforms every lower case character to upper case."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9041(function) 
msgid "byleng"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9043(para) 
msgid "Return the number of characters in a string without counting trailing blanks. <synopsis>\nint byleng(char *str, int len);\n</synopsis> The function expects a fixed-length string as its first argument (<literal>str</literal>) and its length as its second argument (<literal>len</literal>). It returns the number of significant characters, that is the length of the string without trailing blanks."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9058(function) 
msgid "ldchar"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9060(para) 
msgid "Copy a fixed-length string into a null-terminated string. <synopsis>\nvoid ldchar(char *src, int len, char *dest);\n</synopsis> The function receives the fixed-length string to copy (<literal>src</literal>), its length (<literal>len</literal>) and a pointer to the destination memory (<literal>dest</literal>). Note that you need to reserve at least <literal>len+1</literal> bytes for the string that <literal>dest</literal> points to. The function copies at most <literal>len</literal> bytes to the new location (less if the source string has trailing blanks) and adds the null-terminator."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9077(function) 
msgid "rgetmsg"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9079(para) 
msgid "<synopsis>\nint rgetmsg(int msgnum, char *s, int maxsize);\n</synopsis> This function exists but is not implemented at the moment!"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9089(function) 
msgid "rtypalign"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9091(para) 
msgid "<synopsis>\nint rtypalign(int offset, int type);\n</synopsis> This function exists but is not implemented at the moment!"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9101(function) 
msgid "rtypmsize"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9103(para) 
msgid "<synopsis>\nint rtypmsize(int type, int len);\n</synopsis> This function exists but is not implemented at the moment!"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9113(function) 
msgid "rtypwidth"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9115(para) 
msgid "<synopsis>\nint rtypwidth(int sqltype, int sqllen);\n</synopsis> This function exists but is not implemented at the moment!"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9125(function) 
msgid "rsetnull"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9127(para) 
msgid "Set a variable to NULL. <synopsis>\nint rsetnull(int t, char *ptr);\n</synopsis> The function receives an integer that indicates the type of the variable and a pointer to the variable itself that is casted to a C char* pointer."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9140(para) 
msgid "<literal>CCHARTYPE</literal> - For a variable of type <type>char</type> or <type>char*</type>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9145(para) 
msgid "<literal>CSHORTTYPE</literal> - For a variable of type <type>short int</type>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9150(para) 
msgid "<literal>CINTTYPE</literal> - For a variable of type <type>int</type>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9155(para) 
msgid "<literal>CBOOLTYPE</literal> - For a variable of type <type>boolean</type>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9160(para) 
msgid "<literal>CFLOATTYPE</literal> - For a variable of type <type>float</type>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9165(para) 
msgid "<literal>CLONGTYPE</literal> - For a variable of type <type>long</type>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9170(para) 
msgid "<literal>CDOUBLETYPE</literal> - For a variable of type <type>double</type>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9175(para) 
msgid "<literal>CDECIMALTYPE</literal> - For a variable of type <type>decimal</type>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9180(para) 
msgid "<literal>CDATETYPE</literal> - For a variable of type <type>date</type>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9185(para) 
msgid "<literal>CDTIMETYPE</literal> - For a variable of type <type>timestamp</type>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9136(para) 
msgid "The following types exist: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9192(para) 
msgid "Here is an example of a call to this function: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9209(function) 
msgid "risnull"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9211(para) 
msgid "Test if a variable is NULL. <synopsis>\nint risnull(int t, char *ptr);\n</synopsis> The function receives the type of the variable to test (<literal>t</literal>) as well a pointer to this variable (<literal>ptr</literal>). Note that the latter needs to be casted to a char*. See the function <xref linkend=\"rsetnull\"/> for a list of possible variable types."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9221(para) 
msgid "Here is an example of how to use this function: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9241(title) 
msgid "Additional Constants"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9251(literal) 
msgid "ECPG_INFORMIX_NUM_OVERFLOW"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9253(para) 
msgid "Functions return this value if an overflow occurred in a calculation. Internally it is defined as -1200 (the <productname>Informix</productname> definition)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9262(literal) 
msgid "ECPG_INFORMIX_NUM_UNDERFLOW"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9264(para) 
msgid "Functions return this value if an underflow occurred in a calculation. Internally it is defined as -1201 (the <productname>Informix</productname> definition)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9272(literal) 
msgid "ECPG_INFORMIX_DIVIDE_ZERO"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9274(para) 
msgid "Functions return this value if an attempt to divide by zero is observed. Internally it is defined as -1202 (the <productname>Informix</productname> definition)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9282(literal) 
msgid "ECPG_INFORMIX_BAD_YEAR"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9284(para) 
msgid "Functions return this value if a bad value for a year was found while parsing a date. Internally it is defined as -1204 (the <productname>Informix</productname> definition)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9293(literal) 
msgid "ECPG_INFORMIX_BAD_MONTH"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9295(para) 
msgid "Functions return this value if a bad value for a month was found while parsing a date. Internally it is defined as -1205 (the <productname>Informix</productname> definition)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9304(literal) 
msgid "ECPG_INFORMIX_BAD_DAY"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9306(para) 
msgid "Functions return this value if a bad value for a day was found while parsing a date. Internally it is defined as -1206 (the <productname>Informix</productname> definition)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9315(literal) 
msgid "ECPG_INFORMIX_ENOSHORTDATE"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9317(para) 
msgid "Functions return this value if a parsing routine needs a short date representation but did not get the date string in the right length. Internally it is defined as -1209 (the <productname>Informix</productname> definition)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9326(literal) 
msgid "ECPG_INFORMIX_DATE_CONVERT"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9328(para) 
msgid "Functions return this value if an error occurred during date formatting. Internally it is defined as -1210 (the <productname>Informix</productname> definition)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9337(literal) 
msgid "ECPG_INFORMIX_OUT_OF_MEMORY"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9339(para) 
msgid "Functions return this value if memory was exhausted during their operation. Internally it is defined as -1211 (the <productname>Informix</productname> definition)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9348(literal) 
msgid "ECPG_INFORMIX_ENOTDMY"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9350(para) 
msgid "Functions return this value if a parsing routine was supposed to get a format mask (like <literal>mmddyy</literal>) but not all fields were listed correctly. Internally it is defined as -1212 (the <productname>Informix</productname> definition)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9359(literal) 
msgid "ECPG_INFORMIX_BAD_NUMERIC"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9361(para) 
msgid "Functions return this value either if a parsing routine cannot parse the textual representation for a numeric value because it contains errors or if a routine cannot complete a calculation involving numeric variables because at least one of the numeric variables is invalid. Internally it is defined as -1213 (the <productname>Informix</productname> definition)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9372(literal) 
msgid "ECPG_INFORMIX_BAD_EXPONENT"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9374(para) 
msgid "Functions return this value if a parsing routine cannot parse an exponent. Internally it is defined as -1216 (the <productname>Informix</productname> definition)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9383(literal) 
msgid "ECPG_INFORMIX_BAD_DATE"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9385(para) 
msgid "Functions return this value if a parsing routine cannot parse a date. Internally it is defined as -1218 (the <productname>Informix</productname> definition)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9394(literal) 
msgid "ECPG_INFORMIX_EXTRA_CHARS"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9396(para) 
msgid "Functions return this value if a parsing routine is passed extra characters it cannot parse. Internally it is defined as -1264 (the <productname>Informix</productname> definition)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9242(para) 
msgid "Note that all constants here describe errors and all of them are defined to represent negative values. In the descriptions of the different constants you can also find the value that the constants represent in the current implementation. However you should not rely on this number. You can however rely on the fact all of them are defined to represent negative values. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9409(title) 
msgid "Internals"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9411(para) 
msgid "This section explains how <application>ECPG</application> works internally. This information can occasionally be useful to help users understand how to use <application>ECPG</application>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9417(para) 
msgid "The first four lines written by <command>ecpg</command> to the output are fixed lines. Two are comments and two are include lines necessary to interface to the library. Then the preprocessor reads through the file and writes output. Normally it just echoes everything to the output."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9425(para) 
msgid "When it sees an <command>EXEC SQL</command> statement, it intervenes and changes it. The command starts with <command>EXEC SQL</command> and ends with <command>;</command>. Everything in between is treated as an <acronym>SQL</acronym> statement and parsed for variable substitution."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9433(para) 
msgid "Variable substitution occurs when a symbol starts with a colon (<literal>:</literal>). The variable with that name is looked up among the variables that were previously declared within a <literal>EXEC SQL DECLARE</literal> section."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9440(para) 
msgid "The most important function in the library is <function>ECPGdo</function>, which takes care of executing most commands. It takes a variable number of arguments. This can easily add up to 50 or so arguments, and we hope this will not be a problem on any platform."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9453(term) 
msgid "A line number"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9455(para) 
msgid "This is the line number of the original line; used in error messages only."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9463(term) 
msgid "A string"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9465(para) 
msgid "This is the <acronym>SQL</acronym> command that is to be issued. It is modified by the input variables, i.e., the variables that where not known at compile time but are to be entered in the command. Where the variables should go the string contains <literal>?</literal>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9476(term) 
msgid "Input variables"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9478(para) 
msgid "Every input variable causes ten arguments to be created. (See below.)"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9485(parameter) 
msgid "ECPGt_EOIT"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9487(para) 
msgid "An <type>enum</type> telling that there are no more input variables."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9495(term) 
msgid "Output variables"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9497(para) 
msgid "Every output variable causes ten arguments to be created. (See below.) These variables are filled by the function."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9505(parameter) 
msgid "ECPGt_EORT"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9507(para) 
msgid "An <type>enum</type> telling that there are no more variables."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9448(para) 
msgid "The arguments are: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9521(para) 
msgid "The type as a special symbol."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9527(para) 
msgid "A pointer to the value or a pointer to the pointer."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9533(para) 
msgid "The size of the variable if it is a <type>char</type> or <type>varchar</type>."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9539(para) 
msgid "The number of elements in the array (for array fetches)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9545(para) 
msgid "The offset to the next element in the array (for array fetches)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9551(para) 
msgid "The type of the indicator variable as a special symbol."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9557(para) 
msgid "A pointer to the indicator variable."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9563(para) 
msgid "0"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9569(para) 
msgid "The number of elements in the indicator array (for array fetches)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9575(para) 
msgid "The offset to the next element in the indicator array (for array fetches)."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9515(para) 
msgid "For every variable that is part of the <acronym>SQL</acronym> command, the function gets ten arguments: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9586(programlisting) 
#, no-wrap
msgid "\nEXEC SQL OPEN <replaceable>cursor</replaceable>;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9583(para) 
msgid "Note that not all SQL commands are treated in this way. For instance, an open cursor statement like: <placeholder-1/> is not copied to the output. Instead, the cursor's <command>DECLARE</command> command is used at the position of the <command>OPEN</command> command because it indeed opens the cursor."
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9598(programlisting) 
#, no-wrap
msgid "\nEXEC SQL BEGIN DECLARE SECTION;\nint index;\nint result;\nEXEC SQL END DECLARE SECTION;\n...\nEXEC SQL SELECT res INTO :result FROM mytable WHERE index = :index;\n"
msgstr ""

#: /tmp/cicero-YDWB/ecpg.xml:9594(para) 
msgid "Here is a complete example describing the output of the preprocessor of a file <filename>foo.pgc</filename> (details might change with each particular version of the preprocessor): <placeholder-1/> is translated into: <placeholder-2/> (The indentation here is added for readability and not something the preprocessor does.)"
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2.
#: /tmp/cicero-YDWB/ecpg.xml:0(None) 
msgid "translator-credits"
msgstr ""

