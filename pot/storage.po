msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2011-09-11 06:57+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: /tmp/cicero-ivSD/storage.xml:6(title) 
msgid "Database Physical Storage"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:8(para) 
msgid "This chapter provides an overview of the physical storage format used by <productname>PostgreSQL</productname> databases."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:15(title) 
msgid "Database File Layout"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:17(para) 
msgid "This section describes the storage format at the level of files and directories."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:22(para) 
msgid "All the data needed for a database cluster is stored within the cluster's data directory, commonly referred to as <varname>PGDATA</varname> (after the name of the environment variable that can be used to define it). A common location for <varname>PGDATA</varname> is <filename>/var/lib/pgsql/data</filename>. Multiple clusters, managed by different server instances, can exist on the same machine."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:30(para) 
msgid "The <varname>PGDATA</varname> directory contains several subdirectories and control files, as shown in <xref linkend=\"pgdata-contents-table\"/>. In addition to these required items, the cluster configuration files <filename>postgresql.conf</filename>, <filename>pg_hba.conf</filename>, and <filename>pg_ident.conf</filename> are traditionally stored in <varname>PGDATA</varname> (although in <productname>PostgreSQL</productname> 8.0 and later, it is possible to keep them elsewhere)."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:41(title) 
msgid "Contents of <varname>PGDATA</varname>"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:45(entry) /tmp/cicero-ivSD/storage.xml:567(entry) 
msgid "Item"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:48(entry) /tmp/cicero-ivSD/storage.xml:570(entry) /tmp/cicero-ivSD/storage.xml:647(entry) /tmp/cicero-ivSD/storage.xml:786(entry) 
msgid "Description"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:55(filename) 
msgid "PG_VERSION"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:56(productname) 
msgid "PostgreSQL"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:56(entry) 
msgid "A file containing the major version number of <placeholder-1/>"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:60(filename) 
msgid "base"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:61(entry) 
msgid "Subdirectory containing per-database subdirectories"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:65(filename) 
msgid "global"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:67(structname) 
msgid "pg_database"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:66(entry) 
msgid "Subdirectory containing cluster-wide tables, such as <placeholder-1/>"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:71(filename) 
msgid "pg_clog"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:72(entry) 
msgid "Subdirectory containing transaction commit status data"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:76(filename) 
msgid "pg_multixact"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:77(entry) 
msgid "Subdirectory containing multitransaction status data (used for shared row locks)"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:82(filename) 
msgid "pg_notify"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:83(entry) 
msgid "Subdirectory containing LISTEN/NOTIFY status data"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:87(filename) 
msgid "pg_serial"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:88(entry) 
msgid "Subdirectory containing information about committed serializable transactions"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:92(filename) 
msgid "pg_stat_tmp"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:93(entry) 
msgid "Subdirectory containing temporary files for the statistics subsystem"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:98(filename) 
msgid "pg_subtrans"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:99(entry) 
msgid "Subdirectory containing subtransaction status data"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:103(filename) 
msgid "pg_tblspc"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:104(entry) 
msgid "Subdirectory containing symbolic links to tablespaces"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:108(filename) 
msgid "pg_twophase"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:109(entry) 
msgid "Subdirectory containing state files for prepared transactions"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:113(filename) 
msgid "pg_xlog"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:114(entry) 
msgid "Subdirectory containing WAL (Write Ahead Log) files"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:118(filename) 
msgid "postmaster.opts"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:119(entry) 
msgid "A file recording the command-line options the server was last started with"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:124(filename) 
msgid "postmaster.pid"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:130(literal) 
msgid "*"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:125(entry) 
msgid "A lock file recording the current postmaster process ID (PID), cluster data directory path, postmaster start timestamp, port number, Unix-domain socket directory path (empty on Windows), first valid listen_address (IP address or <placeholder-1/>, or empty if not listening on TCP), and shared memory segment ID (this file is not present after server shutdown)"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:140(para) 
msgid "For each database in the cluster there is a subdirectory within <varname>PGDATA</varname><filename>/base</filename>, named after the database's OID in <structname>pg_database</structname>. This subdirectory is the default location for the database's files; in particular, its system catalogs are stored there."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:148(para) 
msgid "Each table and index is stored in a separate file. For ordinary relations, these files are named after the table or index's <firstterm>filenode</firstterm> number, which can be found in <structname>pg_class</structname>.<structfield>relfilenode</structfield>. But for temporary relations, the file name is of the form <literal>t<replaceable>BBB</replaceable>_<replaceable>FFF</replaceable></literal>, where <replaceable>BBB</replaceable> is the backend ID of the backend which created the file, and <replaceable>FFF</replaceable> is the filenode number. In either case, in addition to the main file (a/k/a main fork), each table and index has a <firstterm>free space map</firstterm> (see <xref linkend=\"storage-fsm\"/>), which stores information about free space available in the relation. The free space map is stored in a file named with the filenode number plus the suffix <literal>_fsm</literal>. Tables also have a <firstterm>visibility map</firstterm>, stored in a fork with the suffix <literal>_vm</literal>, to track which pages are known to have no dead tuples. The visibility map is described further in <xref linkend=\"storage-vm\"/>. Unlogged tables and indexes have a third fork, known as the initialization fork, which is stored in a fork with the suffix <literal>_init</literal> (see <xref linkend=\"storage-init\"/>)."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:168(para) 
msgid "Note that while a table's filenode often matches its OID, this is <emphasis>not</emphasis> necessarily the case; some operations, like <command>TRUNCATE</command>, <command>REINDEX</command>, <command>CLUSTER</command> and some forms of <command>ALTER TABLE</command>, can change the filenode while preserving the OID. Avoid assuming that filenode and table OID are the same. Also, for certain system catalogs including <structname>pg_class</structname> itself, <structname>pg_class</structname>.<structfield>relfilenode</structfield> contains zero. The actual filenode number of these catalogs is stored in a lower-level data structure, and can be obtained using the <function>pg_relation_filenode()</function> function."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:182(para) 
msgid "When a table or index exceeds 1 GB, it is divided into gigabyte-sized <firstterm>segments</firstterm>. The first segment's file name is the same as the filenode; subsequent segments are named filenode.1, filenode.2, etc. This arrangement avoids problems on platforms that have file size limitations. (Actually, 1 GB is just the default segment size. The segment size can be adjusted using the configuration option <option>--with-segsize</option> when building <productname>PostgreSQL</productname>.) In principle, free space map and visibility map forks could require multiple segments as well, though this is unlikely to happen in practice."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:194(para) 
msgid "A table that has columns with potentially large entries will have an associated <firstterm>TOAST</firstterm> table, which is used for out-of-line storage of field values that are too large to keep in the table rows proper. <structname>pg_class</structname>.<structfield>reltoastrelid</structfield> links from a table to its <acronym>TOAST</acronym> table, if any. See <xref linkend=\"storage-toast\"/> for more information."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:203(para) 
msgid "The contents of tables and indexes are discussed further in <xref linkend=\"storage-page-layout\"/>."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:208(para) 
msgid "Tablespaces make the scenario more complicated. Each user-defined tablespace has a symbolic link inside the <varname>PGDATA</varname><filename>/pg_tblspc</filename> directory, which points to the physical tablespace directory (i.e., the location specified in the tablespace's <command>CREATE TABLESPACE</command> command). This symbolic link is named after the tablespace's OID. Inside the physical tablespace directory there is a subdirectory with a name that depends on the <productname>PostgreSQL</productname> server version, such as <literal>PG_9.0_201008051</literal>. (The reason for using this subdirectory is so that successive versions of the database can use the same <command>CREATE TABLESPACE</command> location value without conflicts.) Within the version-specific subdirectory, there is a subdirectory for each database that has elements in the tablespace, named after the database's OID. Tables and indexes are stored within that directory, using the filenode naming scheme. The <literal>pg_default</literal> tablespace is not accessed through <filename>pg_tblspc</filename>, but corresponds to <varname>PGDATA</varname><filename>/base</filename>. Similarly, the <literal>pg_global</literal> tablespace is not accessed through <filename>pg_tblspc</filename>, but corresponds to <varname>PGDATA</varname><filename>/global</filename>."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:230(para) 
msgid "The <function>pg_relation_filepath()</function> function shows the entire path (relative to <varname>PGDATA</varname>) of any relation. It is often useful as a substitute for remembering many of the above rules. But keep in mind that this function just gives the name of the first segment of the main fork of the relation — you may need to append a segment number and/or <literal>_fsm</literal> or <literal>_vm</literal> to find all the files associated with the relation."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:240(para) 
msgid "Temporary files (for operations such as sorting more data than can fit in memory) are created within <varname>PGDATA</varname><filename>/base/pgsql_tmp</filename>, or within a <filename>pgsql_tmp</filename> subdirectory of a tablespace directory if a tablespace other than <literal>pg_default</literal> is specified for them. The name of a temporary file has the form <filename>pgsql_tmp<replaceable>PPP</replaceable>.<replaceable>NNN</replaceable></filename>, where <replaceable>PPP</replaceable> is the PID of the owning backend and <replaceable>NNN</replaceable> distinguishes different temporary files of that backend."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:255(title) /tmp/cicero-ivSD/storage.xml:258(primary) /tmp/cicero-ivSD/storage.xml:260(see) 
msgid "TOAST"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:260(primary) 
msgid "sliced bread"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:262(para) 
msgid "This section provides an overview of <acronym>TOAST</acronym> (The Oversized-Attribute Storage Technique)."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:267(para) 
msgid "<productname>PostgreSQL</productname> uses a fixed page size (commonly 8 kB), and does not allow tuples to span multiple pages. Therefore, it is not possible to store very large field values directly. To overcome this limitation, large field values are compressed and/or broken up into multiple physical rows. This happens transparently to the user, with only small impact on most of the backend code. The technique is affectionately known as <acronym>TOAST</acronym> (or <quote>the best thing since sliced bread</quote>)."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:277(para) 
msgid "Only certain data types support <acronym>TOAST</acronym> — there is no need to impose the overhead on data types that cannot produce large field values. To support <acronym>TOAST</acronym>, a data type must have a variable-length (<firstterm>varlena</firstterm>) representation, in which the first 32-bit word of any stored value contains the total length of the value in bytes (including itself). <acronym>TOAST</acronym> does not constrain the rest of the representation. All the C-level functions supporting a <acronym>TOAST</acronym>-able data type must be careful to handle <acronym>TOAST</acronym>ed input values. (This is normally done by invoking <function>PG_DETOAST_DATUM</function> before doing anything with an input value, but in some cases more efficient approaches are possible.)"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:290(para) 
msgid "<acronym>TOAST</acronym> usurps two bits of the varlena length word (the high-order bits on big-endian machines, the low-order bits on little-endian machines), thereby limiting the logical size of any value of a <acronym>TOAST</acronym>-able data type to 1 GB (2<superscript>30</superscript> - 1 bytes). When both bits are zero, the value is an ordinary un-<acronym>TOAST</acronym>ed value of the data type, and the remaining bits of the length word give the total datum size (including length word) in bytes. When the highest-order or lowest-order bit is set, the value has only a single-byte header instead of the normal four-byte header, and the remaining bits give the total datum size (including length byte) in bytes. As a special case, if the remaining bits are all zero (which would be impossible for a self-inclusive length), the value is a pointer to out-of-line data stored in a separate TOAST table. (The size of a TOAST pointer is given in the second byte of the datum.) Values with single-byte headers aren't aligned on any particular boundary, either. Lastly, when the highest-order or lowest-order bit is clear but the adjacent bit is set, the content of the datum has been compressed and must be decompressed before use. In this case the remaining bits of the length word give the total size of the compressed datum, not the original data. Note that compression is also possible for out-of-line data but the varlena header does not tell whether it has occurred — the content of the TOAST pointer tells that, instead."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:314(para) 
msgid "If any of the columns of a table are <acronym>TOAST</acronym>-able, the table will have an associated <acronym>TOAST</acronym> table, whose OID is stored in the table's <structname>pg_class</structname>.<structfield>reltoastrelid</structfield> entry. Out-of-line <acronym>TOAST</acronym>ed values are kept in the <acronym>TOAST</acronym> table, as described in more detail below."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:322(para) 
msgid "The compression technique used is a fairly simple and very fast member of the LZ family of compression techniques. See <filename>src/backend/utils/adt/pg_lzcompress.c</filename> for the details."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:328(para) 
msgid "Out-of-line values are divided (after compression if used) into chunks of at most <symbol>TOAST_MAX_CHUNK_SIZE</symbol> bytes (by default this value is chosen so that four chunk rows will fit on a page, making it about 2000 bytes). Each chunk is stored as a separate row in the <acronym>TOAST</acronym> table for the owning table. Every <acronym>TOAST</acronym> table has the columns <structfield>chunk_id</structfield> (an OID identifying the particular <acronym>TOAST</acronym>ed value), <structfield>chunk_seq</structfield> (a sequence number for the chunk within its value), and <structfield>chunk_data</structfield> (the actual data of the chunk). A unique index on <structfield>chunk_id</structfield> and <structfield>chunk_seq</structfield> provides fast retrieval of the values. A pointer datum representing an out-of-line <acronym>TOAST</acronym>ed value therefore needs to store the OID of the <acronym>TOAST</acronym> table in which to look and the OID of the specific value (its <structfield>chunk_id</structfield>). For convenience, pointer datums also store the logical datum size (original uncompressed data length) and actual stored size (different if compression was applied). Allowing for the varlena header bytes, the total size of a <acronym>TOAST</acronym> pointer datum is therefore 18 bytes regardless of the actual size of the represented value."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:349(para) 
msgid "The <acronym>TOAST</acronym> code is triggered only when a row value to be stored in a table is wider than <symbol>TOAST_TUPLE_THRESHOLD</symbol> bytes (normally 2 kB). The <acronym>TOAST</acronym> code will compress and/or move field values out-of-line until the row value is shorter than <symbol>TOAST_TUPLE_TARGET</symbol> bytes (also normally 2 kB) or no more gains can be had. During an UPDATE operation, values of unchanged fields are normally preserved as-is; so an UPDATE of a row with out-of-line values incurs no <acronym>TOAST</acronym> costs if none of the out-of-line values change."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:368(para) 
msgid "<literal>PLAIN</literal> prevents either compression or out-of-line storage; furthermore it disables use of single-byte headers for varlena types. This is the only possible strategy for columns of non-<acronym>TOAST</acronym>-able data types."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:377(para) 
msgid "<literal>EXTENDED</literal> allows both compression and out-of-line storage. This is the default for most <acronym>TOAST</acronym>-able data types. Compression will be attempted first, then out-of-line storage if the row is still too big."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:385(para) 
msgid "<literal>EXTERNAL</literal> allows out-of-line storage but not compression. Use of <literal>EXTERNAL</literal> will make substring operations on wide <type>text</type> and <type>bytea</type> columns faster (at the penalty of increased storage space) because these operations are optimized to fetch only the required parts of the out-of-line value when it is not compressed."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:395(para) 
msgid "<literal>MAIN</literal> allows compression but not out-of-line storage. (Actually, out-of-line storage will still be performed for such columns, but only as a last resort when there is no other way to make the row small enough to fit on a page.)"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:362(para) 
msgid "The <acronym>TOAST</acronym> code recognizes four different strategies for storing <acronym>TOAST</acronym>-able columns: <placeholder-1/> Each <acronym>TOAST</acronym>-able data type specifies a default strategy for columns of that data type, but the strategy for a given table column can be altered with <command>ALTER TABLE SET STORAGE</command>."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:409(para) 
msgid "This scheme has a number of advantages compared to a more straightforward approach such as allowing row values to span pages. Assuming that queries are usually qualified by comparisons against relatively small key values, most of the work of the executor will be done using the main row entry. The big values of <acronym>TOAST</acronym>ed attributes will only be pulled out (if selected at all) at the time the result set is sent to the client. Thus, the main table is much smaller and more of its rows fit in the shared buffer cache than would be the case without any out-of-line storage. Sort sets shrink also, and sorts will more often be done entirely in memory. A little test showed that a table containing typical HTML pages and their URLs was stored in about half of the raw data size including the <acronym>TOAST</acronym> table, and that the main table contained only about 10% of the entire data (the URLs and some small HTML pages). There was no run time difference compared to an un-<acronym>TOAST</acronym>ed comparison table, in which all the HTML pages were cut down to 7 kB to fit."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:430(title) /tmp/cicero-ivSD/storage.xml:433(primary) /tmp/cicero-ivSD/storage.xml:435(see) 
msgid "Free Space Map"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:435(primary) 
msgid "FSM"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:437(para) 
msgid "Each heap and index relation, except for hash indexes, has a Free Space Map (FSM) to keep track of available space in the relation. It's stored alongside the main relation data in a separate relation fork, named after the filenode number of the relation, plus a <literal>_fsm</literal> suffix. For example, if the filenode of a relation is 12345, the FSM is stored in a file called <filename>12345_fsm</filename>, in the same directory as the main relation file."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:446(para) 
msgid "The Free Space Map is organized as a tree of <acronym>FSM</acronym> pages. The bottom level <acronym>FSM</acronym> pages store the free space available on each heap (or index) page, using one byte to represent each such page. The upper levels aggregate information from the lower levels."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:453(para) 
msgid "Within each <acronym>FSM</acronym> page is a binary tree, stored in an array with one byte per node. Each leaf node represents a heap page, or a lower level <acronym>FSM</acronym> page. In each non-leaf node, the higher of its children's values is stored. The maximum value in the leaf nodes is therefore stored at the root."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:461(para) 
msgid "See <filename>src/backend/storage/freespace/README</filename> for more details on how the <acronym>FSM</acronym> is structured, and how it's updated and searched. The <xref linkend=\"pgfreespacemap\"/> module can be used to examine the information stored in free space maps."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:472(title) /tmp/cicero-ivSD/storage.xml:475(primary) /tmp/cicero-ivSD/storage.xml:477(see) 
msgid "Visibility Map"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:477(primary) 
msgid "VM"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:479(para) 
msgid "Each heap relation has a Visibility Map (VM) to keep track of which pages contain only tuples that are known to be visible to all active transactions. It's stored alongside the main relation data in a separate relation fork, named after the filenode number of the relation, plus a <literal>_vm</literal> suffix. For example, if the filenode of a relation is 12345, the VM is stored in a file called <filename>12345_vm</filename>, in the same directory as the main relation file. Note that indexes do not have VMs."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:490(para) 
msgid "The visibility map simply stores one bit per heap page. A set bit means that all tuples on the page are known to be visible to all transactions. This means that the page does not contain any tuples that need to be vacuumed; in future it might also be used to avoid visiting the page for visibility checks. The map is conservative in the sense that we make sure that whenever a bit is set, we know the condition is true, but if a bit is not set, it might or might not be true."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:504(title) 
msgid "The Initialization Fork"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:507(primary) 
msgid "Initialization Fork"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:510(para) 
msgid "Each unlogged table, and each index on an unlogged table, has an initialization fork. The initialization fork is an empty table or index of the appropriate type. When an unlogged table must be reset to empty due to a crash, the initialization fork is copied over the main fork, and any other forks are erased (they will be recreated automatically as needed)."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:522(title) 
msgid "Database Page Layout"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:527(para) 
msgid "Actually, index access methods need not use this page format. All the existing index methods do use this basic format, but the data kept on index metapages usually doesn't follow the item layout rules."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:524(para) 
msgid "This section provides an overview of the page format used within <productname>PostgreSQL</productname> tables and indexes.<placeholder-1/> Sequences and <acronym>TOAST</acronym> tables are formatted just like a regular table."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:537(para) 
msgid "In the following explanation, a <firstterm>byte</firstterm> is assumed to contain 8 bits. In addition, the term <firstterm>item</firstterm> refers to an individual data value that is stored on a page. In a table, an item is a row; in an index, an item is an index entry."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:546(para) 
msgid "Every table and index is stored as an array of <firstterm>pages</firstterm> of a fixed size (usually 8 kB, although a different page size can be selected when compiling the server). In a table, all the pages are logically equivalent, so a particular item (row) can be stored in any page. In indexes, the first page is generally reserved as a <firstterm>metapage</firstterm> holding control information, and there can be different types of pages within the index, depending on the index access method."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:556(para) 
msgid "<xref linkend=\"page-table\"/> shows the overall layout of a page. There are five parts to each page."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:562(title) 
msgid "Overall Page Layout"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:563(titleabbrev) 
msgid "Page Layout"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:577(entry) 
msgid "PageHeaderData"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:578(entry) 
msgid "24 bytes long. Contains general information about the page, including free space pointers."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:583(entry) 
msgid "ItemIdData"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:584(entry) 
msgid "Array of (offset,length) pairs pointing to the actual items. 4 bytes per item."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:589(entry) 
msgid "Free space"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:590(entry) 
msgid "The unallocated space. New item pointers are allocated from the start of this area, new items from the end."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:595(entry) 
msgid "Items"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:596(entry) 
msgid "The actual items themselves."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:600(entry) 
msgid "Special space"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:601(entry) 
msgid "Index access method specific data. Different methods store different data. Empty in ordinary tables."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:609(para) 
msgid "The first 24 bytes of each page consists of a page header (PageHeaderData). Its format is detailed in <xref linkend=\"pageheaderdata-table\"/>. The first two fields track the most recent WAL entry related to this page. Next is a 2-byte field containing flag bits. This is followed by three 2-byte integer fields (<structfield>pd_lower</structfield>, <structfield>pd_upper</structfield>, and <structfield>pd_special</structfield>). These contain byte offsets from the page start to the start of unallocated space, to the end of unallocated space, and to the start of the special space. The next 2 bytes of the page header, <structfield>pd_pagesize_version</structfield>, store both the page size and a version indicator. Beginning with <productname>PostgreSQL</productname> 8.3 the version number is 4; <productname>PostgreSQL</productname> 8.1 and 8.2 used version number 3; <productname>PostgreSQL</productname> 8.0 used version number 2; <productname>PostgreSQL</productname> 7.3 and 7.4 used version number 1; prior releases used version number 0. (The basic page layout and header format has not changed in most of these versions, but the layout of heap row headers has.) The page size is basically only present as a cross-check; there is no support for having more than one page size in an installation. The last field is a hint that shows whether pruning the page is likely to be profitable: it tracks the oldest un-pruned XMAX on the page."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:639(title) /tmp/cicero-ivSD/storage.xml:640(titleabbrev) 
msgid "PageHeaderData Layout"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:644(entry) /tmp/cicero-ivSD/storage.xml:783(entry) 
msgid "Field"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:645(entry) /tmp/cicero-ivSD/storage.xml:784(entry) 
msgid "Type"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:646(entry) /tmp/cicero-ivSD/storage.xml:785(entry) 
msgid "Length"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:652(entry) 
msgid "pd_lsn"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:653(entry) 
msgid "XLogRecPtr"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:654(entry) 
msgid "8 bytes"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:655(entry) 
msgid "LSN: next byte after last byte of xlog record for last change to this page"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:659(entry) 
msgid "pd_tli"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:660(entry) /tmp/cicero-ivSD/storage.xml:666(entry) /tmp/cicero-ivSD/storage.xml:690(entry) /tmp/cicero-ivSD/storage.xml:828(entry) 
msgid "uint16"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:661(entry) /tmp/cicero-ivSD/storage.xml:667(entry) /tmp/cicero-ivSD/storage.xml:673(entry) /tmp/cicero-ivSD/storage.xml:679(entry) /tmp/cicero-ivSD/storage.xml:685(entry) /tmp/cicero-ivSD/storage.xml:691(entry) /tmp/cicero-ivSD/storage.xml:823(entry) /tmp/cicero-ivSD/storage.xml:829(entry) 
msgid "2 bytes"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:662(entry) 
msgid "TimeLineID of last change (only its lowest 16 bits)"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:665(entry) 
msgid "pd_flags"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:668(entry) 
msgid "Flag bits"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:671(entry) 
msgid "pd_lower"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:672(entry) /tmp/cicero-ivSD/storage.xml:678(entry) /tmp/cicero-ivSD/storage.xml:684(entry) 
msgid "LocationIndex"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:674(entry) 
msgid "Offset to start of free space"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:677(entry) 
msgid "pd_upper"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:680(entry) 
msgid "Offset to end of free space"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:683(entry) 
msgid "pd_special"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:686(entry) 
msgid "Offset to start of special space"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:689(entry) 
msgid "pd_pagesize_version"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:692(entry) 
msgid "Page size and layout version number information"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:695(entry) 
msgid "pd_prune_xid"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:696(entry) /tmp/cicero-ivSD/storage.xml:792(entry) /tmp/cicero-ivSD/storage.xml:798(entry) /tmp/cicero-ivSD/storage.xml:810(entry) 
msgid "TransactionId"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:697(entry) /tmp/cicero-ivSD/storage.xml:793(entry) /tmp/cicero-ivSD/storage.xml:799(entry) /tmp/cicero-ivSD/storage.xml:805(entry) /tmp/cicero-ivSD/storage.xml:811(entry) 
msgid "4 bytes"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:698(entry) 
msgid "Oldest unpruned XMAX on page, or zero if none"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:704(para) 
msgid "All the details can be found in <filename>src/include/storage/bufpage.h</filename>."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:709(para) 
msgid "Following the page header are item identifiers (<type>ItemIdData</type>), each requiring four bytes. An item identifier contains a byte-offset to the start of an item, its length in bytes, and a few attribute bits which affect its interpretation. New item identifiers are allocated as needed from the beginning of the unallocated space. The number of item identifiers present can be determined by looking at <structfield>pd_lower</structfield>, which is increased to allocate a new identifier. Because an item identifier is never moved until it is freed, its index can be used on a long-term basis to reference an item, even when the item itself is moved around on the page to compact free space. In fact, every pointer to an item (<type>ItemPointer</type>, also known as <type>CTID</type>) created by <productname>PostgreSQL</productname> consists of a page number and the index of an item identifier."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:731(para) 
msgid "The items themselves are stored in space allocated backwards from the end of unallocated space. The exact structure varies depending on what the table is to contain. Tables and sequences both use a structure named <type>HeapTupleHeaderData</type>, described below."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:740(para) 
msgid "The final section is the <quote>special section</quote> which can contain anything the access method wishes to store. For example, b-tree indexes store links to the page's left and right siblings, as well as some other data relevant to the index structure. Ordinary tables do not use a special section at all (indicated by setting <structfield>pd_special</structfield> to equal the page size)."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:751(para) 
msgid "All table rows are structured in the same way. There is a fixed-size header (occupying 23 bytes on most machines), followed by an optional null bitmap, an optional object ID field, and the user data. The header is detailed in <xref linkend=\"heaptupleheaderdata-table\"/>. The actual user data (columns of the row) begins at the offset indicated by <structfield>t_hoff</structfield>, which must always be a multiple of the MAXALIGN distance for the platform. The null bitmap is only present if the <firstterm>HEAP_HASNULL</firstterm> bit is set in <structfield>t_infomask</structfield>. If it is present it begins just after the fixed header and occupies enough bytes to have one bit per data column (that is, <structfield>t_natts</structfield> bits altogether). In this list of bits, a 1 bit indicates not-null, a 0 bit is a null. When the bitmap is not present, all columns are assumed not-null. The object ID is only present if the <firstterm>HEAP_HASOID</firstterm> bit is set in <structfield>t_infomask</structfield>. If present, it appears just before the <structfield>t_hoff</structfield> boundary. Any padding needed to make <structfield>t_hoff</structfield> a MAXALIGN multiple will appear between the null bitmap and the object ID. (This in turn ensures that the object ID is suitably aligned.)"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:778(title) /tmp/cicero-ivSD/storage.xml:779(titleabbrev) 
msgid "HeapTupleHeaderData Layout"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:791(entry) 
msgid "t_xmin"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:794(entry) 
msgid "insert XID stamp"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:797(entry) 
msgid "t_xmax"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:800(entry) 
msgid "delete XID stamp"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:803(entry) 
msgid "t_cid"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:804(entry) 
msgid "CommandId"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:806(entry) 
msgid "insert and/or delete CID stamp (overlays with t_xvac)"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:809(entry) 
msgid "t_xvac"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:812(entry) 
msgid "XID for VACUUM operation moving a row version"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:815(entry) 
msgid "t_ctid"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:816(entry) 
msgid "ItemPointerData"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:817(entry) 
msgid "6 bytes"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:818(entry) 
msgid "current TID of this or newer row version"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:821(entry) 
msgid "t_infomask2"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:822(entry) 
msgid "int16"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:824(entry) 
msgid "number of attributes, plus various flag bits"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:827(entry) 
msgid "t_infomask"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:830(entry) 
msgid "various flag bits"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:833(entry) 
msgid "t_hoff"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:834(entry) 
msgid "uint8"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:835(entry) 
msgid "1 byte"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:836(entry) 
msgid "offset to user data"
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:842(para) 
msgid "All the details can be found in <filename>src/include/access/htup.h</filename>."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:847(para) 
msgid "Interpreting the actual data can only be done with information obtained from other tables, mostly <structname>pg_attribute</structname>. The key values needed to identify field locations are <structfield>attlen</structfield> and <structfield>attalign</structfield>. There is no way to directly get a particular attribute, except when there are only fixed width fields and no null values. All this trickery is wrapped up in the functions <firstterm>heap_getattr</firstterm>, <firstterm>fastgetattr</firstterm> and <firstterm>heap_getsysattr</firstterm>."
msgstr ""

#: /tmp/cicero-ivSD/storage.xml:860(para) 
msgid "To read the data you need to examine each attribute in turn. First check whether the field is NULL according to the null bitmap. If it is, go to the next. Then make sure you have the right alignment. If the field is a fixed width field, then all the bytes are simply placed. If it's a variable length field (attlen = -1) then it's a bit more complicated. All variable-length data types share the common header structure <type>struct varlena</type>, which includes the total length of the stored value and some flag bits. Depending on the flags, the data can be either inline or in a <acronym>TOAST</acronym> table; it might be compressed, too (see <xref linkend=\"storage-toast\"/>)."
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2.
#: /tmp/cicero-ivSD/storage.xml:0(None) 
msgid "translator-credits"
msgstr ""

