msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2011-05-26 12:13+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:9(refentrytitle) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:15(refname) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:20(primary)
msgid "CREATE TYPE"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:10(manvolnum)
msgid "7"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:11(refmiscinfo)
msgid "SQL - Language Statements"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:16(refpurpose)
msgid "define a new data type"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:25(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:28(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:31(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:51(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:402(replaceable)
msgid "name"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:26(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:411(replaceable)
msgid "attribute_name"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:26(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:420(replaceable)
msgid "data_type"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:29(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:430(replaceable)
msgid "label"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:32(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:440(replaceable)
msgid "input_function"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:33(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:450(replaceable)
msgid "output_function"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:34(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:460(replaceable)
msgid "receive_function"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:35(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:470(replaceable)
msgid "send_function"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:36(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:480(replaceable)
msgid "type_modifier_input_function"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:37(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:490(replaceable)
msgid "type_modifier_output_function"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:38(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:500(replaceable)
msgid "analyze_function"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:39(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:510(replaceable)
msgid "internallength"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:41(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:521(replaceable)
msgid "alignment"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:42(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:533(replaceable)
msgid "storage"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:43(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:545(replaceable)
msgid "like_type"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:44(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:561(replaceable)
msgid "category"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:45(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:574(replaceable)
msgid "preferred"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:46(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:586(replaceable)
msgid "default"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:47(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:596(replaceable)
msgid "element"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:48(replaceable) /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:606(replaceable)
msgid "delimiter"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:24(synopsis)
#, no-wrap
msgid "\nCREATE TYPE <placeholder-1/> AS\n    ( <placeholder-2/> <placeholder-3/> [, ... ] )\n\nCREATE TYPE <placeholder-4/> AS ENUM\n    ( [ '<placeholder-5/>' [, ... ] ] )\n\nCREATE TYPE <placeholder-6/> (\n    INPUT = <placeholder-7/>,\n    OUTPUT = <placeholder-8/>\n    [ , RECEIVE = <placeholder-9/> ]\n    [ , SEND = <placeholder-10/> ]\n    [ , TYPMOD_IN = <placeholder-11/> ]\n    [ , TYPMOD_OUT = <placeholder-12/> ]\n    [ , ANALYZE = <placeholder-13/> ]\n    [ , INTERNALLENGTH = { <placeholder-14/> | VARIABLE } ]\n    [ , PASSEDBYVALUE ]\n    [ , ALIGNMENT = <placeholder-15/> ]\n    [ , STORAGE = <placeholder-16/> ]\n    [ , LIKE = <placeholder-17/> ]\n    [ , CATEGORY = <placeholder-18/> ]\n    [ , PREFERRED = <placeholder-19/> ]\n    [ , DEFAULT = <placeholder-20/> ]\n    [ , ELEMENT = <placeholder-21/> ]\n    [ , DELIMITER = <placeholder-22/> ]\n)\n\nCREATE TYPE <placeholder-23/>\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:56(title)
msgid "Description"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:58(para)
msgid "<command>CREATE TYPE</command> registers a new data type for use in the current database. The user who defines a type becomes its owner."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:64(para)
msgid "If a schema name is given then the type is created in the specified schema. Otherwise it is created in the current schema. The type name must be distinct from the name of any existing type or domain in the same schema. (Because tables have associated data types, the type name must also be distinct from the name of any existing table in the same schema.)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:74(title)
msgid "Composite Types"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:76(para)
msgid "The first form of <command>CREATE TYPE</command> creates a composite type. The composite type is specified by a list of attribute names and data types. This is essentially the same as the row type of a table, but using <command>CREATE TYPE</command> avoids the need to create an actual table when all that is wanted is to define a type. A stand-alone composite type is useful as the argument or return type of a function."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:89(title)
msgid "Enumerated Types"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:91(para)
msgid "The second form of <command>CREATE TYPE</command> creates an enumerated (enum) type, as described in <xref linkend=\"datatype-enum\"/>. Enum types take a list of one or more quoted labels, each of which must be less than <symbol>NAMEDATALEN</symbol> bytes long (64 in a standard <productname>PostgreSQL</productname> build)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:101(title)
msgid "Base Types"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:103(para)
msgid "The third form of <command>CREATE TYPE</command> creates a new base type (scalar type). To create a new base type, you must be a superuser. (This restriction is made because an erroneous type definition could confuse or even crash the server.)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:110(para)
msgid "The parameters can appear in any order, not only that illustrated above, and most are optional. You must register two or more functions (using <command>CREATE FUNCTION</command>) before defining the type. The support functions <replaceable class=\"parameter\">input_function</replaceable> and <replaceable class=\"parameter\">output_function</replaceable> are required, while the functions <replaceable class=\"parameter\">receive_function</replaceable>, <replaceable class=\"parameter\">send_function</replaceable>, <replaceable class=\"parameter\">type_modifier_input_function</replaceable>, <replaceable class=\"parameter\">type_modifier_output_function</replaceable> and <replaceable class=\"parameter\">analyze_function</replaceable> are optional. Generally these functions have to be coded in C or another low-level language."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:127(para)
msgid "The <replaceable class=\"parameter\">input_function</replaceable> converts the type's external textual representation to the internal representation used by the operators and functions defined for the type. <replaceable class=\"parameter\">output_function</replaceable> performs the reverse transformation. The input function can be declared as taking one argument of type <type>cstring</type>, or as taking three arguments of types <type>cstring</type>, <type>oid</type>, <type>integer</type>. The first argument is the input text as a C string, the second argument is the type's own OID (except for array types, which instead receive their element type's OID), and the third is the <literal>typmod</literal> of the destination column, if known (-1 will be passed if not). The input function must return a value of the data type itself. Usually, an input function should be declared STRICT; if it is not, it will be called with a NULL first parameter when reading a NULL input value. The function must still return NULL in this case, unless it raises an error. (This case is mainly meant to support domain input functions, which might need to reject NULL inputs.) The output function must be declared as taking one argument of the new data type. The output function must return type <type>cstring</type>. Output functions are not invoked for NULL values."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:154(para)
msgid "The optional <replaceable class=\"parameter\">receive_function</replaceable> converts the type's external binary representation to the internal representation. If this function is not supplied, the type cannot participate in binary input. The binary representation should be chosen to be cheap to convert to internal form, while being reasonably portable. (For example, the standard integer data types use network byte order as the external binary representation, while the internal representation is in the machine's native byte order.) The receive function should perform adequate checking to ensure that the value is valid. The receive function can be declared as taking one argument of type <type>internal</type>, or as taking three arguments of types <type>internal</type>, <type>oid</type>, <type>integer</type>. The first argument is a pointer to a <type>StringInfo</type> buffer holding the received byte string; the optional arguments are the same as for the text input function. The receive function must return a value of the data type itself. Usually, a receive function should be declared STRICT; if it is not, it will be called with a NULL first parameter when reading a NULL input value. The function must still return NULL in this case, unless it raises an error. (This case is mainly meant to support domain receive functions, which might need to reject NULL inputs.) Similarly, the optional <replaceable class=\"parameter\">send_function</replaceable> converts from the internal representation to the external binary representation. If this function is not supplied, the type cannot participate in binary output. The send function must be declared as taking one argument of the new data type. The send function must return type <type>bytea</type>. Send functions are not invoked for NULL values."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:188(para)
msgid "You should at this point be wondering how the input and output functions can be declared to have results or arguments of the new type, when they have to be created before the new type can be created. The answer is that the type should first be defined as a <firstterm>shell type</firstterm>, which is a placeholder type that has no properties except a name and an owner. This is done by issuing the command <literal>CREATE TYPE <replaceable>name</replaceable></literal>, with no additional parameters. Then the I/O functions can be defined referencing the shell type. Finally, <command>CREATE TYPE</command> with a full definition replaces the shell entry with a complete, valid type definition, after which the new type can be used normally."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:202(para)
msgid "The optional <replaceable class=\"parameter\">type_modifier_input_function</replaceable> and <replaceable class=\"parameter\">type_modifier_output_function</replaceable> are needed if the type supports modifiers, that is optional constraints attached to a type declaration, such as <literal>char(5)</literal> or <literal>numeric(30,2)</literal>. <productname>PostgreSQL</productname> allows user-defined types to take one or more simple constants or identifiers as modifiers. However, this information must be capable of being packed into a single non-negative integer value for storage in the system catalogs. The <replaceable class=\"parameter\">type_modifier_input_function</replaceable> is passed the declared modifier(s) in the form of a <type>cstring</type> array. It must check the values for validity (throwing an error if they are wrong), and if they are correct, return a single non-negative <type>integer</type> value that will be stored as the column <quote>typmod</quote>. Type modifiers will be rejected if the type does not have a <replaceable class=\"parameter\">type_modifier_input_function</replaceable>. The <replaceable class=\"parameter\">type_modifier_output_function</replaceable> converts the internal integer typmod value back to the correct form for user display. It must return a <type>cstring</type> value that is the exact string to append to the type name; for example <type>numeric</type>'s function might return <literal>(30,2)</literal>. It is allowed to omit the <replaceable class=\"parameter\">type_modifier_output_function</replaceable>, in which case the default display format is just the stored typmod integer value enclosed in parentheses."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:230(para)
msgid "The optional <replaceable class=\"parameter\">analyze_function</replaceable> performs type-specific statistics collection for columns of the data type. By default, <command>ANALYZE</command> will attempt to gather statistics using the type's <quote>equals</quote> and <quote>less-than</quote> operators, if there is a default b-tree operator class for the type. For non-scalar types this behavior is likely to be unsuitable, so it can be overridden by specifying a custom analysis function. The analysis function must be declared to take a single argument of type <type>internal</type>, and return a <type>boolean</type> result. The detailed API for analysis functions appears in <filename>src/include/commands/vacuum.h</filename>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:243(para)
msgid "While the details of the new type's internal representation are only known to the I/O functions and other functions you create to work with the type, there are several properties of the internal representation that must be declared to <productname>PostgreSQL</productname>. Foremost of these is <replaceable class=\"parameter\">internallength</replaceable>. Base data types can be fixed-length, in which case <replaceable class=\"parameter\">internallength</replaceable> is a positive integer, or variable length, indicated by setting <replaceable class=\"parameter\">internallength</replaceable> to <literal>VARIABLE</literal>. (Internally, this is represented by setting <literal>typlen</literal> to -1.) The internal representation of all variable-length types must start with a 4-byte integer giving the total length of this value of the type."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:260(para)
msgid "The optional flag <literal>PASSEDBYVALUE</literal> indicates that values of this data type are passed by value, rather than by reference. You cannot pass by value types whose internal representation is larger than the size of the <type>Datum</type> type (4 bytes on most machines, 8 bytes on a few)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:268(para)
msgid "The <replaceable class=\"parameter\">alignment</replaceable> parameter specifies the storage alignment required for the data type. The allowed values equate to alignment on 1, 2, 4, or 8 byte boundaries. Note that variable-length types must have an alignment of at least 4, since they necessarily contain an <type>int4</type> as their first component."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:276(para)
msgid "The <replaceable class=\"parameter\">storage</replaceable> parameter allows selection of storage strategies for variable-length data types. (Only <literal>plain</literal> is allowed for fixed-length types.) <literal>plain</literal> specifies that data of the type will always be stored in-line and not compressed. <literal>extended</literal> specifies that the system will first try to compress a long data value, and will move the value out of the main table row if it's still too long. <literal>external</literal> allows the value to be moved out of the main table, but the system will not try to compress it. <literal>main</literal> allows compression, but discourages moving the value out of the main table. (Data items with this storage strategy might still be moved out of the main table if there is no other way to make a row fit, but they will be kept in the main table preferentially over <literal>extended</literal> and <literal>external</literal> items.)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:295(para)
msgid "The <replaceable class=\"parameter\">like_type</replaceable> parameter provides an alternative method for specifying the basic representation properties of a data type: copy them from some existing type. The values of <replaceable class=\"parameter\">internallength</replaceable>, <replaceable class=\"parameter\">passedbyvalue</replaceable>, <replaceable class=\"parameter\">alignment</replaceable>, and <replaceable class=\"parameter\">storage</replaceable> are copied from the named type. (It is possible, though usually undesirable, to override some of these values by specifying them along with the <literal>LIKE</literal> clause.) Specifying representation this way is especially useful when the low-level implementation of the new type <quote>piggybacks</quote> on an existing type in some fashion."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:310(para)
msgid "The <replaceable class=\"parameter\">category</replaceable> and <replaceable class=\"parameter\">preferred</replaceable> parameters can be used to help control which implicit cast will be applied in ambiguous situations. Each data type belongs to a category named by a single ASCII character, and each type is either <quote>preferred</quote> or not within its category. The parser will prefer casting to preferred types (but only from other types within the same category) when this rule is helpful in resolving overloaded functions or operators. For more details see <xref linkend=\"typeconv\"/>. For types that have no implicit casts to or from any other types, it is sufficient to leave these settings at the defaults. However, for a group of related types that have implicit casts, it is often helpful to mark them all as belonging to a category and select one or two of the <quote>most general</quote> types as being preferred within the category. The <replaceable class=\"parameter\">category</replaceable> parameter is especially useful when adding a user-defined type to an existing built-in category, such as the numeric or string types. However, it is also possible to create new entirely-user-defined type categories. Select any ASCII character other than an upper-case letter to name such a category."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:331(para)
msgid "A default value can be specified, in case a user wants columns of the data type to default to something other than the null value. Specify the default with the <literal>DEFAULT</literal> key word. (Such a default can be overridden by an explicit <literal>DEFAULT</literal> clause attached to a particular column.)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:339(para)
msgid "To indicate that a type is an array, specify the type of the array elements using the <literal>ELEMENT</literal> key word. For example, to define an array of 4-byte integers (<type>int4</type>), specify <literal>ELEMENT = int4</literal>. More details about array types appear below."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:347(para)
msgid "To indicate the delimiter to be used between values in the external representation of arrays of this type, <replaceable class=\"parameter\">delimiter</replaceable> can be set to a specific character. The default delimiter is the comma (<literal>,</literal>). Note that the delimiter is associated with the array element type, not the array type itself."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:359(title)
msgid "Array Types"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:361(para)
msgid "Whenever a user-defined type is created, <productname>PostgreSQL</productname> automatically creates an associated array type, whose name consists of the base type's name prepended with an underscore, and truncated if necessary to keep it less than <symbol>NAMEDATALEN</symbol> bytes long. (If the name so generated collides with an existing type name, the process is repeated until a non-colliding name is found.) This implicitly-created array type is variable length and uses the built-in input and output functions <literal>array_in</literal> and <literal>array_out</literal>. The array type tracks any changes in its element type's owner or schema, and is dropped if the element type is."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:375(para)
msgid "You might reasonably ask why there is an <option>ELEMENT</option> option, if the system makes the correct array type automatically. The only case where it's useful to use <option>ELEMENT</option> is when you are making a fixed-length type that happens to be internally an array of a number of identical things, and you want to allow these things to be accessed directly by subscripting, in addition to whatever operations you plan to provide for the type as a whole. For example, type <type>point</type> is represented as just two floating-point numbers, which it allows to be accessed as <literal>point[0]</literal> and <literal>point[1]</literal>. Note that this facility only works for fixed-length types whose internal form is exactly a sequence of identical fixed-length fields. A subscriptable variable-length type must have the generalized internal representation used by <literal>array_in</literal> and <literal>array_out</literal>. For historical reasons (i.e., this is clearly wrong but it's far too late to change it), subscripting of fixed-length array types starts from zero, rather than from one as for variable-length arrays."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:398(title)
msgid "Parameters"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:404(para)
msgid "The name (optionally schema-qualified) of a type to be created."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:413(para)
msgid "The name of an attribute (column) for the composite type."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:422(para)
msgid "The name of an existing data type to become a column of the composite type."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:432(para)
msgid "A string literal representing the textual label associated with one value of an enum type."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:442(para)
msgid "The name of a function that converts data from the type's external textual form to its internal form."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:452(para)
msgid "The name of a function that converts data from the type's internal form to its external textual form."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:462(para)
msgid "The name of a function that converts data from the type's external binary form to its internal form."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:472(para)
msgid "The name of a function that converts data from the type's internal form to its external binary form."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:482(para)
msgid "The name of a function that converts an array of modifier(s) for the type into internal form."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:492(para)
msgid "The name of a function that converts the internal form of the type's modifier(s) to external textual form."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:502(para)
msgid "The name of a function that performs statistical analysis for the data type."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:512(para)
msgid "A numeric constant that specifies the length in bytes of the new type's internal representation. The default assumption is that it is variable-length."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:523(para)
msgid "The storage alignment requirement of the data type. If specified, it must be <literal>char</literal>, <literal>int2</literal>, <literal>int4</literal>, or <literal>double</literal>; the default is <literal>int4</literal>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:535(para)
msgid "The storage strategy for the data type. If specified, must be <literal>plain</literal>, <literal>external</literal>, <literal>extended</literal>, or <literal>main</literal>; the default is <literal>plain</literal>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:547(para)
msgid "The name of an existing data type that the new type will have the same representation as. The values of <replaceable class=\"parameter\">internallength</replaceable>, <replaceable class=\"parameter\">passedbyvalue</replaceable>, <replaceable class=\"parameter\">alignment</replaceable>, and <replaceable class=\"parameter\">storage</replaceable> are copied from that type, unless overridden by explicit specification elsewhere in this <command>CREATE TYPE</command> command."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:563(para)
msgid "The category code (a single ASCII character) for this type. The default is <literal>'U'</literal> for <quote>user-defined type</quote>. Other standard category codes can be found in <xref linkend=\"catalog-typcategory-table\"/>. You may also choose other ASCII characters in order to create custom categories."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:576(para)
msgid "True if this type is a preferred type within its type category, else false. The default is false. Be very careful about creating a new preferred type within an existing type category, as this could cause surprising changes in behavior."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:588(para)
msgid "The default value for the data type. If this is omitted, the default is null."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:598(para)
msgid "The type being created is an array; this specifies the type of the array elements."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:608(para)
msgid "The delimiter character to be used between values in arrays made of this type."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:618(title)
msgid "Notes"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:620(para)
msgid "Because there are no restrictions on use of a data type once it's been created, creating a base type is tantamount to granting public execute permission on the functions mentioned in the type definition. This is usually not an issue for the sorts of functions that are useful in a type definition. But you might want to think twice before designing a type in a way that would require <quote>secret</quote> information to be used while converting it to or from external form."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:631(para)
msgid "Before <productname>PostgreSQL</productname> version 8.3, the name of a generated array type was always exactly the element type's name with one underscore character (<literal>_</literal>) prepended. (Type names were therefore restricted in length to one less character than other names.) While this is still usually the case, the array type name may vary from this in case of maximum-length names or collisions with user type names that begin with underscore. Writing code that depends on this convention is therefore deprecated. Instead, use <structname>pg_type</structname>.<structfield>typarray</structfield> to locate the array type associated with a given type."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:644(para)
msgid "It may be advisable to avoid using type and table names that begin with underscore. While the server will change generated array type names to avoid collisions with user-given names, there is still risk of confusion, particularly with old client software that may assume that type names beginning with underscores always represent arrays."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:652(para)
msgid "Before <productname>PostgreSQL</productname> version 8.2, the syntax <literal>CREATE TYPE <replaceable>name</replaceable></literal> did not exist. The way to create a new base type was to create its input function first. In this approach, <productname>PostgreSQL</productname> will first see the name of the new data type as the return type of the input function. The shell type is implicitly created in this situation, and then it can be referenced in the definitions of the remaining I/O functions. This approach still works, but is deprecated and might be disallowed in some future release. Also, to avoid accidentally cluttering the catalogs with shell types as a result of simple typos in function definitions, a shell type will only be made this way when the input function is written in C."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:667(para)
msgid "In <productname>PostgreSQL</productname> versions before 7.3, it was customary to avoid creating a shell type at all, by replacing the functions' forward references to the type name with the placeholder pseudotype <type>opaque</type>. The <type>cstring</type> arguments and results also had to be declared as <type>opaque</type> before 7.3. To support loading of old dump files, <command>CREATE TYPE</command> will accept I/O functions declared using <type>opaque</type>, but it will issue a notice and change the function declarations to use the correct types."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:682(title)
msgid "Examples"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:687(programlisting)
#, no-wrap
msgid "\nCREATE TYPE compfoo AS (f1 int, f2 text);\n\nCREATE FUNCTION getfoo() RETURNS SETOF compfoo AS $$\n    SELECT fooid, fooname FROM foo\n$$ LANGUAGE SQL;\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:684(para)
msgid "This example creates a composite type and uses it in a function definition: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:699(programlisting)
#, no-wrap
msgid "\nCREATE TYPE bug_status AS ENUM ('new', 'open', 'closed');\n\nCREATE TABLE bug (\n    id serial,\n    description text,\n    status bug_status\n);\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:696(para)
msgid "This example creates an enumerated type and uses it in a table definition: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:713(programlisting)
#, no-wrap
msgid "\nCREATE TYPE box;\n\nCREATE FUNCTION my_box_in_function(cstring) RETURNS box AS ... ;\nCREATE FUNCTION my_box_out_function(box) RETURNS cstring AS ... ;\n\nCREATE TYPE box (\n    INTERNALLENGTH = 16,\n    INPUT = my_box_in_function,\n    OUTPUT = my_box_out_function\n);\n\nCREATE TABLE myboxes (\n    id integer,\n    description box\n);\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:710(para)
msgid "This example creates the base data type <type>box</type> and then uses the type in a table definition: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:735(programlisting)
#, no-wrap
msgid "\nCREATE TYPE box (\n    INTERNALLENGTH = 16,\n    INPUT = my_box_in_function,\n    OUTPUT = my_box_out_function,\n    ELEMENT = float4\n);\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:732(para)
msgid "If the internal structure of <type>box</type> were an array of four <type>float4</type> elements, we might instead use: <placeholder-1/> which would allow a box value's component numbers to be accessed by subscripting. Otherwise the type behaves the same as before."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:750(programlisting)
#, no-wrap
msgid "\nCREATE TYPE bigobj (\n    INPUT = lo_filein, OUTPUT = lo_fileout,\n    INTERNALLENGTH = VARIABLE\n);\nCREATE TABLE big_objs (\n    id integer,\n    obj bigobj\n);\n"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:747(para)
msgid "This example creates a large object type and uses it in a table definition: <placeholder-1/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:762(para)
msgid "More examples, including suitable input and output functions, are in <xref linkend=\"xtypes\"/>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:769(title)
msgid "Compatibility"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:771(para)
msgid "This <command>CREATE TYPE</command> command is a <productname>PostgreSQL</productname> extension. There is a <command>CREATE TYPE</command> statement in the <acronym>SQL</acronym> standard that is rather different in detail."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:780(title)
msgid "See Also"
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/ref/create_type.xml:0(None)
msgid "translator-credits"
msgstr ""

