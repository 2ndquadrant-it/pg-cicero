msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2011-09-15 06:57+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: /tmp/cicero-fBJf/runtime.xml:5(title) 
msgid "Server Setup and Operation"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:7(para) 
msgid "This chapter discusses how to set up and run the database server and its interactions with the operating system."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:13(title) 
msgid "The <productname>PostgreSQL</productname> User Account"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:16(primary) 
msgid "postgres user"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:19(para) 
msgid "As with any server daemon that is accessible to the outside world, it is advisable to run <productname>PostgreSQL</productname> under a separate user account. This user account should only own the data that is managed by the server, and should not be shared with other daemons. (For example, using the user <literal>nobody</literal> is a bad idea.) It is not advisable to install executables owned by this user because compromised systems could then modify their own binaries."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:30(para) 
msgid "To add a Unix user account to your system, look for a command <command>useradd</command> or <command>adduser</command>. The user name <systemitem>postgres</systemitem> is often used, and is assumed throughout this book, but you can use another name if you like."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:39(title) 
msgid "Creating a Database Cluster"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:42(primary) /tmp/cicero-fBJf/runtime.xml:47(see) 
msgid "database cluster"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:46(primary) 
msgid "data area"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:50(para) 
msgid "Before you can do anything, you must initialize a database storage area on disk. We call this a <firstterm>database cluster</firstterm>. (<acronym>SQL</acronym> uses the term catalog cluster.) A database cluster is a collection of databases that is managed by a single instance of a running database server. After initialization, a database cluster will contain a database named <literal>postgres</literal>, which is meant as a default database for use by utilities, users and third party applications. The database server itself does not require the <literal>postgres</literal> database to exist, but many external utility programs assume it exists. Another database created within each cluster during initialization is called <literal>template1</literal>. As the name suggests, this will be used as a template for subsequently created databases; it should not be used for actual work. (See <xref linkend=\"managing-databases\"/> for information about creating new databases within a cluster.)"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:68(para) 
msgid "In file system terms, a database cluster will be a single directory under which all data will be stored. We call this the <firstterm>data directory</firstterm> or <firstterm>data area</firstterm>. It is completely up to you where you choose to store your data. There is no default, although locations such as <filename>/usr/local/pgsql/data</filename> or <filename>/var/lib/pgsql/data</filename> are popular. To initialize a database cluster, use the command <xref linkend=\"app-initdb\"/>,<indexterm><primary>initdb</primary></indexterm> which is installed with <productname>PostgreSQL</productname>. The desired file system location of your database cluster is indicated by the <option>-D</option> option, for example: <screen>\n<prompt>$</prompt> <userinput>initdb -D /usr/local/pgsql/data</userinput>\n</screen> Note that you must execute this command while logged into the <productname>PostgreSQL</productname> user account, which is described in the previous section."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:90(para) 
msgid "As an alternative to the <option>-D</option> option, you can set the environment variable <envar>PGDATA</envar>. <indexterm><primary><envar>PGDATA</envar></primary></indexterm>"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:97(para) 
msgid "Alternatively, you can run <command>initdb</command> via the <xref linkend=\"app-pg-ctl\"/> program<indexterm><primary>pg_ctl</primary></indexterm> like so: <screen>\n<prompt>$</prompt> <userinput>pg_ctl -D /usr/local/pgsql/data initdb</userinput>\n</screen> This may be more intuitive if you are using <command>pg_ctl</command> for starting and stopping the server (see <xref linkend=\"server-start\"/>), so that <command>pg_ctl</command> would be the sole command you use for managing the database server instance."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:111(para) 
msgid "<command>initdb</command> will attempt to create the directory you specify if it does not already exist. It is likely that it will not have the permission to do so (if you followed our advice and created an unprivileged account). In that case you should create the directory yourself (as root) and change the owner to be the <productname>PostgreSQL</productname> user. Here is how this might be done: <screen>\nroot# <userinput>mkdir /usr/local/pgsql/data</userinput>\nroot# <userinput>chown postgres /usr/local/pgsql/data</userinput>\nroot# <userinput>su postgres</userinput>\npostgres$ <userinput>initdb -D /usr/local/pgsql/data</userinput>\n</screen>"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:127(para) 
msgid "<command>initdb</command> will refuse to run if the data directory looks like it has already been initialized."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:131(para) 
msgid "Because the data directory contains all the data stored in the database, it is essential that it be secured from unauthorized access. <command>initdb</command> therefore revokes access permissions from everyone but the <productname>PostgreSQL</productname> user."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:139(para) 
msgid "However, while the directory contents are secure, the default client authentication setup allows any local user to connect to the database and even become the database superuser. If you do not trust other local users, we recommend you use one of <command>initdb</command>'s <option>-W</option>, <option>--pwprompt</option> or <option>--pwfile</option> options to assign a password to the database superuser.<indexterm><primary>password</primary><secondary>of the superuser</secondary></indexterm> Also, specify <option>-A md5</option> or <option>-A password</option> so that the default <literal>trust</literal> authentication mode is not used; or modify the generated <filename>pg_hba.conf</filename> file after running <command>initdb</command>, but <emphasis>before</emphasis> you start the server for the first time. (Other reasonable approaches include using <literal>peer</literal> authentication or file system permissions to restrict connections. See <xref linkend=\"client-authentication\"/> for more information.)"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:160(para) 
msgid "<command>initdb</command> also initializes the default locale<indexterm><primary>locale</primary></indexterm> for the database cluster. Normally, it will just take the locale settings in the environment and apply them to the initialized database. It is possible to specify a different locale for the database; more information about that can be found in <xref linkend=\"locale\"/>. The default sort order used within the particular database cluster is set by <command>initdb</command>, and while you can create new databases using different sort order, the order used in the template databases that initdb creates cannot be changed without dropping and recreating them. There is also a performance impact for using locales other than <literal>C</literal> or <literal>POSIX</literal>. Therefore, it is important to make this choice correctly the first time."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:176(para) 
msgid "<command>initdb</command> also sets the default character set encoding for the database cluster. Normally this should be chosen to match the locale setting. For details see <xref linkend=\"multibyte\"/>."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:183(title) /tmp/cicero-fBJf/runtime.xml:186(primary) /tmp/cicero-fBJf/runtime.xml:188(see) /tmp/cicero-fBJf/runtime.xml:189(see) 
msgid "Network File Systems"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:188(acronym) 
msgid "NFS"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:189(acronym) 
msgid "NAS"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:189(primary) 
msgid "Network Attached Storage (<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:191(para) 
msgid "Many installations create database clusters on network file systems. Sometimes this is done directly via <acronym>NFS</acronym>, or by using a Network Attached Storage (<acronym>NAS</acronym>) device that uses <acronym>NFS</acronym> internally. <productname>PostgreSQL</productname> does nothing special for <acronym>NFS</acronym> file systems, meaning it assumes <acronym>NFS</acronym> behaves exactly like locally-connected drives (<acronym>DAS</acronym>, Direct Attached Storage). If client and server <acronym>NFS</acronym> implementations have non-standard semantics, this can cause reliability problems (see <ulink url=\"http://www.time-travellers.org/shane/papers/NFS_considered_harmful.html\"/>). Specifically, delayed (asynchronous) writes to the <acronym>NFS</acronym> server can cause reliability problems; if possible, mount <acronym>NFS</acronym> file systems synchronously (without caching) to avoid this. Also, soft-mounting <acronym>NFS</acronym> is not recommended. (Storage Area Networks (<acronym>SAN</acronym>) use a low-level communication protocol rather than <acronym>NFS</acronym>.)"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:215(title) 
msgid "Starting the Database Server"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:217(para) 
msgid "Before anyone can access the database, you must start the database server. The database server program is called <command>postgres</command>.<indexterm><primary>postgres</primary></indexterm> The <command>postgres</command> program must know where to find the data it is supposed to use. This is done with the <option>-D</option> option. Thus, the simplest way to start the server is: <screen>\n$ <userinput>postgres -D /usr/local/pgsql/data</userinput>\n</screen> which will leave the server running in the foreground. This must be done while logged into the <productname>PostgreSQL</productname> user account. Without <option>-D</option>, the server will try to use the data directory named by the environment variable <envar>PGDATA</envar>. If that variable is not provided either, it will fail."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:235(para) 
msgid "Normally it is better to start <command>postgres</command> in the background. For this, use the usual Unix shell syntax: <screen>\n$ <userinput>postgres -D /usr/local/pgsql/data &gt;logfile 2&gt;&amp;1 &amp;</userinput>\n</screen> It is important to store the server's <systemitem>stdout</systemitem> and <systemitem>stderr</systemitem> output somewhere, as shown above. It will help for auditing purposes and to diagnose problems. (See <xref linkend=\"logfile-maintenance\"/> for a more thorough discussion of log file handling.)"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:248(para) 
msgid "The <command>postgres</command> program also takes a number of other command-line options. For more information, see the <xref linkend=\"app-postgres\"/> reference page and <xref linkend=\"runtime-config\"/> below."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:260(programlisting) 
#, no-wrap
msgid "\npg_ctl start -l logfile\n"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:255(para) 
msgid "This shell syntax can get tedious quickly. Therefore the wrapper program <xref linkend=\"app-pg-ctl\"/><indexterm><primary>pg_ctl</primary></indexterm> is provided to simplify some tasks. For example: <placeholder-1/> will start the server in the background and put the output into the named log file. The <option>-D</option> option has the same meaning here as for <command>postgres</command>. <command>pg_ctl</command> is also capable of stopping the server."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:269(para) 
msgid "Normally, you will want to start the database server when the computer boots.<indexterm><primary>booting</primary><secondary>starting the server during</secondary></indexterm> Autostart scripts are operating-system-specific. There are a few distributed with <productname>PostgreSQL</productname> in the <filename>contrib/start-scripts</filename> directory. Installing one will require root privileges."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:292(programlisting) 
#, no-wrap
msgid "\nsu -c 'pg_ctl start -D /usr/local/pgsql/data -l serverlog' postgres\n"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:282(para) 
msgid "Different systems have different conventions for starting up daemons at boot time. Many systems have a file <filename>/etc/rc.local</filename> or <filename>/etc/rc.d/rc.local</filename>. Others use <filename>init.d</filename> or <filename>rc.d</filename> directories. Whatever you do, the server must be run by the <productname>PostgreSQL</productname> user account <emphasis>and not by root</emphasis> or any other user. Therefore you probably should form your commands using <literal>su -c '...' postgres</literal>. For example: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:304(para) 
msgid "For <productname>FreeBSD</productname>, look at the file <filename>contrib/start-scripts/freebsd</filename> in the <productname>PostgreSQL</productname> source distribution. <indexterm><primary>FreeBSD</primary><secondary>start script</secondary></indexterm>"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:317(programlisting) 
#, no-wrap
msgid "\nif [ -x /usr/local/pgsql/bin/pg_ctl -a -x /usr/local/pgsql/bin/postgres ]; then\n    su - -c '/usr/local/pgsql/bin/pg_ctl start -l /var/postgresql/log -s' postgres\n    echo -n ' postgresql'\nfi\n"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:313(para) 
msgid "On <productname>OpenBSD</productname>, add the following lines to the file <filename>/etc/rc.local</filename>: <indexterm><primary>OpenBSD</primary><secondary>start script</secondary></indexterm><placeholder-1/>"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:330(programlisting) 
#, no-wrap
msgid "\n/usr/local/pgsql/bin/pg_ctl start -l logfile -D /usr/local/pgsql/data\n"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:327(para) 
msgid "On <productname>Linux</productname> systems either add <indexterm><primary>Linux</primary><secondary>start script</secondary></indexterm><placeholder-1/> to <filename>/etc/rc.d/rc.local</filename> or <filename>/etc/rc.local</filename> or look at the file <filename>contrib/start-scripts/linux</filename> in the <productname>PostgreSQL</productname> source distribution."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:341(para) 
msgid "On <productname>NetBSD</productname>, either use the <productname>FreeBSD</productname> or <productname>Linux</productname> start scripts, depending on preference. <indexterm><primary>NetBSD</primary><secondary>start script</secondary></indexterm>"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:355(programlisting) 
#, no-wrap
msgid "\nsu - postgres -c \"/usr/local/pgsql/bin/pg_ctl start -l logfile -D /usr/local/pgsql/data\"\n"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:350(para) 
msgid "On <productname>Solaris</productname>, create a file called <filename>/etc/init.d/postgresql</filename> that contains the following line: <indexterm><primary>Solaris</primary><secondary>start script</secondary></indexterm><placeholder-1/> Then, create a symbolic link to it in <filename>/etc/rc3.d</filename> as <filename>S99postgresql</filename>."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:297(para) 
msgid "Here are a few more operating-system-specific suggestions. (In each case be sure to use the proper installation directory and user name where we show generic values.) <placeholder-1/>"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:366(para) 
msgid "While the server is running, its <acronym>PID</acronym> is stored in the file <filename>postmaster.pid</filename> in the data directory. This is used to prevent multiple server instances from running in the same data directory and can also be used for shutting down the server."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:376(title) 
msgid "Server Start-up Failures"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:378(para) 
msgid "There are several common reasons the server might fail to start. Check the server's log file, or start it by hand (without redirecting standard output or standard error) and see what error messages appear. Below we explain some of the most common error messages in more detail."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:386(para) 
msgid "<screen>\nLOG:  could not bind IPv4 socket: Address already in use\nHINT:  Is another postmaster already running on port 5432? If not, wait a few seconds and retry.\nFATAL:  could not create TCP/IP listen socket\n</screen> This usually means just what it suggests: you tried to start another server on the same port where one is already running. However, if the kernel error message is not <computeroutput>Address\n     already in use</computeroutput> or some variant of that, there might be a different problem. For example, trying to start a server on a reserved port number might draw something like: <screen>\n$ <userinput>postgres -p 666</userinput>\nLOG:  could not bind IPv4 socket: Permission denied\nHINT:  Is another postmaster already running on port 666? If not, wait a few seconds and retry.\nFATAL:  could not create TCP/IP listen socket\n</screen>"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:406(para) 
msgid "A message like: <screen>\nFATAL:  could not create shared memory segment: Invalid argument\nDETAIL:  Failed system call was shmget(key=5440001, size=4011376640, 03600).\n</screen> probably means your kernel's limit on the size of shared memory is smaller than the work area <productname>PostgreSQL</productname> is trying to create (4011376640 bytes in this example). Or it could mean that you do not have System-V-style shared memory support configured into your kernel at all. As a temporary workaround, you can try starting the server with a smaller-than-normal number of buffers (<xref linkend=\"guc-shared-buffers\"/>). You will eventually want to reconfigure your kernel to increase the allowed shared memory size. You might also see this message when trying to start multiple servers on the same machine, if their total space requested exceeds the kernel limit."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:425(para) 
msgid "An error like: <screen>\nFATAL:  could not create semaphores: No space left on device\nDETAIL:  Failed system call was semget(5440126, 17, 03600).\n</screen> does <emphasis>not</emphasis> mean you've run out of disk space. It means your kernel's limit on the number of <systemitem class=\"osname\">System V</systemitem> semaphores is smaller than the number <productname>PostgreSQL</productname> wants to create. As above, you might be able to work around the problem by starting the server with a reduced number of allowed connections (<xref linkend=\"guc-max-connections\"/>), but you'll eventually want to increase the kernel limit."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:441(para) 
msgid "If you get an <quote>illegal system call</quote> error, it is likely that shared memory or semaphores are not supported in your kernel at all. In that case your only option is to reconfigure the kernel to enable these features."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:448(para) 
msgid "Details about configuring <systemitem class=\"osname\">System V</systemitem><acronym>IPC</acronym> facilities are given in <xref linkend=\"sysvipc\"/>."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:455(title) 
msgid "Client Connection Problems"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:457(para) 
msgid "Although the error conditions possible on the client side are quite varied and application-dependent, a few of them might be directly related to how the server was started. Conditions other than those shown below should be documented with the respective client application."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:465(para) 
msgid "<screen>\npsql: could not connect to server: Connection refused\n        Is the server running on host \"server.joe.com\" and accepting\n        TCP/IP connections on port 5432?\n</screen> This is the generic <quote>I couldn't find a server to talk to</quote> failure. It looks like the above when TCP/IP communication is attempted. A common mistake is to forget to configure the server to allow TCP/IP connections."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:477(para) 
msgid "Alternatively, you'll get this when attempting Unix-domain socket communication to a local server: <screen>\npsql: could not connect to server: No such file or directory\n        Is the server running locally and accepting\n        connections on Unix domain socket \"/tmp/.s.PGSQL.5432\"?\n</screen>"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:487(para) 
msgid "The last line is useful in verifying that the client is trying to connect to the right place. If there is in fact no server running there, the kernel error message will typically be either <computeroutput>Connection refused</computeroutput> or <computeroutput>No such file or directory</computeroutput>, as illustrated. (It is important to realize that <computeroutput>Connection refused</computeroutput> in this context does <emphasis>not</emphasis> mean that the server got your connection request and rejected it. That case will produce a different message, as shown in <xref linkend=\"client-authentication-problems\"/>.) Other error messages such as <computeroutput>Connection timed out</computeroutput> might indicate more fundamental problems, like lack of network connectivity."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:507(title) 
msgid "Managing Kernel Resources"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:509(para) 
msgid "A large <productname>PostgreSQL</productname> installation can quickly exhaust various operating system resource limits. (On some systems, the factory defaults are so low that you don't even need a really <quote>large</quote> installation.) If you have encountered this kind of problem, keep reading."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:518(title) 
msgid "Shared Memory and Semaphores"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:521(primary) 
msgid "shared memory"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:525(primary) 
msgid "semaphores"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:528(para) 
msgid "Shared memory and semaphores are collectively referred to as <quote><systemitem class=\"osname\">System V</systemitem><acronym>IPC</acronym></quote> (together with message queues, which are not relevant for <productname>PostgreSQL</productname>). Almost all modern operating systems provide these features, but many of them don't have them turned on or sufficiently sized by default, especially as available RAM and the demands of database applications grow. (On <systemitem class=\"osname\">Windows</systemitem>, <productname>PostgreSQL</productname> provides its own replacement implementation of these facilities, so most of this section can be disregarded.)"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:542(para) 
msgid "The complete lack of these facilities is usually manifested by an <errorname>Illegal system call</errorname> error upon server start. In that case there is no alternative but to reconfigure your kernel. <productname>PostgreSQL</productname> won't work without them. This situation is rare, however, among modern operating systems."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:550(para) 
msgid "When <productname>PostgreSQL</productname> exceeds one of the various hard <acronym>IPC</acronym> limits, the server will refuse to start and should leave an instructive error message describing the problem and what to do about it. (See also <xref linkend=\"server-start-failures\"/>.) The relevant kernel parameters are named consistently across different systems; <xref linkend=\"sysvipc-parameters\"/> gives an overview. The methods to set them, however, vary. Suggestions for some platforms are given below."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:563(title) 
msgid "<systemitem class=\"osname\">System V</systemitem><acronym>IPC</acronym> Parameters"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:568(entry) 
msgid "Name"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:569(entry) 
msgid "Description"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:570(entry) 
msgid "Reasonable values"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:576(varname) /tmp/cicero-fBJf/runtime.xml:590(varname) 
msgid "SHMMAX"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:577(entry) 
msgid "Maximum size of shared memory segment (bytes)"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:578(entry) 
msgid "at least several megabytes (see text)"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:582(varname) 
msgid "SHMMIN"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:583(entry) 
msgid "Minimum size of shared memory segment (bytes)"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:584(entry) 
msgid "1"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:588(varname) 
msgid "SHMALL"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:589(entry) 
msgid "Total amount of shared memory available (bytes or pages)"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:590(literal) 
msgid "ceil(SHMMAX/PAGE_SIZE)"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:590(entry) 
msgid "if bytes, same as <placeholder-1/>; if pages, <placeholder-2/>"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:594(varname) /tmp/cicero-fBJf/runtime.xml:602(varname) 
msgid "SHMSEG"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:595(entry) 
msgid "Maximum number of shared memory segments per process"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:596(entry) 
msgid "only 1 segment is needed, but the default is much higher"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:600(varname) 
msgid "SHMMNI"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:601(entry) 
msgid "Maximum number of shared memory segments system-wide"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:602(entry) 
msgid "like <placeholder-1/> plus room for other applications"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:606(varname) 
msgid "SEMMNI"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:607(entry) 
msgid "Maximum number of semaphore identifiers (i.e., sets)"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:608(literal) 
msgid "ceil((max_connections + autovacuum_max_workers) / 16)"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:608(entry) 
msgid "at least <placeholder-1/>"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:612(varname) 
msgid "SEMMNS"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:613(entry) 
msgid "Maximum number of semaphores system-wide"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:614(literal) 
msgid "ceil((max_connections + autovacuum_max_workers) / 16) * 17"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:614(entry) 
msgid "<placeholder-1/> plus room for other applications"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:618(varname) 
msgid "SEMMSL"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:619(entry) 
msgid "Maximum number of semaphores per set"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:620(entry) 
msgid "at least 17"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:624(varname) 
msgid "SEMMAP"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:625(entry) 
msgid "Number of entries in semaphore map"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:626(entry) 
msgid "see text"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:630(varname) 
msgid "SEMVMX"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:631(entry) 
msgid "Maximum value of semaphore"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:632(entry) 
msgid "at least 1000 (The default is often 32767; do not change unless necessary)"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:640(para) 
msgid "<indexterm><primary>SHMMAX</primary></indexterm> The most important shared memory parameter is <varname>SHMMAX</varname>, the maximum size, in bytes, of a shared memory segment. If you get an error message from <function>shmget</function> like <quote>Invalid argument</quote>, it is likely that this limit has been exceeded. The size of the required shared memory segment varies depending on several <productname>PostgreSQL</productname> configuration parameters, as shown in <xref linkend=\"shared-memory-parameters\"/>. (Any error message you might get will include the exact size of the failed allocation request.) You can, as a temporary solution, lower some of those settings to avoid the failure. While it is possible to get <productname>PostgreSQL</productname> to run with <varname>SHMMAX</varname> as small as 2 MB, you need considerably more for acceptable performance. Desirable settings are in the hundreds of megabytes to a few gigabytes."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:657(para) 
msgid "Some systems also have a limit on the total amount of shared memory in the system (<varname>SHMALL</varname>). Make sure this is large enough for <productname>PostgreSQL</productname> plus any other applications that are using shared memory segments. Note that <varname>SHMALL</varname> is measured in pages rather than bytes on many systems."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:665(para) 
msgid "Less likely to cause problems is the minimum size for shared memory segments (<varname>SHMMIN</varname>), which should be at most approximately 500 kB for <productname>PostgreSQL</productname> (it is usually just 1). The maximum number of segments system-wide (<varname>SHMMNI</varname>) or per-process (<varname>SHMSEG</varname>) are unlikely to cause a problem unless your system has them set to zero."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:674(para) 
msgid "<productname>PostgreSQL</productname> uses one semaphore per allowed connection (<xref linkend=\"guc-max-connections\"/>) and allowed autovacuum worker process (<xref linkend=\"guc-autovacuum-max-workers\"/>), in sets of 16. Each such set will also contain a 17th semaphore which contains a <quote>magic number</quote>, to detect collision with semaphore sets used by other applications. The maximum number of semaphores in the system is set by <varname>SEMMNS</varname>, which consequently must be at least as high as <varname>max_connections</varname> plus <varname>autovacuum_max_workers</varname>, plus one extra for each 16 allowed connections plus workers (see the formula in <xref linkend=\"sysvipc-parameters\"/>). The parameter <varname>SEMMNI</varname> determines the limit on the number of semaphore sets that can exist on the system at one time. Hence this parameter must be at least <literal>ceil((max_connections + autovacuum_max_workers) / 16)</literal>. Lowering the number of allowed connections is a temporary workaround for failures, which are usually confusingly worded <quote>No space left on device</quote>, from the function <function>semget</function>."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:696(para) 
msgid "In some cases it might also be necessary to increase <varname>SEMMAP</varname> to be at least on the order of <varname>SEMMNS</varname>. This parameter defines the size of the semaphore resource map, in which each contiguous block of available semaphores needs an entry. When a semaphore set is freed it is either added to an existing entry that is adjacent to the freed block or it is registered under a new map entry. If the map is full, the freed semaphores get lost (until reboot). Fragmentation of the semaphore space could over time lead to fewer available semaphores than there should be."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:709(para) 
msgid "The <varname>SEMMSL</varname> parameter, which determines how many semaphores can be in a set, must be at least 17 for <productname>PostgreSQL</productname>."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:715(para) 
msgid "Various other settings related to <quote>semaphore undo</quote>, such as <varname>SEMMNU</varname> and <varname>SEMUME</varname>, do not affect <productname>PostgreSQL</productname>."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:724(systemitem) /tmp/cicero-fBJf/runtime.xml:725(primary) 
msgid "AIX"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:725(secondary) /tmp/cicero-fBJf/runtime.xml:746(secondary) /tmp/cicero-fBJf/runtime.xml:788(secondary) /tmp/cicero-fBJf/runtime.xml:848(secondary) /tmp/cicero-fBJf/runtime.xml:849(secondary) /tmp/cicero-fBJf/runtime.xml:884(secondary) /tmp/cicero-fBJf/runtime.xml:905(secondary) /tmp/cicero-fBJf/runtime.xml:950(secondary) /tmp/cicero-fBJf/runtime.xml:1013(secondary) /tmp/cicero-fBJf/runtime.xml:1041(secondary) /tmp/cicero-fBJf/runtime.xml:1117(secondary) 
msgid "IPC configuration"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:727(para) 
msgid "At least as of version 5.1, it should not be necessary to do any special configuration for such parameters as <varname>SHMMAX</varname>, as it appears this is configured to allow all memory to be used as shared memory. That is the sort of configuration commonly used for other databases such as <application>DB/2</application>."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:735(para) 
msgid "It might, however, be necessary to modify the global <command>ulimit</command> information in <filename>/etc/security/limits</filename>, as the default hard limits for file sizes (<varname>fsize</varname>) and numbers of files (<varname>nofiles</varname>) might be too low."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:745(systemitem) /tmp/cicero-fBJf/runtime.xml:746(primary) 
msgid "BSD/OS"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:749(title) 
msgid "Shared Memory"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:756(programlisting) 
#, no-wrap
msgid "\noptions \"SHMALL=8192\"\noptions \"SHMMAX=\\(SHMALL*PAGE_SIZE\\)\"\n"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:750(para) 
msgid "By default, only 4 MB of shared memory is supported. Keep in mind that shared memory is not pageable; it is locked in RAM. To increase the amount of shared memory supported by your system, add something like the following to your kernel configuration file: <placeholder-1/><varname>SHMALL</varname> is measured in 4 kB pages, so a value of 1024 represents 4 MB of shared memory. Therefore the above increases the maximum shared memory area to 32 MB. For those running 4.3 or later, you will probably also need to increase <varname>KERNEL_VIRTUAL_MB</varname> above the default <literal>248</literal>. Once all changes have been made, recompile the kernel, and reboot."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:770(title) 
msgid "Semaphores"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:776(programlisting) 
#, no-wrap
msgid "\noptions \"SEMMNI=40\"\noptions \"SEMMNS=240\"\n"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:771(para) 
msgid "You will probably want to increase the number of semaphores as well; the default system total of 60 will only allow about 50 <productname>PostgreSQL</productname> connections. Set the values you want in your kernel configuration file, e.g.: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:787(systemitem) /tmp/cicero-fBJf/runtime.xml:788(primary) 
msgid "FreeBSD"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:790(para) 
msgid "The default settings are only suitable for small installations (for example, default <varname>SHMMAX</varname> is 32 MB). Changes can be made via the <command>sysctl</command> or <command>loader</command> interfaces. The following parameters can be set using <command>sysctl</command>: <screen>\n<prompt>$</prompt> <userinput>sysctl -w kern.ipc.shmall=32768</userinput>\n<prompt>$</prompt> <userinput>sysctl -w kern.ipc.shmmax=134217728</userinput>\n<prompt>$</prompt> <userinput>sysctl -w kern.ipc.semmap=256</userinput>\n</screen> To have these settings persist over reboots, modify <filename>/etc/sysctl.conf</filename>."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:805(para) 
msgid "The remaining semaphore settings are read-only as far as <command>sysctl</command> is concerned, but can be changed before boot using the <command>loader</command> prompt: <screen>\n<prompt>(loader)</prompt> <userinput>set kern.ipc.semmni=256</userinput>\n<prompt>(loader)</prompt> <userinput>set kern.ipc.semmns=512</userinput>\n<prompt>(loader)</prompt> <userinput>set kern.ipc.semmnu=256</userinput>\n</screen> Similarly these can be saved between reboots in <filename>/boot/loader.conf</filename>."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:818(para) /tmp/cicero-fBJf/runtime.xml:872(para) 
msgid "You might also want to configure your kernel to lock shared memory into RAM and prevent it from being paged out to swap. This can be accomplished using the <command>sysctl</command> setting <literal>kern.ipc.shm_use_phys</literal>."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:825(para) 
msgid "If running in FreeBSD jails by enabling <application>sysctl</application>'s <literal>security.jail.sysvipc_allowed</literal>, <application>postmaster</application>s running in different jails should be run by different operating system users. This improves security because it prevents non-root users from interfering with shared memory or semaphores in different jails, and it allows the PostgreSQL IPC cleanup code to function properly. (In FreeBSD 6.0 and later the IPC cleanup code does not properly detect processes in other jails, preventing the running of postmasters on the same port in different jails.)"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:837(para) 
msgid "<systemitem class=\"osname\">FreeBSD</systemitem> versions before 4.0 work like <systemitem class=\"osname\">NetBSD</systemitem> and <systemitem class=\"osname\"> OpenBSD</systemitem> (see below)."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:846(systemitem) /tmp/cicero-fBJf/runtime.xml:848(primary) 
msgid "NetBSD"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:847(systemitem) /tmp/cicero-fBJf/runtime.xml:849(primary) 
msgid "OpenBSD"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:859(programlisting) 
#, no-wrap
msgid "\noptions        SYSVSHM\noptions        SHMMAXPGS=4096\noptions        SHMSEG=256\n\noptions        SYSVSEM\noptions        SEMMNI=256\noptions        SEMMNS=512\noptions        SEMMNU=256\noptions        SEMMAP=256\n"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:851(para) 
msgid "The options <varname>SYSVSHM</varname> and <varname>SYSVSEM</varname> need to be enabled when the kernel is compiled. (They are by default.) The maximum size of shared memory is determined by the option <varname>SHMMAXPGS</varname> (in pages). The following shows an example of how to set the various parameters on <systemitem class=\"osname\">NetBSD</systemitem> (<systemitem class=\"osname\">OpenBSD</systemitem> uses <literal>option</literal> instead): <placeholder-1/>"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:883(systemitem) /tmp/cicero-fBJf/runtime.xml:884(primary) 
msgid "HP-UX"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:886(para) 
msgid "The default settings tend to suffice for normal installations. On <productname>HP-UX</productname> 10, the factory default for <varname>SEMMNS</varname> is 128, which might be too low for larger database sites."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:892(para) 
msgid "<acronym>IPC</acronym> parameters can be set in the <application>System Administration Manager</application> (<acronym>SAM</acronym>) under <menuchoice><guimenu>Kernel Configuration</guimenu><guimenuitem>Configurable Parameters</guimenuitem></menuchoice>. Choose <guibutton>Create A New Kernel</guibutton> when you're done."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:904(systemitem) /tmp/cicero-fBJf/runtime.xml:905(primary) 
msgid "Linux"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:907(para) 
msgid "The default maximum segment size is 32 MB, which is only adequate for very small <productname>PostgreSQL</productname> installations. The default maximum total size is 2097152 pages. A page is almost always 4096 bytes except in unusual kernel configurations with <quote>huge pages</quote> (use <literal>getconf PAGE_SIZE</literal> to verify). That makes a default limit of 8 GB, which is often enough, but not always."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:918(para) 
msgid "The shared memory size settings can be changed via the <command>sysctl</command> interface. For example, to allow 16 GB: <screen>\n<prompt>$</prompt> <userinput>sysctl -w kernel.shmmax=17179869184</userinput>\n<prompt>$</prompt> <userinput>sysctl -w kernel.shmall=4194304</userinput>\n</screen> In addition these settings can be preserved between reboots in the file <filename>/etc/sysctl.conf</filename>. Doing that is highly recommended."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:930(para) 
msgid "Ancient distributions might not have the <command>sysctl</command> program, but equivalent changes can be made by manipulating the <filename>/proc</filename> file system: <screen>\n<prompt>$</prompt> <userinput>echo 17179869184 &gt;/proc/sys/kernel/shmmax</userinput>\n<prompt>$</prompt> <userinput>echo 4194304 &gt;/proc/sys/kernel/shmall</userinput>\n</screen>"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:940(para) 
msgid "The remaining defaults are quite generously sized, and usually do not require changes."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:949(systemitem) /tmp/cicero-fBJf/runtime.xml:950(primary) 
msgid "Mac OS X"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:956(programlisting) 
#, no-wrap
msgid "\nkern.sysv.shmmax=4194304\nkern.sysv.shmmin=1\nkern.sysv.shmmni=32\nkern.sysv.shmseg=8\nkern.sysv.shmall=1024\n"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:952(para) 
msgid "The recommended method for configuring shared memory in OS X is to create a file named <filename>/etc/sysctl.conf</filename>, containing variable assignments such as: <placeholder-1/> Note that in some OS X versions, <emphasis>all five</emphasis> shared-memory parameters must be set in <filename>/etc/sysctl.conf</filename>, else the values will be ignored."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:968(para) 
msgid "Beware that recent releases of OS X ignore attempts to set <varname>SHMMAX</varname> to a value that isn't an exact multiple of 4096."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:973(para) 
msgid "<varname>SHMALL</varname> is measured in 4 kB pages on this platform."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:977(para) 
msgid "In older OS X versions, you will need to reboot to have changes in the shared memory parameters take effect. As of 10.5 it is possible to change all but <varname>SHMMNI</varname> on the fly, using <application>sysctl</application>. But it's still best to set up your preferred values via <filename>/etc/sysctl.conf</filename>, so that the values will be kept across reboots."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:991(programlisting) 
#, no-wrap
msgid "\nsysctl -w kern.sysv.shmmax\nsysctl -w kern.sysv.shmmin\nsysctl -w kern.sysv.shmmni\nsysctl -w kern.sysv.shmseg\nsysctl -w kern.sysv.shmall\n"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:986(para) 
msgid "The file <filename>/etc/sysctl.conf</filename> is only honored in OS X 10.3.9 and later. If you are running a previous 10.3.x release, you must edit the file <filename>/etc/rc</filename> and change the values in the following commands: <placeholder-1/> Note that <filename>/etc/rc</filename> is usually overwritten by OS X system updates, so you should expect to have to redo these edits after each update."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1003(para) 
msgid "In OS X 10.2 and earlier, instead edit these commands in the file <filename>/System/Library/StartupItems/SystemTuning/SystemTuning</filename>."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1012(systemitem) /tmp/cicero-fBJf/runtime.xml:1013(primary) 
msgid "SCO OpenServer"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1020(programlisting) 
#, no-wrap
msgid "\n./configure -y SHMMAX\n"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1024(programlisting) 
#, no-wrap
msgid "\n./configure SHMMAX=<replaceable>value</replaceable>\n"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1029(programlisting) 
#, no-wrap
msgid "\n./link_unix\n"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1015(para) 
msgid "In the default configuration, only 512 kB of shared memory per segment is allowed. To increase the setting, first change to the directory <filename>/etc/conf/cf.d</filename>. To display the current value of <varname>SHMMAX</varname>, run: <placeholder-1/> To set a new value for <varname>SHMMAX</varname>, run: <placeholder-2/> where <replaceable>value</replaceable> is the new value you want to use (in bytes). After setting <varname>SHMMAX</varname>, rebuild the kernel: <placeholder-3/> and reboot."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1039(term) 
msgid "<systemitem class=\"osname\">Solaris</systemitem> 2.6 to 2.9 (Solaris 6 to Solaris 9)"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1041(primary) 
msgid "Solaris"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1047(programlisting) 
#, no-wrap
msgid "\nset shmsys:shminfo_shmmax=0x2000000\nset shmsys:shminfo_shmmin=1\nset shmsys:shminfo_shmmni=256\nset shmsys:shminfo_shmseg=256\n\nset semsys:seminfo_semmap=256\nset semsys:seminfo_semmni=512\nset semsys:seminfo_semmns=512\nset semsys:seminfo_semmsl=32\n"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1043(para) 
msgid "The default maximum size of a shared memory segment is too low for <productname>PostgreSQL</productname>. The relevant settings can be changed in <filename>/etc/system</filename>, for example: <placeholder-1/> You need to reboot for the changes to take effect. See also <ulink url=\"http://sunsite.uakom.sk/sunworldonline/swol-09-1997/swol-09-insidesolaris.html\"/> for information on shared memory under older versions of Solaris."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1066(term) 
msgid "<systemitem class=\"osname\">Solaris</systemitem> 2.10 (Solaris 10)"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1068(systemitem) 
msgid "OpenSolaris"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1079(programlisting) 
#, no-wrap
msgid "\nprojadd -c \"PostgreSQL DB User\" -K \"project.max-shm-memory=(privileged,8GB,deny)\" -U postgres -G postgres user.postgres\n"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1070(para) 
msgid "In Solaris 10 and OpenSolaris, the default shared memory and semaphore settings are good enough for most <productname>PostgreSQL</productname> applications. Solaris now defaults to a <varname>SHMMAX</varname> of one-quarter of system <acronym>RAM</acronym>. If you need to increase this in order to set shared memory settings slightly higher, you should use a project setting associated with the <literal>postgres</literal> user. For example, run the following as <literal>root</literal>: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1084(para) 
msgid "This command adds the <literal>user.postgres</literal> project and raises the shared memory maximum for the <literal>postgres</literal> user to 8GB, and takes effect the next time that user logs in, or when you restart <productname>PostgreSQL</productname> (not reload). The above assumes that <productname>PostgreSQL</productname> is run by the <literal>postgres</literal> user in the <literal>postgres</literal> group. No server reboot is required."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1097(programlisting) 
#, no-wrap
msgid "\nproject.max-shm-ids=(priv,32768,deny)\nproject.max-sem-ids=(priv,4096,deny)\nproject.max-msg-ids=(priv,4096,deny)\n"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1094(para) 
msgid "Other recommended kernel setting changes for database servers which will have a large number of connections are: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1104(para) 
msgid "Additionally, if you are running <productname>PostgreSQL</productname> inside a zone, you may need to raise the zone resource usage limits as well. See \"Chapter2: Projects and Tasks\" in the <citetitle>Solaris 10 System Administrator's Guide</citetitle> for more information on <literal>projects</literal> and <command>prctl</command>."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1116(systemitem) /tmp/cicero-fBJf/runtime.xml:1117(primary) 
msgid "UnixWare"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1123(programlisting) 
#, no-wrap
msgid "\n/etc/conf/bin/idtune -g SHMMAX\n"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1129(programlisting) 
#, no-wrap
msgid "\n/etc/conf/bin/idtune SHMMAX <replaceable>value</replaceable>\n"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1135(programlisting) 
#, no-wrap
msgid "\n/etc/conf/bin/idbuild -B\n"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1119(para) 
msgid "On <productname>UnixWare</productname> 7, the maximum size for shared memory segments is only 512 kB in the default configuration. To display the current value of <varname>SHMMAX</varname>, run: <placeholder-1/> which displays the current, default, minimum, and maximum values. To set a new value for <varname>SHMMAX</varname>, run: <placeholder-2/> where <replaceable>value</replaceable> is the new value you want to use (in bytes). After setting <varname>SHMMAX</varname>, rebuild the kernel: <placeholder-3/> and reboot."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1147(title) 
msgid "<productname>PostgreSQL</productname> Shared Memory Usage"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1152(entry) 
msgid "Usage"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1153(entry) 
msgid "Approximate shared memory bytes required (as of 8.3)"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1159(entry) 
msgid "Connections"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1160(entry) 
msgid "(1800 + 270 * <xref linkend=\"guc-max-locks-per-transaction\"/>) * <xref linkend=\"guc-max-connections\"/>"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1166(entry) 
msgid "Autovacuum workers"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1167(entry) 
msgid "(1800 + 270 * <xref linkend=\"guc-max-locks-per-transaction\"/>) * <xref linkend=\"guc-autovacuum-max-workers\"/>"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1173(entry) 
msgid "Prepared transactions"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1174(entry) 
msgid "(770 + 270 * <xref linkend=\"guc-max-locks-per-transaction\"/>) * <xref linkend=\"guc-max-prepared-transactions\"/>"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1179(entry) 
msgid "Shared disk buffers"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1180(entry) 
msgid "(<xref linkend=\"guc-block-size\"/> + 208) * <xref linkend=\"guc-shared-buffers\"/>"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1184(entry) 
msgid "WAL buffers"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1185(entry) 
msgid "(<xref linkend=\"guc-wal-block-size\"/> + 8) * <xref linkend=\"guc-wal-buffers\"/>"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1189(entry) 
msgid "Fixed space requirements"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1190(entry) 
msgid "770 kB"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1199(title) 
msgid "Resource Limits"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1221(programlisting) 
#, no-wrap
msgid "\ndefault:\\\n...\n        :datasize-cur=256M:\\\n        :maxproc-cur=256:\\\n        :openfiles-cur=256:\\\n...\n"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1201(para) 
msgid "Unix-like operating systems enforce various kinds of resource limits that might interfere with the operation of your <productname>PostgreSQL</productname> server. Of particular importance are limits on the number of processes per user, the number of open files per process, and the amount of memory available to each process. Each of these have a <quote>hard</quote> and a <quote>soft</quote> limit. The soft limit is what actually counts but it can be changed by the user up to the hard limit. The hard limit can only be changed by the root user. The system call <function>setrlimit</function> is responsible for setting these parameters. The shell's built-in command <command>ulimit</command> (Bourne shells) or <command>limit</command> (<application>csh</application>) is used to control the resource limits from the command line. On BSD-derived systems the file <filename>/etc/login.conf</filename> controls the various resource limits set during login. See the operating system documentation for details. The relevant parameters are <varname>maxproc</varname>, <varname>openfiles</varname>, and <varname>datasize</varname>. For example: <placeholder-1/> (<literal>-cur</literal> is the soft limit. Append <literal>-max</literal> to set the hard limit.)"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1237(para) 
msgid "On <productname>Linux</productname><filename>/proc/sys/fs/file-max</filename> determines the maximum number of open files that the kernel will support. It can be changed by writing a different number into the file or by adding an assignment in <filename>/etc/sysctl.conf</filename>. The maximum limit of files per process is fixed at the time the kernel is compiled; see <filename>/usr/src/linux/Documentation/proc.txt</filename> for more information."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1233(para) 
msgid "Kernels can also have system-wide limits on some resources. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1252(para) 
msgid "The <productname>PostgreSQL</productname> server uses one process per connection so you should provide for at least as many processes as allowed connections, in addition to what you need for the rest of your system. This is usually not a problem but if you run several servers on one machine things might get tight."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1260(para) 
msgid "The factory default limit on open files is often set to <quote>socially friendly</quote> values that allow many users to coexist on a machine without using an inappropriate fraction of the system resources. If you run many servers on a machine this is perhaps what you want, but on dedicated servers you might want to raise this limit."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1269(para) 
msgid "On the other side of the coin, some systems allow individual processes to open large numbers of files; if more than a few processes do so then the system-wide limit can easily be exceeded. If you find this happening, and you do not want to alter the system-wide limit, you can set <productname>PostgreSQL</productname>'s <xref linkend=\"guc-max-files-per-process\"/> configuration parameter to limit the consumption of open files."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1281(title) 
msgid "Linux Memory Overcommit"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1283(para) 
msgid "In Linux 2.4 and later, the default virtual memory behavior is not optimal for <productname>PostgreSQL</productname>. Because of the way that the kernel implements memory overcommit, the kernel might terminate the <productname>PostgreSQL</productname> server (the master server process) if the memory demands of another process cause the system to run out of virtual memory."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1296(programlisting) 
#, no-wrap
msgid "\nOut of Memory: Killed process 12345 (postgres).\n"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1292(para) 
msgid "If this happens, you will see a kernel message that looks like this (consult your system documentation and configuration on where to look for such a message): <placeholder-1/> This indicates that the <filename>postgres</filename> process has been terminated due to memory pressure. Although existing database connections will continue to function normally, no new connections will be accepted. To recover, <productname>PostgreSQL</productname> will need to be restarted."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1306(para) 
msgid "One way to avoid this problem is to run <productname>PostgreSQL</productname> on a machine where you can be sure that other processes will not run the machine out of memory. If memory is tight, increasing the swap space of the operating system can help avoid the problem, because the out-of-memory (OOM) killer is invoked only when physical memory and swap space are exhausted."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1324(programlisting) 
#, no-wrap
msgid "\nsysctl -w vm.overcommit_memory=2\n"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1316(para) 
msgid "On Linux 2.6 and later, it is possible to modify the kernel's behavior so that it will not <quote>overcommit</quote> memory. Although this setting will not prevent the <ulink url=\"http://lwn.net/Articles/104179/\">OOM killer</ulink> from being invoked altogether, it will lower the chances significantly and will therefore lead to more robust system behavior. This is done by selecting strict overcommit mode via <command>sysctl</command>: <placeholder-1/> or placing an equivalent entry in <filename>/etc/sysctl.conf</filename>. You might also wish to modify the related setting <varname>vm.overcommit_ratio</varname>. For details see the kernel documentation file <filename>Documentation/vm/overcommit-accounting</filename>."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1339(programlisting) 
#, no-wrap
msgid "\necho -17 &gt; /proc/self/oom_adj\n"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1333(para) 
msgid "Another approach, which can be used with or without altering <varname>vm.overcommit_memory</varname>, is to set the process-specific <varname>oom_adj</varname> value for the postmaster process to <literal>-17</literal>, thereby guaranteeing it will not be targeted by the OOM killer. The simplest way to do this is to execute <placeholder-1/> in the postmaster's startup script just before invoking the postmaster. Note that this action must be done as root, or it will have no effect; so a root-owned startup script is the easiest place to do it. If you do this, you may also wish to build <productname>PostgreSQL</productname> with <literal>-DLINUX_OOM_ADJ=0</literal> added to <varname>CFLAGS</varname>. That will cause postmaster child processes to run with the normal <varname>oom_adj</varname> value of zero, so that the OOM killer can still target them at need."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1353(para) 
msgid "Some vendors' Linux 2.4 kernels are reported to have early versions of the 2.6 overcommit <command>sysctl</command> parameter. However, setting <literal>vm.overcommit_memory</literal> to 2 on a 2.4 kernel that does not have the relevant code will make things worse, not better. It is recommended that you inspect the actual kernel source code (see the function <function>vm_enough_memory</function> in the file <filename>mm/mmap.c</filename>) to verify what is supported in your kernel before you try this in a 2.4 installation. The presence of the <filename>overcommit-accounting</filename> documentation file should <emphasis>not</emphasis> be taken as evidence that the feature is there. If in any doubt, consult a kernel expert or your kernel vendor."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1373(title) 
msgid "Shutting Down the Server"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1376(primary) 
msgid "shutdown"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1386(systemitem) /tmp/cicero-fBJf/runtime.xml:1386(primary) 
msgid "SIGTERM"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1388(para) 
msgid "This is the <firstterm>Smart Shutdown</firstterm> mode. After receiving <systemitem>SIGTERM</systemitem>, the server disallows new connections, but lets existing sessions end their work normally. It shuts down only after all of the sessions terminate. If the server is in online backup mode, it additionally waits until online backup mode is no longer active. While backup mode is active, new connections will still be allowed, but only to superusers (this exception allows a superuser to connect to terminate online backup mode). If the server is in recovery when a smart shutdown is requested, recovery and streaming replication will be stopped only after all regular sessions have terminated."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1405(systemitem) /tmp/cicero-fBJf/runtime.xml:1405(primary) 
msgid "SIGINT"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1407(para) 
msgid "This is the <firstterm>Fast Shutdown</firstterm> mode. The server disallows new connections and sends all existing server processes <systemitem>SIGTERM</systemitem>, which will cause them to abort their current transactions and exit promptly. It then waits for all server processes to exit and finally shuts down. If the server is in online backup mode, backup mode will be terminated, rendering the backup useless."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1420(systemitem) /tmp/cicero-fBJf/runtime.xml:1420(primary) 
msgid "SIGQUIT"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1422(para) 
msgid "This is the <firstterm>Immediate Shutdown</firstterm> mode. The master <command>postgres</command> process will send a <systemitem>SIGQUIT</systemitem> to all child processes and exit immediately, without properly shutting itself down. The child processes likewise exit immediately upon receiving <systemitem>SIGQUIT</systemitem>. This will lead to recovery (by replaying the WAL log) upon next start-up. This is recommended only in emergencies."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1379(para) 
msgid "There are several ways to shut down the database server. You control the type of shutdown by sending different signals to the master <command>postgres</command> process. <placeholder-1/>"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1437(para) 
msgid "The <xref linkend=\"app-pg-ctl\"/> program provides a convenient interface for sending these signals to shut down the server. Alternatively, you can send the signal directly using <command>kill</command> on non-Windows systems. The <acronym>PID</acronym> of the <command>postgres</command> process can be found using the <command>ps</command> program, or from the file <filename>postmaster.pid</filename> in the data directory. For example, to do a fast shutdown: <screen>\n$ <userinput>kill -INT `head -1 /usr/local/pgsql/data/postmaster.pid`</userinput>\n</screen>"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1452(para) 
msgid "It is best not to use <systemitem>SIGKILL</systemitem> to shut down the server. Doing so will prevent the server from releasing shared memory and semaphores, which might then have to be done manually before a new server can be started. Furthermore, <systemitem>SIGKILL</systemitem> kills the <command>postgres</command> process without letting it relay the signal to its subprocesses, so it will be necessary to kill the individual subprocesses by hand as well."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1464(para) 
msgid "To terminate an individual session while allowing other sessions to continue, use <function>pg_terminate_backend()</function> (see <xref linkend=\"functions-admin-signal-table\"/>) or send a <systemitem>SIGTERM</systemitem> signal to the child process associated with the session."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1474(title) 
msgid "Upgrading a <productname>PostgreSQL</productname> Cluster"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1477(primary) 
msgid "upgrading"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1481(primary) 
msgid "version"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1482(secondary) 
msgid "compatibility"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1485(para) 
msgid "This section discusses how to upgrade your database data from one <productname>PostgreSQL</productname> release to a newer one."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1490(para) 
msgid "<productname>PostgreSQL</productname> major versions are represented by the first two digit groups of the version number, e.g., 8.4. <productname>PostgreSQL</productname> minor versions are represented by the third group of version digits, e.g., 8.4.2 is the second minor release of 8.4. Minor releases never change the internal storage format and are always compatible with earlier and later minor releases of the same major version number, e.g., 8.4.2 is compatible with 8.4, 8.4.1 and 8.4.6. To update between compatible versions, you simply replace the executables while the server is down and restart the server. The data directory remains unchanged — minor upgrades are that simple."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1504(para) 
msgid "For <emphasis>major</emphasis> releases of <productname>PostgreSQL</productname>, the internal data storage format is subject to change, thus complicating upgrades. The traditional method for moving data to a new major version is to dump and reload the database. Other methods are available, as discussed below."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1512(para) 
msgid "New major versions also typically introduce some user-visible incompatibilities, so application programming changes might be required. All user-visible changes are listed in the release notes (<xref linkend=\"release\"/>); pay particular attention to the section labeled \"Migration\". If you are upgrading across several major versions, be sure to read the release notes for each intervening version."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1522(para) 
msgid "Cautious users will want to test their client applications on the new version before switching over fully; therefore, it's often a good idea to set up concurrent installations of old and new versions. When testing a <productname>PostgreSQL</productname> major upgrade, consider the following categories of possible changes:"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1533(term) 
msgid "Administration"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1535(para) 
msgid "The capabilities available for administrators to monitor and control the server often change and improve in each major release."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1543(term) 
msgid "SQL"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1545(para) 
msgid "Typically this includes new SQL command capabilities and not changes in behavior, unless specifically mentioned in the release notes."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1553(term) 
msgid "Library API"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1555(para) 
msgid "Typically libraries like <application>libpq</application> only add new functionality, again unless mentioned in the release notes."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1563(term) 
msgid "System Catalogs"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1565(para) 
msgid "System catalog changes usually only affect database management tools."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1572(term) 
msgid "Server C-language API"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1574(para) 
msgid "This involves changes in the backend function API, which is written in the C programming language. Such changes affect code that references backend functions deep inside the server."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1585(title) 
msgid "Upgrading Data via <application>pg_dump</application>"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1587(para) 
msgid "To dump data from one major version of <productname>PostgreSQL</productname> and reload it in another, you must use <application>pg_dump</application>; file system level backup methods will not work. (There are checks in place that prevent you from using a data directory with an incompatible version of <productname>PostgreSQL</productname>, so no great harm can be done by trying to start the wrong server version on a data directory.)"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1596(para) 
msgid "It is recommended that you use the <application>pg_dump</application> and <application>pg_dumpall</application> programs from the newer version of <productname>PostgreSQL</productname>, to take advantage of enhancements that might have been made in these programs. Current releases of the dump programs can read data from any server version back to 7.0."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1604(para) 
msgid "These instructions assume that your existing installation is under the <filename>/usr/local/pgsql</filename> directory, and that the data area is in <filename>/usr/local/pgsql/data</filename>. Substitute your paths appropriately."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1613(para) 
msgid "If making a backup, make sure that your database is not being updated. This does not affect the integrity of the backup, but the changed data would of course not be included. If necessary, edit the permissions in the file <filename>/usr/local/pgsql/data/pg_hba.conf</filename> (or equivalent) to disallow access from everyone except you. See <xref linkend=\"client-authentication\"/> for additional information on access control."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1623(para) 
msgid "<indexterm><primary>pg_dumpall</primary><secondary>use during upgrade</secondary></indexterm> To back up your database installation, type: <screen>\n<userinput>pg_dumpall &gt; <replaceable>outputfile</replaceable></userinput>\n</screen> If you need to preserve OIDs (such as when using them as foreign keys), then use the <option>-o</option> option when running <application>pg_dumpall</application>."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1638(para) 
msgid "To make the backup, you can use the <application>pg_dumpall</application> command from the version you are currently running. For best results, however, try to use the <application>pg_dumpall</application> command from <productname>PostgreSQL</productname> &version;, since this version contains bug fixes and improvements over older versions. While this advice might seem idiosyncratic since you haven't installed the new version yet, it is advisable to follow it if you plan to install the new version in parallel with the old version. In that case you can complete the installation normally and transfer the data later. This will also decrease the downtime."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1654(para) 
msgid "Shut down the old server: <screen>\n<userinput>pg_ctl stop</userinput>\n</screen> On systems that have <productname>PostgreSQL</productname> started at boot time, there is probably a start-up file that will accomplish the same thing. For example, on a <systemitem class=\"osname\">Red Hat Linux</systemitem> system one might find that this works: <screen>\n<userinput>/etc/rc.d/init.d/postgresql stop</userinput>\n</screen> See <xref linkend=\"runtime\"/> for details about starting and stopping the server."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1672(para) 
msgid "If restoring from backup, rename or delete the old installation directory. It is a good idea to rename the directory, rather than delete it, in case you have trouble and need to revert to it. Keep in mind the directory might consume significant disk space. To rename the directory, use a command like this: <screen>\n<userinput>mv /usr/local/pgsql /usr/local/pgsql.old</userinput>\n</screen> (Be sure to move the directory as a single unit so relative paths remain unchanged.)"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1687(para) 
msgid "Install the new version of <productname>PostgreSQL</productname> as outlined in <xref linkend=\"install-procedure\"/>."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1700(userinput) 
#, no-wrap
msgid "/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1695(para) 
msgid "Create a new database cluster if needed. Remember that you must execute these commands while logged in to the special database user account (which you already have if you are upgrading). <placeholder-1/>"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1706(para) 
msgid "Restore your previous <filename>pg_hba.conf</filename> and any <filename>postgresql.conf</filename> modifications."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1717(userinput) 
#, no-wrap
msgid "/usr/local/pgsql/bin/postgres -D /usr/local/pgsql/data"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1713(para) 
msgid "Start the database server, again using the special database user account: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1723(para) 
msgid "Finally, restore your data from backup with: <screen>\n<userinput>/usr/local/pgsql/bin/psql -d postgres -f <replaceable>outputfile</replaceable></userinput>\n</screen> using the <emphasis>new</emphasis><application>psql</application>."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1738(programlisting) 
#, no-wrap
msgid "\npg_dumpall -p 5432 | psql -d postgres -p 5433\n"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1733(para) 
msgid "The least downtime can be achieved by installing the new server in a different directory and running both the old and the new servers in parallel, on different ports. Then you can use something like: <placeholder-1/> to transfer your data."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1747(title) 
msgid "Non-Dump Upgrade Methods"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1749(para) 
msgid "The <link linkend=\"pgupgrade\">pg_upgrade</link> module allows an installation to be migrated in-place from one major <productname>PostgreSQL</productname> version to the next. Upgrades can be performed in minutes."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1756(para) 
msgid "It is also possible to use certain replication methods, such as <productname>Slony</productname>, to create a standby server with the updated version of <productname>PostgreSQL</productname>. This is possible because Slony supports replication between different major versions of <productname>PostgreSQL</productname>. The standby can be on the same computer or a different computer. Once it has synced up with the master server (running the older version of <productname>PostgreSQL</productname>), you can switch masters and make the standby the master and shut down the older database instance. Such a switch-over results in only several seconds of downtime for an upgrade."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1773(title) 
msgid "Preventing Server Spoofing"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1776(primary) 
msgid "server spoofing"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1779(para) 
msgid "While the server is running, it is not possible for a malicious user to take the place of the normal database server. However, when the server is down, it is possible for a local user to spoof the normal server by starting their own server. The spoof server could read passwords and queries sent by clients, but could not return any data because the <varname>PGDATA</varname> directory would still be secure because of directory permissions. Spoofing is possible because any user can start a database server; a client cannot identify an invalid server unless it is specially configured."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1791(para) 
msgid "The simplest way to prevent spoofing for <literal>local</literal> connections is to use a Unix domain socket directory (<xref linkend=\"guc-unix-socket-directory\"/>) that has write permission only for a trusted local user. This prevents a malicious user from creating their own socket file in that directory. If you are concerned that some applications might still reference <filename>/tmp</filename> for the socket file and hence be vulnerable to spoofing, during operating system startup create a symbolic link <filename>/tmp/.s.PGSQL.5432</filename> that points to the relocated socket file. You also might need to modify your <filename>/tmp</filename> cleanup script to prevent removal of the symbolic link."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1804(para) 
msgid "To prevent spoofing on TCP connections, the best solution is to use SSL certificates and make sure that clients check the server's certificate. To do that, the server must be configured to accept only <literal>hostssl</literal> connections (<xref linkend=\"auth-pg-hba-conf\"/>) and have SSL <filename>server.key</filename> (key) and <filename>server.crt</filename> (certificate) files (<xref linkend=\"ssl-tcp\"/>). The TCP client must connect using <literal>sslmode=verify-ca</literal> or <literal>verify-full</literal> and have the appropriate root certificate file installed (<xref linkend=\"libpq-connect\"/>)."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1820(title) 
msgid "Encryption Options"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1823(primary) 
msgid "encryption"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1826(para) 
msgid "<productname>PostgreSQL</productname> offers encryption at several levels, and provides flexibility in protecting data from disclosure due to database server theft, unscrupulous administrators, and insecure networks. Encryption might also be required to secure sensitive data such as medical records or financial transactions."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1837(term) 
msgid "Password Storage Encryption"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1840(para) 
msgid "By default, database user passwords are stored as MD5 hashes, so the administrator cannot determine the actual password assigned to the user. If MD5 encryption is used for client authentication, the unencrypted password is never even temporarily present on the server because the client MD5-encrypts it before being sent across the network."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1852(term) 
msgid "Encryption For Specific Columns"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1855(para) 
msgid "The <xref linkend=\"pgcrypto\"/> module allows certain fields to be stored encrypted. This is useful if only some of the data is sensitive. The client supplies the decryption key and the data is decrypted on the server and then sent to the client."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1863(para) 
msgid "The decrypted data and the decryption key are present on the server for a brief time while it is being decrypted and communicated between the client and server. This presents a brief moment where the data and keys can be intercepted by someone with complete access to the database server, such as the system administrator."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1875(term) 
msgid "Data Partition Encryption"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1878(para) 
msgid "On Linux, encryption can be layered on top of a file system using a <quote>loopback device</quote>. This allows an entire file system partition to be encrypted on disk, and decrypted by the operating system. On FreeBSD, the equivalent facility is called GEOM Based Disk Encryption (<acronym>gbde</acronym>), and many other operating systems support this functionality, including Windows."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1887(para) 
msgid "This mechanism prevents unencrypted data from being read from the drives if the drives or the entire computer is stolen. This does not protect against attacks while the file system is mounted, because when mounted, the operating system provides an unencrypted view of the data. However, to mount the file system, you need some way for the encryption key to be passed to the operating system, and sometimes the key is stored somewhere on the host that mounts the disk."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1901(term) 
msgid "Encrypting Passwords Across A Network"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1904(para) 
msgid "The <literal>MD5</literal> authentication method double-encrypts the password on the client before sending it to the server. It first MD5-encrypts it based on the user name, and then encrypts it based on a random salt sent by the server when the database connection was made. It is this double-encrypted value that is sent over the network to the server. Double-encryption not only prevents the password from being discovered, it also prevents another connection from using the same encrypted password to connect to the database server at a later time."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1919(term) 
msgid "Encrypting Data Across A Network"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1922(para) 
msgid "SSL connections encrypt all data sent across the network: the password, the queries, and the data returned. The <filename>pg_hba.conf</filename> file allows administrators to specify which hosts can use non-encrypted connections (<literal>host</literal>) and which require SSL-encrypted connections (<literal>hostssl</literal>). Also, clients can specify that they connect to servers only via SSL. <application>Stunnel</application> or <application>SSH</application> can also be used to encrypt transmissions."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1936(term) 
msgid "SSL Host Authentication"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1939(para) 
msgid "It is possible for both the client and server to provide SSL certificates to each other. It takes some extra configuration on each side, but this provides stronger verification of identity than the mere use of passwords. It prevents a computer from pretending to be the server just long enough to read the password sent by the client. It also helps prevent <quote>man in the middle</quote> attacks where a computer between the client and server pretends to be the server and reads and passes all data between the client and server."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1954(term) 
msgid "Client-Side Encryption"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1957(para) 
msgid "If the system administrator for the server's machine cannot be trusted, it is necessary for the client to encrypt the data; this way, unencrypted data never appears on the database server. Data is encrypted on the client before being sent to the server, and database results have to be decrypted on the client before being used."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1973(title) 
msgid "Secure TCP/IP Connections with SSL"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1976(primary) 
msgid "SSL"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1979(para) 
msgid "<productname>PostgreSQL</productname> has native support for using <acronym>SSL</acronym> connections to encrypt client/server communications for increased security. This requires that <productname>OpenSSL</productname> is installed on both client and server systems and that support in <productname>PostgreSQL</productname> is enabled at build time (see <xref linkend=\"installation\"/>)."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:1988(para) 
msgid "With <acronym>SSL</acronym> support compiled in, the <productname>PostgreSQL</productname> server can be started with <acronym>SSL</acronym> enabled by setting the parameter <xref linkend=\"guc-ssl\"/> to <literal>on</literal> in <filename>postgresql.conf</filename>. The server will listen for both normal and <acronym>SSL</acronym> connections on the same TCP port, and will negotiate with any connecting client on whether to use <acronym>SSL</acronym>. By default, this is at the client's option; see <xref linkend=\"auth-pg-hba-conf\"/> about how to set up the server to require use of <acronym>SSL</acronym> for some or all connections."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2001(para) 
msgid "<productname>PostgreSQL</productname> reads the system-wide <productname>OpenSSL</productname> configuration file. By default, this file is named <filename>openssl.cnf</filename> and is located in the directory reported by <literal>openssl version -d</literal>. This default can be overridden by setting environment variable <envar>OPENSSL_CONF</envar> to the name of the desired configuration file."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2010(para) 
msgid "<productname>OpenSSL</productname> supports a wide range of ciphers and authentication algorithms, of varying strength. While a list of ciphers can be specified in the <productname>OpenSSL</productname> configuration file, you can specify ciphers specifically for use by the database server by modifying <xref linkend=\"guc-ssl-ciphers\"/> in <filename>postgresql.conf</filename>."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2020(para) 
msgid "It is possible to have authentication without encryption overhead by using <literal>NULL-SHA</literal> or <literal>NULL-MD5</literal> ciphers. However, a man-in-the-middle could read and pass communications between client and server. Also, encryption overhead is minimal compared to the overhead of authentication. For these reasons NULL ciphers are not recommended."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2030(para) 
msgid "To start in <acronym>SSL</acronym> mode, the files <filename>server.crt</filename> and <filename>server.key</filename> must exist in the server's data directory. These files should contain the server certificate and private key, respectively. On Unix systems, the permissions on <filename>server.key</filename> must disallow any access to world or group; achieve this by the command <command>chmod 0600 server.key</command>. If the private key is protected with a passphrase, the server will prompt for the passphrase and will not start until it has been entered."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2043(para) 
msgid "In some cases, the server certificate might be signed by an <quote>intermediate</quote> certificate authority, rather than one that is directly trusted by clients. To use such a certificate, append the certificate of the signing authority to the <filename>server.crt</filename> file, then its parent authority's certificate, and so on up to a <quote>root</quote> authority that is trusted by the clients. The root certificate should be included in every case where <filename>server.crt</filename> contains more than one certificate."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2055(title) 
msgid "Using Client Certificates"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2057(para) 
msgid "To require the client to supply a trusted certificate, place certificates of the certificate authorities (<acronym>CA</acronym>s) you trust in the file <filename>root.crt</filename> in the data directory, and set the <literal>clientcert</literal> parameter to 1 on the appropriate <literal>hostssl</literal> line(s) in <filename>pg_hba.conf</filename>. A certificate will then be requested from the client during SSL connection startup. (See <xref linkend=\"libpq-ssl\"/> for a description of how to set up certificates on the client.) The server will verify that the client's certificate is signed by one of the trusted certificate authorities. Certificate Revocation List (CRL) entries are also checked if the file <filename>root.crl</filename> exists. (See <ulink url=\"http://h71000.www7.hp.com/DOC/83final/BA554_90007/ch04s02.html\"/> for diagrams showing SSL certificate usage.)"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2076(para) 
msgid "The <literal>clientcert</literal> option in <filename>pg_hba.conf</filename> is available for all authentication methods, but only for rows specified as <literal>hostssl</literal>. When <literal>clientcert</literal> is not specified or is set to 0, the server will still verify presented client certificates against <filename>root.crt</filename> if that file exists — but it will not insist that a client certificate be presented."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2085(para) 
msgid "Note that <filename>root.crt</filename> lists the top-level CAs that are considered trusted for signing client certificates. In principle it need not list the CA that signed the server's certificate, though in most cases that CA would also be trusted for client certificates."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2092(para) 
msgid "If you are setting up client certificates, you may wish to use the <literal>cert</literal> authentication method, so that the certificates control user authentication as well as providing connection security. See <xref linkend=\"auth-cert\"/> for details."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2101(title) /tmp/cicero-fBJf/runtime.xml:2109(title) 
msgid "SSL Server File Usage"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2103(para) 
msgid "<xref linkend=\"ssl-file-usage\"/> summarizes the files that are relevant to the SSL setup on the server."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2113(entry) 
msgid "File"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2114(entry) 
msgid "Contents"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2115(entry) 
msgid "Effect"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2122(filename) 
msgid "$PGDATA/server.crt"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2123(entry) 
msgid "server certificate"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2124(entry) 
msgid "sent to client to indicate server's identity"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2128(filename) 
msgid "$PGDATA/server.key"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2129(entry) 
msgid "server private key"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2130(entry) 
msgid "proves server certificate was sent by the owner; does not indicate certificate owner is trustworthy"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2135(filename) 
msgid "$PGDATA/root.crt"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2136(entry) 
msgid "trusted certificate authorities"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2137(entry) 
msgid "checks that client certificate is signed by a trusted certificate authority"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2142(filename) 
msgid "$PGDATA/root.crl"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2143(entry) 
msgid "certificates revoked by certificate authorities"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2144(entry) 
msgid "client certificate must not be on this list"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2151(para) 
msgid "The files <filename>server.key</filename>, <filename>server.crt</filename>, <filename>root.crt</filename>, and <filename>root.crl</filename> are only examined during server start; so you must restart the server for changes in them to take effect."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2160(title) 
msgid "Creating a Self-signed Certificate"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2165(programlisting) 
#, no-wrap
msgid "\nopenssl req -new -text -out server.req\n"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2174(programlisting) 
#, no-wrap
msgid "\nopenssl rsa -in privkey.pem -out server.key\nrm privkey.pem\n"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2179(programlisting) 
#, no-wrap
msgid "\nopenssl req -x509 -in server.req -text -key server.key -out server.crt\n"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2185(programlisting) 
#, no-wrap
msgid "\nchmod og-rwx server.key\n"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2162(para) 
msgid "To create a quick self-signed certificate for the server, use the following <productname>OpenSSL</productname> command: <placeholder-1/> Fill out the information that <application>openssl</application> asks for. Make sure you enter the local host name as <quote>Common Name</quote>; the challenge password can be left blank. The program will generate a key that is passphrase protected; it will not accept a passphrase that is less than four characters long. To remove the passphrase (as you must if you want automatic start-up of the server), run the commands: <placeholder-2/> Enter the old passphrase to unlock the existing key. Now do: <placeholder-3/> to turn the certificate into a self-signed certificate and to copy the key and certificate to where the server will look for them. Finally do: <placeholder-4/> because the server will reject the file if its permissions are more liberal than this. For more details on how to create your server private key and certificate, refer to the <productname>OpenSSL</productname> documentation."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2194(para) 
msgid "A self-signed certificate can be used for testing, but a certificate signed by a certificate authority (<acronym>CA</acronym>) (either one of the global <acronym>CAs</acronym> or a local one) should be used in production so that clients can verify the server's identity. If all the clients are local to the organization, using a local <acronym>CA</acronym> is recommended."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2208(title) 
msgid "Secure TCP/IP Connections with <application>SSH</application> Tunnels"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2211(primary) 
msgid "ssh"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2214(para) 
msgid "It is possible to use <application>SSH</application> to encrypt the network connection between clients and a <productname>PostgreSQL</productname> server. Done properly, this provides an adequately secure network connection, even for non-SSL-capable clients."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2228(programlisting) 
#, no-wrap
msgid "\nssh -L 63333:localhost:5432 joe@foo.com\n"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2241(programlisting) 
#, no-wrap
msgid "\npsql -h localhost -p 63333 postgres\n"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2222(para) 
msgid "First make sure that an <application>SSH</application> server is running properly on the same machine as the <productname>PostgreSQL</productname> server and that you can log in using <command>ssh</command> as some user. Then you can establish a secure tunnel with a command like this from the client machine: <placeholder-1/> The first number in the <option>-L</option> argument, 63333, is the port number of your end of the tunnel; it can be any unused port. (IANA reserves ports 49152 through 65535 for private use.) The second number, 5432, is the remote end of the tunnel: the port number your server is using. The name or IP address between the port numbers is the host with the database server you are going to connect to, as seen from the host you are logging in to, which is <literal>foo.com</literal> in this example. In order to connect to the database server using this tunnel, you connect to port 63333 on the local machine: <placeholder-2/> To the database server it will then look as though you are really user <literal>joe</literal> on host <literal>foo.com</literal> connecting to <literal>localhost</literal> in that context, and it will use whatever authentication procedure was configured for connections from this user and host. Note that the server will not think the connection is SSL-encrypted, since in fact it is not encrypted between the <application>SSH</application> server and the <productname>PostgreSQL</productname> server. This should not pose any extra security risk as long as they are on the same machine."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2256(para) 
msgid "In order for the tunnel setup to succeed you must be allowed to connect via <command>ssh</command> as <literal>joe@foo.com</literal>, just as if you had attempted to use <command>ssh</command> to create a terminal session."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2266(programlisting) 
#, no-wrap
msgid "\nssh -L 63333:foo.com:5432 joe@foo.com\n"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2264(para) 
msgid "You could also have set up the port forwarding as <placeholder-1/> but then the database server will see the connection as coming in on its <literal>foo.com</literal> interface, which is not opened by the default setting <literal>listen_addresses = 'localhost'</literal>. This is usually not what you want."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2278(programlisting) 
#, no-wrap
msgid "\nssh -L 63333:db.foo.com:5432 joe@shell.foo.com\n"
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2275(para) 
msgid "If you have to <quote>hop</quote> to the database server via some login host, one possible setup could look like this: <placeholder-1/> Note that this way the connection from <literal>shell.foo.com</literal> to <literal>db.foo.com</literal> will not be encrypted by the SSH tunnel. SSH offers quite a few configuration possibilities when the network is restricted in various ways. Please refer to the SSH documentation for details."
msgstr ""

#: /tmp/cicero-fBJf/runtime.xml:2291(para) 
msgid "Several other applications exist that can provide secure tunnels using a procedure similar in concept to the one just described."
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2.
#: /tmp/cicero-fBJf/runtime.xml:0(None) 
msgid "translator-credits"
msgstr ""

