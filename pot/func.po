msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2011-09-02 12:50+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: /tmp/cicero-BGQN/func.xml:5(title) 
msgid "Functions and Operators"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8(primary) /tmp/cicero-BGQN/func.xml:12732(parameter) /tmp/cicero-BGQN/func.xml:12739(parameter) 
msgid "function"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12(primary) /tmp/cicero-BGQN/func.xml:43(primary) /tmp/cicero-BGQN/func.xml:11663(replaceable) /tmp/cicero-BGQN/func.xml:11664(replaceable) /tmp/cicero-BGQN/func.xml:11697(replaceable) /tmp/cicero-BGQN/func.xml:11698(replaceable) /tmp/cicero-BGQN/func.xml:11728(replaceable) /tmp/cicero-BGQN/func.xml:11754(replaceable) /tmp/cicero-BGQN/func.xml:11789(replaceable) /tmp/cicero-BGQN/func.xml:11938(replaceable) /tmp/cicero-BGQN/func.xml:11939(replaceable) /tmp/cicero-BGQN/func.xml:11975(replaceable) /tmp/cicero-BGQN/func.xml:12007(replaceable) 
msgid "operator"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:15(para) 
msgid "<productname>PostgreSQL</productname> provides a large number of functions and operators for the built-in data types. Users can also define their own functions and operators, as described in <xref linkend=\"server-programming\"/>. The <application>psql</application> commands <command>\\df</command> and <command>\\do</command> can be used to list all available functions and operators, respectively."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:25(para) 
msgid "If you are concerned about portability then note that most of the functions and operators described in this chapter, with the exception of the most trivial arithmetic and comparison operators and some explicitly marked functions, are not specified by the <acronym>SQL</acronym> standard. Some of this extended functionality is present in other <acronym>SQL</acronym> database management systems, and in many cases this functionality is compatible and consistent between the various implementations. This chapter is also not exhaustive; additional functions appear in relevant sections of the manual."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:40(title) 
msgid "Logical Operators"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:44(secondary) 
msgid "logical"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:48(primary) 
msgid "Boolean"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:49(secondary) /tmp/cicero-BGQN/func.xml:190(secondary) 
msgid "operators"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:50(see) 
msgid "operators, logical"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:81(literal) 
msgid "AND"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:82(literal) 
msgid "OR"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:83(literal) 
msgid "NOT"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:53(para) 
msgid "The usual logical operators are available: <indexterm><primary>AND (operator)</primary></indexterm><indexterm><primary>OR (operator)</primary></indexterm><indexterm><primary>NOT (operator)</primary></indexterm><indexterm><primary>conjunction</primary></indexterm><indexterm><primary>disjunction</primary></indexterm><indexterm><primary>negation</primary></indexterm><placeholder-1/><acronym>SQL</acronym> uses a three-valued logic system with true, false, and <literal>null</literal>, which represents <quote>unknown</quote>. Observe the following truth tables: <informaltable><tgroup cols=\"4\"><thead><row><entry><replaceable>a</replaceable></entry><entry><replaceable>b</replaceable></entry><entry><replaceable>a</replaceable> AND <replaceable>b</replaceable></entry><entry><replaceable>a</replaceable> OR <replaceable>b</replaceable></entry></row></thead><tbody><row><entry>TRUE</entry><entry>TRUE</entry><entry>TRUE</entry><entry>TRUE</entry></row><row><entry>TRUE</entry><entry>FALSE</entry><entry>FALSE</entry><entry>TRUE</entry></row><row><entry>TRUE</entry><entry>NULL</entry><entry>NULL</entry><entry>TRUE</entry></row><row><entry>FALSE</entry><entry>FALSE</entry><entry>FALSE</entry><entry>FALSE</entry></row><row><entry>FALSE</entry><entry>NULL</entry><entry>FALSE</entry><entry>NULL</entry></row><row><entry>NULL</entry><entry>NULL</entry><entry>NULL</entry><entry>NULL</entry></row></tbody></tgroup></informaltable><informaltable><tgroup cols=\"2\"><thead><row><entry><replaceable>a</replaceable></entry><entry>NOT <replaceable>a</replaceable></entry></row></thead><tbody><row><entry>TRUE</entry><entry>FALSE</entry></row><row><entry>FALSE</entry><entry>TRUE</entry></row><row><entry>NULL</entry><entry>NULL</entry></row></tbody></tgroup></informaltable>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:176(para) 
msgid "The operators <literal>AND</literal> and <literal>OR</literal> are commutative, that is, you can switch the left and right operand without affecting the result. But see <xref linkend=\"syntax-express-eval\"/> for more information about the order of evaluation of subexpressions."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:186(title) /tmp/cicero-BGQN/func.xml:199(title) 
msgid "Comparison Operators"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:189(primary) /tmp/cicero-BGQN/func.xml:11784(primary) /tmp/cicero-BGQN/func.xml:11838(primary) 
msgid "comparison"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:193(para) 
msgid "The usual comparison operators are available, shown in <xref linkend=\"functions-comparison-table\"/>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:203(entry) /tmp/cicero-BGQN/func.xml:464(entry) /tmp/cicero-BGQN/func.xml:3193(entry) /tmp/cicero-BGQN/func.xml:3608(entry) /tmp/cicero-BGQN/func.xml:6043(entry) /tmp/cicero-BGQN/func.xml:7469(entry) /tmp/cicero-BGQN/func.xml:7978(entry) /tmp/cicero-BGQN/func.xml:8319(entry) /tmp/cicero-BGQN/func.xml:10088(entry) 
msgid "Operator"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:204(entry) /tmp/cicero-BGQN/func.xml:465(entry) /tmp/cicero-BGQN/func.xml:622(entry) /tmp/cicero-BGQN/func.xml:973(entry) /tmp/cicero-BGQN/func.xml:1110(entry) /tmp/cicero-BGQN/func.xml:1326(entry) /tmp/cicero-BGQN/func.xml:2878(entry) /tmp/cicero-BGQN/func.xml:2993(entry) /tmp/cicero-BGQN/func.xml:3194(entry) /tmp/cicero-BGQN/func.xml:3609(entry) /tmp/cicero-BGQN/func.xml:3971(entry) /tmp/cicero-BGQN/func.xml:4159(entry) /tmp/cicero-BGQN/func.xml:4369(entry) /tmp/cicero-BGQN/func.xml:4497(entry) /tmp/cicero-BGQN/func.xml:4554(entry) /tmp/cicero-BGQN/func.xml:4610(entry) /tmp/cicero-BGQN/func.xml:4691(entry) /tmp/cicero-BGQN/func.xml:5125(entry) /tmp/cicero-BGQN/func.xml:5229(entry) /tmp/cicero-BGQN/func.xml:5452(entry) /tmp/cicero-BGQN/func.xml:5666(entry) /tmp/cicero-BGQN/func.xml:5818(entry) /tmp/cicero-BGQN/func.xml:6174(entry) /tmp/cicero-BGQN/func.xml:7081(entry) /tmp/cicero-BGQN/func.xml:7365(entry) /tmp/cicero-BGQN/func.xml:7470(entry) /tmp/cicero-BGQN/func.xml:7687(entry) /tmp/cicero-BGQN/func.xml:7782(entry) /tmp/cicero-BGQN/func.xml:7979(entry) /tmp/cicero-BGQN/func.xml:8084(entry) /tmp/cicero-BGQN/func.xml:8260(entry) /tmp/cicero-BGQN/func.xml:8320(entry) /tmp/cicero-BGQN/func.xml:8400(entry) /tmp/cicero-BGQN/func.xml:8621(entry) /tmp/cicero-BGQN/func.xml:9635(entry) /tmp/cicero-BGQN/func.xml:10089(entry) /tmp/cicero-BGQN/func.xml:10257(entry) /tmp/cicero-BGQN/func.xml:10467(entry) /tmp/cicero-BGQN/func.xml:10803(entry) /tmp/cicero-BGQN/func.xml:11216(entry) /tmp/cicero-BGQN/func.xml:12129(entry) /tmp/cicero-BGQN/func.xml:12230(entry) /tmp/cicero-BGQN/func.xml:12339(entry) /tmp/cicero-BGQN/func.xml:12664(entry) /tmp/cicero-BGQN/func.xml:13071(entry) /tmp/cicero-BGQN/func.xml:13284(entry) /tmp/cicero-BGQN/func.xml:13577(entry) /tmp/cicero-BGQN/func.xml:13667(entry) /tmp/cicero-BGQN/func.xml:13722(entry) /tmp/cicero-BGQN/func.xml:13783(entry) /tmp/cicero-BGQN/func.xml:13890(entry) /tmp/cicero-BGQN/func.xml:13995(entry) /tmp/cicero-BGQN/func.xml:14177(entry) /tmp/cicero-BGQN/func.xml:14257(entry) /tmp/cicero-BGQN/func.xml:14339(entry) /tmp/cicero-BGQN/func.xml:14517(entry) /tmp/cicero-BGQN/func.xml:14577(entry) /tmp/cicero-BGQN/func.xml:14676(entry) 
msgid "Description"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:210(literal) /tmp/cicero-BGQN/func.xml:7985(literal) /tmp/cicero-BGQN/func.xml:10110(literal) 
msgid "&lt;"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:211(entry) /tmp/cicero-BGQN/func.xml:10111(entry) 
msgid "less than"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:215(literal) /tmp/cicero-BGQN/func.xml:8005(literal) /tmp/cicero-BGQN/func.xml:10117(literal) 
msgid "&gt;"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:216(entry) /tmp/cicero-BGQN/func.xml:10118(entry) 
msgid "greater than"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:220(literal) /tmp/cicero-BGQN/func.xml:7990(literal) /tmp/cicero-BGQN/func.xml:10124(literal) 
msgid "&lt;="
msgstr ""

#: /tmp/cicero-BGQN/func.xml:221(entry) 
msgid "less than or equal to"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:225(literal) /tmp/cicero-BGQN/func.xml:8000(literal) /tmp/cicero-BGQN/func.xml:10131(literal) 
msgid "&gt;="
msgstr ""

#: /tmp/cicero-BGQN/func.xml:226(entry) 
msgid "greater than or equal to"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:230(literal) /tmp/cicero-BGQN/func.xml:7995(literal) /tmp/cicero-BGQN/func.xml:10096(literal) 
msgid "="
msgstr ""

#: /tmp/cicero-BGQN/func.xml:231(entry) /tmp/cicero-BGQN/func.xml:10097(entry) 
msgid "equal"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:235(literal) /tmp/cicero-BGQN/func.xml:8010(literal) /tmp/cicero-BGQN/func.xml:10103(literal) 
msgid "&lt;&gt;"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:235(literal) 
msgid "!="
msgstr ""

#: /tmp/cicero-BGQN/func.xml:235(entry) /tmp/cicero-BGQN/func.xml:5723(entry) /tmp/cicero-BGQN/func.xml:12136(entry) /tmp/cicero-BGQN/func.xml:12146(entry) /tmp/cicero-BGQN/func.xml:12156(entry) 
msgid "<placeholder-1/> or <placeholder-2/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:236(entry) /tmp/cicero-BGQN/func.xml:10104(entry) 
msgid "not equal"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:243(para) 
msgid "The <literal>!=</literal> operator is converted to <literal>&lt;&gt;</literal> in the parser stage. It is not possible to implement <literal>!=</literal> and <literal>&lt;&gt;</literal> operators that do different things."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:251(para) 
msgid "Comparison operators are available for all relevant data types. All comparison operators are binary operators that return values of type <type>boolean</type>; expressions like <literal>1 &lt; 2 &lt; 3</literal> are not valid (because there is no <literal>&lt;</literal> operator to compare a Boolean value with <literal>3</literal>)."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:260(para) 
msgid "<indexterm><primary>BETWEEN</primary></indexterm> In addition to the comparison operators, the special <token>BETWEEN</token> construct is available: <synopsis>\n<replaceable>a</replaceable> BETWEEN <replaceable>x</replaceable> AND <replaceable>y</replaceable>\n</synopsis> is equivalent to <synopsis>\n<replaceable>a</replaceable> &gt;= <replaceable>x</replaceable> AND <replaceable>a</replaceable> &lt;= <replaceable>y</replaceable>\n</synopsis> Notice that <token>BETWEEN</token> treats the endpoint values as included in the range. <literal>NOT BETWEEN</literal> does the opposite comparison: <synopsis>\n<replaceable>a</replaceable> NOT BETWEEN <replaceable>x</replaceable> AND <replaceable>y</replaceable>\n</synopsis> is equivalent to <synopsis>\n<replaceable>a</replaceable> &lt; <replaceable>x</replaceable> OR <replaceable>a</replaceable> &gt; <replaceable>y</replaceable>\n</synopsis><indexterm><primary>BETWEEN SYMMETRIC</primary></indexterm><literal>BETWEEN SYMMETRIC</literal> is the same as <literal>BETWEEN</literal> except there is no requirement that the argument to the left of <literal>AND</literal> be less than or equal to the argument on the right. If it is not, those two arguments are automatically swapped, so that a nonempty range is always implied."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:293(para) 
msgid "<indexterm><primary>IS NULL</primary></indexterm><indexterm><primary>IS NOT NULL</primary></indexterm><indexterm><primary>ISNULL</primary></indexterm><indexterm><primary>NOTNULL</primary></indexterm> To check whether a value is or is not null, use the constructs: <synopsis>\n<replaceable>expression</replaceable> IS NULL\n<replaceable>expression</replaceable> IS NOT NULL\n</synopsis> or the equivalent, but nonstandard, constructs: <synopsis>\n<replaceable>expression</replaceable> ISNULL\n<replaceable>expression</replaceable> NOTNULL\n</synopsis><indexterm><primary>null value</primary><secondary>comparing</secondary></indexterm>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:319(para) 
msgid "Do <emphasis>not</emphasis> write <literal><replaceable>expression</replaceable> = NULL</literal> because <literal>NULL</literal> is not <quote>equal to</quote><literal>NULL</literal>. (The null value represents an unknown value, and it is not known whether two unknown values are equal.) This behavior conforms to the SQL standard."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:329(para) 
msgid "Some applications might expect that <literal><replaceable>expression</replaceable> = NULL</literal> returns true if <replaceable>expression</replaceable> evaluates to the null value. It is highly recommended that these applications be modified to comply with the SQL standard. However, if that cannot be done the <xref linkend=\"guc-transform-null-equals\"/> configuration variable is available. If it is enabled, <productname>PostgreSQL</productname> will convert <literal>x = NULL</literal> clauses to <literal>x IS NULL</literal>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:343(para) 
msgid "If the <replaceable>expression</replaceable> is row-valued, then <literal>IS NULL</literal> is true when the row expression itself is null or when all the row's fields are null, while <literal>IS NOT NULL</literal> is true when the row expression itself is non-null and all the row's fields are non-null. Because of this behavior, <literal>IS NULL</literal> and <literal>IS NOT NULL</literal> do not always return inverse results for row-valued expressions, i.e., a row-valued expression that contains both NULL and non-null values will return false for both tests. This definition conforms to the SQL standard, and is a change from the inconsistent behavior exhibited by <productname>PostgreSQL</productname> versions prior to 8.2."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:359(para) 
msgid "<indexterm><primary>IS DISTINCT FROM</primary></indexterm><indexterm><primary>IS NOT DISTINCT FROM</primary></indexterm> Ordinary comparison operators yield null (signifying <quote>unknown</quote>), not true or false, when either input is null. For example, <literal>7 = NULL</literal> yields null. When this behavior is not suitable, use the <literal>IS <optional> NOT </optional> DISTINCT FROM</literal> constructs: <synopsis>\n<replaceable>expression</replaceable> IS DISTINCT FROM <replaceable>expression</replaceable>\n<replaceable>expression</replaceable> IS NOT DISTINCT FROM <replaceable>expression</replaceable>\n</synopsis> For non-null inputs, <literal>IS DISTINCT FROM</literal> is the same as the <literal>&lt;&gt;</literal> operator. However, if both inputs are null it returns false, and if only one input is null it returns true. Similarly, <literal>IS NOT DISTINCT FROM</literal> is identical to <literal>=</literal> for non-null inputs, but it returns true when both inputs are null, and false when only one input is null. Thus, these constructs effectively act as though null were a normal data value, rather than <quote>unknown</quote>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:385(para) 
msgid "<indexterm><primary>IS TRUE</primary></indexterm><indexterm><primary>IS NOT TRUE</primary></indexterm><indexterm><primary>IS FALSE</primary></indexterm><indexterm><primary>IS NOT FALSE</primary></indexterm><indexterm><primary>IS UNKNOWN</primary></indexterm><indexterm><primary>IS NOT UNKNOWN</primary></indexterm> Boolean values can also be tested using the constructs <synopsis>\n<replaceable>expression</replaceable> IS TRUE\n<replaceable>expression</replaceable> IS NOT TRUE\n<replaceable>expression</replaceable> IS FALSE\n<replaceable>expression</replaceable> IS NOT FALSE\n<replaceable>expression</replaceable> IS UNKNOWN\n<replaceable>expression</replaceable> IS NOT UNKNOWN\n</synopsis> These will always return true or false, never a null value, even when the operand is null. A null input is treated as the logical value <quote>unknown</quote>. Notice that <literal>IS UNKNOWN</literal> and <literal>IS NOT UNKNOWN</literal> are effectively the same as <literal>IS NULL</literal> and <literal>IS NOT NULL</literal>, respectively, except that the input expression must be of Boolean type."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:444(title) 
msgid "Mathematical Functions and Operators"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:446(para) 
msgid "Mathematical operators are provided for many <productname>PostgreSQL</productname> types. For types without standard mathematical conventions (e.g., date/time types) we describe the actual behavior in subsequent sections."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:454(para) 
msgid "<xref linkend=\"functions-math-op-table\"/> shows the available mathematical operators."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:459(title) 
msgid "Mathematical Operators"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:466(entry) /tmp/cicero-BGQN/func.xml:623(entry) /tmp/cicero-BGQN/func.xml:1111(entry) /tmp/cicero-BGQN/func.xml:1327(entry) /tmp/cicero-BGQN/func.xml:2879(entry) /tmp/cicero-BGQN/func.xml:2994(entry) /tmp/cicero-BGQN/func.xml:3195(entry) /tmp/cicero-BGQN/func.xml:3610(entry) /tmp/cicero-BGQN/func.xml:5126(entry) /tmp/cicero-BGQN/func.xml:5453(entry) /tmp/cicero-BGQN/func.xml:5819(entry) /tmp/cicero-BGQN/func.xml:6044(entry) /tmp/cicero-BGQN/func.xml:6175(entry) /tmp/cicero-BGQN/func.xml:7366(entry) /tmp/cicero-BGQN/func.xml:7471(entry) /tmp/cicero-BGQN/func.xml:7688(entry) /tmp/cicero-BGQN/func.xml:7783(entry) /tmp/cicero-BGQN/func.xml:7980(entry) /tmp/cicero-BGQN/func.xml:8085(entry) /tmp/cicero-BGQN/func.xml:8261(entry) /tmp/cicero-BGQN/func.xml:8321(entry) /tmp/cicero-BGQN/func.xml:8401(entry) /tmp/cicero-BGQN/func.xml:8622(entry) /tmp/cicero-BGQN/func.xml:10090(entry) /tmp/cicero-BGQN/func.xml:10258(entry) 
msgid "Example"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:467(entry) /tmp/cicero-BGQN/func.xml:624(entry) /tmp/cicero-BGQN/func.xml:1112(entry) /tmp/cicero-BGQN/func.xml:1328(entry) /tmp/cicero-BGQN/func.xml:2880(entry) /tmp/cicero-BGQN/func.xml:2995(entry) /tmp/cicero-BGQN/func.xml:3196(entry) /tmp/cicero-BGQN/func.xml:5853(entry) /tmp/cicero-BGQN/func.xml:6045(entry) /tmp/cicero-BGQN/func.xml:6176(entry) /tmp/cicero-BGQN/func.xml:8086(entry) /tmp/cicero-BGQN/func.xml:8262(entry) /tmp/cicero-BGQN/func.xml:8322(entry) /tmp/cicero-BGQN/func.xml:8402(entry) /tmp/cicero-BGQN/func.xml:8623(entry) /tmp/cicero-BGQN/func.xml:10091(entry) /tmp/cicero-BGQN/func.xml:10259(entry) 
msgid "Result"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:473(literal) /tmp/cicero-BGQN/func.xml:4066(literal) /tmp/cicero-BGQN/func.xml:4100(literal) /tmp/cicero-BGQN/func.xml:6051(literal) /tmp/cicero-BGQN/func.xml:6057(literal) /tmp/cicero-BGQN/func.xml:6063(literal) /tmp/cicero-BGQN/func.xml:6069(literal) /tmp/cicero-BGQN/func.xml:6075(literal) /tmp/cicero-BGQN/func.xml:6081(literal) /tmp/cicero-BGQN/func.xml:7476(literal) /tmp/cicero-BGQN/func.xml:8050(literal) 
msgid "+"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:474(entry) /tmp/cicero-BGQN/func.xml:8051(entry) 
msgid "addition"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:475(literal) 
msgid "2 + 3"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:476(literal) /tmp/cicero-BGQN/func.xml:518(literal) /tmp/cicero-BGQN/func.xml:546(literal) /tmp/cicero-BGQN/func.xml:2910(literal) /tmp/cicero-BGQN/func.xml:3103(literal) /tmp/cicero-BGQN/func.xml:6659(computeroutput) /tmp/cicero-BGQN/func.xml:8440(literal) 
msgid "5"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:480(literal) /tmp/cicero-BGQN/func.xml:6087(literal) /tmp/cicero-BGQN/func.xml:6093(literal) /tmp/cicero-BGQN/func.xml:6099(literal) /tmp/cicero-BGQN/func.xml:6105(literal) /tmp/cicero-BGQN/func.xml:6111(literal) /tmp/cicero-BGQN/func.xml:6117(literal) /tmp/cicero-BGQN/func.xml:6123(literal) /tmp/cicero-BGQN/func.xml:6129(literal) /tmp/cicero-BGQN/func.xml:6135(literal) /tmp/cicero-BGQN/func.xml:7481(literal) /tmp/cicero-BGQN/func.xml:8055(literal) /tmp/cicero-BGQN/func.xml:8060(literal) 
msgid "-"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:481(entry) /tmp/cicero-BGQN/func.xml:8056(entry) /tmp/cicero-BGQN/func.xml:8061(entry) 
msgid "subtraction"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:482(literal) 
msgid "2 - 3"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:483(literal) /tmp/cicero-BGQN/func.xml:890(literal) 
msgid "-1"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:487(literal) /tmp/cicero-BGQN/func.xml:4061(literal) /tmp/cicero-BGQN/func.xml:4095(literal) /tmp/cicero-BGQN/func.xml:6141(literal) /tmp/cicero-BGQN/func.xml:6147(literal) /tmp/cicero-BGQN/func.xml:6153(literal) /tmp/cicero-BGQN/func.xml:7486(literal) 
msgid "*"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:488(entry) 
msgid "multiplication"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:489(literal) 
msgid "2 * 3"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:490(literal) /tmp/cicero-BGQN/func.xml:8130(literal) /tmp/cicero-BGQN/func.xml:8132(literal) 
msgid "6"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:494(literal) /tmp/cicero-BGQN/func.xml:6159(literal) /tmp/cicero-BGQN/func.xml:7491(literal) 
msgid "/"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:495(entry) 
msgid "division (integer division truncates the result)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:496(literal) 
msgid "4 / 2"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:497(literal) /tmp/cicero-BGQN/func.xml:588(literal) /tmp/cicero-BGQN/func.xml:705(literal) /tmp/cicero-BGQN/func.xml:757(literal) /tmp/cicero-BGQN/func.xml:1958(literal) /tmp/cicero-BGQN/func.xml:6853(computeroutput) /tmp/cicero-BGQN/func.xml:10294(literal) 
msgid "2"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:501(literal) /tmp/cicero-BGQN/func.xml:1531(literal) 
msgid "%"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:502(entry) 
msgid "modulo (remainder)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:503(literal) 
msgid "5 % 4"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:504(literal) /tmp/cicero-BGQN/func.xml:780(literal) /tmp/cicero-BGQN/func.xml:3064(literal) /tmp/cicero-BGQN/func.xml:5387(literal) /tmp/cicero-BGQN/func.xml:5391(literal) /tmp/cicero-BGQN/func.xml:6859(computeroutput) /tmp/cicero-BGQN/func.xml:6873(computeroutput) 
msgid "1"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:508(literal) /tmp/cicero-BGQN/func.xml:4165(literal) /tmp/cicero-BGQN/func.xml:4563(literal) 
msgid "^"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:509(entry) 
msgid "exponentiation"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:510(literal) 
msgid "2.0 ^ 3.0"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:511(literal) 
msgid "8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:515(literal) 
msgid "|/"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:516(entry) /tmp/cicero-BGQN/func.xml:901(entry) 
msgid "square root"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:517(literal) 
msgid "|/ 25.0"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:522(literal) 
msgid "||/"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:523(entry) /tmp/cicero-BGQN/func.xml:650(entry) 
msgid "cube root"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:524(literal) 
msgid "||/ 27.0"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:525(literal) /tmp/cicero-BGQN/func.xml:652(literal) /tmp/cicero-BGQN/func.xml:939(literal) /tmp/cicero-BGQN/func.xml:949(literal) /tmp/cicero-BGQN/func.xml:1236(literal) /tmp/cicero-BGQN/func.xml:2938(literal) /tmp/cicero-BGQN/func.xml:6285(literal) /tmp/cicero-BGQN/func.xml:6324(literal) /tmp/cicero-BGQN/func.xml:6797(computeroutput) /tmp/cicero-BGQN/func.xml:6856(computeroutput) /tmp/cicero-BGQN/func.xml:8428(literal) /tmp/cicero-BGQN/func.xml:10329(literal) 
msgid "3"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:529(literal) 
msgid "!"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:530(entry) 
msgid "factorial"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:531(literal) 
msgid "5 !"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:532(literal) /tmp/cicero-BGQN/func.xml:539(literal) /tmp/cicero-BGQN/func.xml:1348(literal) 
msgid "120"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:536(literal) /tmp/cicero-BGQN/func.xml:8357(literal) 
msgid "!!"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:537(entry) 
msgid "factorial (prefix operator)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:538(literal) 
msgid "!! 5"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:543(literal) 
msgid "@"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:544(entry) /tmp/cicero-BGQN/func.xml:637(entry) 
msgid "absolute value"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:545(literal) 
msgid "@ -5.0"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:550(literal) /tmp/cicero-BGQN/func.xml:3209(literal) /tmp/cicero-BGQN/func.xml:8040(literal) 
msgid "&amp;"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:551(entry) /tmp/cicero-BGQN/func.xml:3210(entry) /tmp/cicero-BGQN/func.xml:8041(entry) 
msgid "bitwise AND"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:552(literal) 
msgid "91 &amp; 15"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:553(literal) 
msgid "11"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:557(literal) /tmp/cicero-BGQN/func.xml:3216(literal) /tmp/cicero-BGQN/func.xml:8045(literal) 
msgid "|"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:558(entry) /tmp/cicero-BGQN/func.xml:3217(entry) /tmp/cicero-BGQN/func.xml:8046(entry) 
msgid "bitwise OR"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:559(literal) 
msgid "32 | 3"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:560(literal) 
msgid "35"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:564(literal) /tmp/cicero-BGQN/func.xml:3223(literal) /tmp/cicero-BGQN/func.xml:7496(literal) /tmp/cicero-BGQN/func.xml:7501(literal) 
msgid "#"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:565(entry) /tmp/cicero-BGQN/func.xml:3224(entry) 
msgid "bitwise XOR"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:566(literal) 
msgid "17 # 5"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:567(literal) /tmp/cicero-BGQN/func.xml:6275(literal) /tmp/cicero-BGQN/func.xml:6314(literal) /tmp/cicero-BGQN/func.xml:6591(computeroutput) /tmp/cicero-BGQN/func.xml:6725(computeroutput) 
msgid "20"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:571(literal) /tmp/cicero-BGQN/func.xml:3230(literal) /tmp/cicero-BGQN/func.xml:3616(literal) /tmp/cicero-BGQN/func.xml:8035(literal) 
msgid "~"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:572(entry) /tmp/cicero-BGQN/func.xml:3231(entry) /tmp/cicero-BGQN/func.xml:8036(entry) 
msgid "bitwise NOT"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:573(literal) 
msgid "~1"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:574(literal) 
msgid "-2"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:578(literal) /tmp/cicero-BGQN/func.xml:3237(literal) /tmp/cicero-BGQN/func.xml:7531(literal) /tmp/cicero-BGQN/func.xml:8015(literal) 
msgid "&lt;&lt;"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:579(entry) /tmp/cicero-BGQN/func.xml:3238(entry) 
msgid "bitwise shift left"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:580(literal) 
msgid "1 &lt;&lt; 4"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:581(literal) /tmp/cicero-BGQN/func.xml:6624(computeroutput) /tmp/cicero-BGQN/func.xml:6988(computeroutput) 
msgid "16"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:585(literal) /tmp/cicero-BGQN/func.xml:3244(literal) /tmp/cicero-BGQN/func.xml:7536(literal) /tmp/cicero-BGQN/func.xml:8025(literal) 
msgid "&gt;&gt;"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:586(entry) /tmp/cicero-BGQN/func.xml:3245(entry) 
msgid "bitwise shift right"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:587(literal) 
msgid "8 &gt;&gt; 2"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:595(para) 
msgid "The bitwise operators work only on integral data types, whereas the others are available for all numeric data types. The bitwise operators are also available for the bit string types <type>bit</type> and <type>bit varying</type>, as shown in <xref linkend=\"functions-bit-string-op-table\"/>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:603(para) 
msgid "<xref linkend=\"functions-math-func-table\"/> shows the available mathematical functions. In the table, <literal>dp</literal> indicates <type>double precision</type>. Many of these functions are provided in multiple forms with different argument types. Except where noted, any given form of a function returns the same data type as its argument. The functions working with <type>double precision</type> data are mostly implemented on top of the host system's C library; accuracy and behavior in boundary cases can therefore vary depending on the host system."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:616(title) 
msgid "Mathematical Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:620(entry) /tmp/cicero-BGQN/func.xml:972(entry) /tmp/cicero-BGQN/func.xml:1108(entry) /tmp/cicero-BGQN/func.xml:1324(entry) /tmp/cicero-BGQN/func.xml:2876(entry) /tmp/cicero-BGQN/func.xml:2991(entry) /tmp/cicero-BGQN/func.xml:5123(entry) /tmp/cicero-BGQN/func.xml:6172(entry) /tmp/cicero-BGQN/func.xml:7364(entry) /tmp/cicero-BGQN/func.xml:7685(entry) /tmp/cicero-BGQN/func.xml:7780(entry) /tmp/cicero-BGQN/func.xml:8082(entry) /tmp/cicero-BGQN/func.xml:8258(entry) /tmp/cicero-BGQN/func.xml:8398(entry) /tmp/cicero-BGQN/func.xml:8619(entry) /tmp/cicero-BGQN/func.xml:9635(entry) /tmp/cicero-BGQN/func.xml:10255(entry) /tmp/cicero-BGQN/func.xml:10464(entry) /tmp/cicero-BGQN/func.xml:10800(entry) /tmp/cicero-BGQN/func.xml:11214(entry) /tmp/cicero-BGQN/func.xml:12126(entry) /tmp/cicero-BGQN/func.xml:12228(entry) 
msgid "Function"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:621(entry) /tmp/cicero-BGQN/func.xml:1109(entry) /tmp/cicero-BGQN/func.xml:1325(entry) /tmp/cicero-BGQN/func.xml:2877(entry) /tmp/cicero-BGQN/func.xml:2992(entry) /tmp/cicero-BGQN/func.xml:5124(entry) /tmp/cicero-BGQN/func.xml:6173(entry) /tmp/cicero-BGQN/func.xml:7080(entry) /tmp/cicero-BGQN/func.xml:7686(entry) /tmp/cicero-BGQN/func.xml:7781(entry) /tmp/cicero-BGQN/func.xml:8083(entry) /tmp/cicero-BGQN/func.xml:8259(entry) /tmp/cicero-BGQN/func.xml:8399(entry) /tmp/cicero-BGQN/func.xml:8620(entry) /tmp/cicero-BGQN/func.xml:9635(entry) /tmp/cicero-BGQN/func.xml:10256(entry) /tmp/cicero-BGQN/func.xml:10466(entry) /tmp/cicero-BGQN/func.xml:10802(entry) /tmp/cicero-BGQN/func.xml:11215(entry) /tmp/cicero-BGQN/func.xml:12128(entry) /tmp/cicero-BGQN/func.xml:12229(entry) /tmp/cicero-BGQN/func.xml:12339(entry) /tmp/cicero-BGQN/func.xml:12664(entry) /tmp/cicero-BGQN/func.xml:13071(entry) /tmp/cicero-BGQN/func.xml:13284(entry) /tmp/cicero-BGQN/func.xml:13577(entry) /tmp/cicero-BGQN/func.xml:13667(entry) /tmp/cicero-BGQN/func.xml:13783(entry) /tmp/cicero-BGQN/func.xml:13890(entry) /tmp/cicero-BGQN/func.xml:13995(entry) /tmp/cicero-BGQN/func.xml:14177(entry) /tmp/cicero-BGQN/func.xml:14257(entry) /tmp/cicero-BGQN/func.xml:14339(entry) /tmp/cicero-BGQN/func.xml:14517(entry) /tmp/cicero-BGQN/func.xml:14577(entry) /tmp/cicero-BGQN/func.xml:14676(entry) 
msgid "Return Type"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:632(primary) 
msgid "abs"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:634(replaceable) /tmp/cicero-BGQN/func.xml:700(parameter) /tmp/cicero-BGQN/func.xml:703(parameter) /tmp/cicero-BGQN/func.xml:762(parameter) /tmp/cicero-BGQN/func.xml:775(parameter) /tmp/cicero-BGQN/func.xml:778(parameter) /tmp/cicero-BGQN/func.xml:982(replaceable) /tmp/cicero-BGQN/func.xml:992(replaceable) /tmp/cicero-BGQN/func.xml:1002(replaceable) /tmp/cicero-BGQN/func.xml:1013(replaceable) /tmp/cicero-BGQN/func.xml:1016(replaceable) /tmp/cicero-BGQN/func.xml:1024(replaceable) /tmp/cicero-BGQN/func.xml:1034(replaceable) /tmp/cicero-BGQN/func.xml:1044(replaceable) /tmp/cicero-BGQN/func.xml:1054(replaceable) /tmp/cicero-BGQN/func.xml:4026(replaceable) /tmp/cicero-BGQN/func.xml:4027(replaceable) /tmp/cicero-BGQN/func.xml:4757(literal) 
msgid "x"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:634(function) 
msgid "abs(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:636(entry) /tmp/cicero-BGQN/func.xml:662(entry) /tmp/cicero-BGQN/func.xml:675(entry) /tmp/cicero-BGQN/func.xml:715(entry) /tmp/cicero-BGQN/func.xml:728(entry) /tmp/cicero-BGQN/func.xml:741(entry) /tmp/cicero-BGQN/func.xml:754(entry) /tmp/cicero-BGQN/func.xml:852(entry) /tmp/cicero-BGQN/func.xml:887(entry) /tmp/cicero-BGQN/func.xml:900(entry) /tmp/cicero-BGQN/func.xml:913(entry) 
msgid "(same as input)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:638(literal) 
msgid "abs(-17.4)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:639(literal) 
msgid "17.4"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:645(primary) 
msgid "cbrt"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:647(type) /tmp/cicero-BGQN/func.xml:649(type) /tmp/cicero-BGQN/func.xml:660(type) /tmp/cicero-BGQN/func.xml:673(type) /tmp/cicero-BGQN/func.xml:686(type) /tmp/cicero-BGQN/func.xml:688(type) /tmp/cicero-BGQN/func.xml:713(type) /tmp/cicero-BGQN/func.xml:726(type) /tmp/cicero-BGQN/func.xml:739(type) /tmp/cicero-BGQN/func.xml:752(type) /tmp/cicero-BGQN/func.xml:790(type) /tmp/cicero-BGQN/func.xml:801(type) /tmp/cicero-BGQN/func.xml:802(type) /tmp/cicero-BGQN/func.xml:804(type) /tmp/cicero-BGQN/func.xml:824(type) /tmp/cicero-BGQN/func.xml:826(type) /tmp/cicero-BGQN/func.xml:839(type) /tmp/cicero-BGQN/func.xml:850(type) /tmp/cicero-BGQN/func.xml:871(type) /tmp/cicero-BGQN/func.xml:885(type) /tmp/cicero-BGQN/func.xml:898(type) /tmp/cicero-BGQN/func.xml:911(type) /tmp/cicero-BGQN/func.xml:943(type) /tmp/cicero-BGQN/func.xml:943(type) /tmp/cicero-BGQN/func.xml:943(type) 
msgid "dp"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:647(function) 
msgid "cbrt(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:651(literal) 
msgid "cbrt(27.0)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:658(primary) /tmp/cicero-BGQN/func.xml:676(function) 
msgid "ceil"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:660(type) /tmp/cicero-BGQN/func.xml:673(type) /tmp/cicero-BGQN/func.xml:699(type) /tmp/cicero-BGQN/func.xml:700(type) /tmp/cicero-BGQN/func.xml:702(type) /tmp/cicero-BGQN/func.xml:713(type) /tmp/cicero-BGQN/func.xml:726(type) /tmp/cicero-BGQN/func.xml:739(type) /tmp/cicero-BGQN/func.xml:752(type) /tmp/cicero-BGQN/func.xml:761(type) /tmp/cicero-BGQN/func.xml:762(type) /tmp/cicero-BGQN/func.xml:763(type) /tmp/cicero-BGQN/func.xml:811(type) /tmp/cicero-BGQN/func.xml:812(type) /tmp/cicero-BGQN/func.xml:813(type) /tmp/cicero-BGQN/func.xml:850(type) /tmp/cicero-BGQN/func.xml:859(type) /tmp/cicero-BGQN/func.xml:860(type) /tmp/cicero-BGQN/func.xml:885(type) /tmp/cicero-BGQN/func.xml:898(type) /tmp/cicero-BGQN/func.xml:911(type) /tmp/cicero-BGQN/func.xml:920(type) /tmp/cicero-BGQN/func.xml:921(type) /tmp/cicero-BGQN/func.xml:932(type) /tmp/cicero-BGQN/func.xml:932(type) /tmp/cicero-BGQN/func.xml:932(type) /tmp/cicero-BGQN/func.xml:5161(type) /tmp/cicero-BGQN/func.xml:5184(type) /tmp/cicero-BGQN/func.xml:10501(type) /tmp/cicero-BGQN/func.xml:10504(type) /tmp/cicero-BGQN/func.xml:10676(type) /tmp/cicero-BGQN/func.xml:10681(type) /tmp/cicero-BGQN/func.xml:11053(type) /tmp/cicero-BGQN/func.xml:11057(type) /tmp/cicero-BGQN/func.xml:11076(type) /tmp/cicero-BGQN/func.xml:11080(type) /tmp/cicero-BGQN/func.xml:11099(type) /tmp/cicero-BGQN/func.xml:11103(type) /tmp/cicero-BGQN/func.xml:11118(type) /tmp/cicero-BGQN/func.xml:11122(type) /tmp/cicero-BGQN/func.xml:11141(type) /tmp/cicero-BGQN/func.xml:11145(type) /tmp/cicero-BGQN/func.xml:11164(type) /tmp/cicero-BGQN/func.xml:11168(type) 
msgid "numeric"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:660(function) 
msgid "ceil(<placeholder-1/> or <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:663(entry) 
msgid "smallest integer not less than argument"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:664(literal) 
msgid "ceil(-42.8)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:665(literal) 
msgid "-42"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:671(primary) 
msgid "ceiling"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:673(function) 
msgid "ceiling(<placeholder-1/> or <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:676(entry) 
msgid "smallest integer not less than argument (alias for <placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:677(literal) 
msgid "ceiling(-95.3)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:678(literal) 
msgid "-95"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:684(primary) 
msgid "degrees"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:686(function) 
msgid "degrees(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:689(entry) 
msgid "radians to degrees"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:690(literal) 
msgid "degrees(0.5)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:691(literal) 
msgid "28.6478897565412"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:697(primary) 
msgid "div"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:699(parameter) /tmp/cicero-BGQN/func.xml:703(parameter) /tmp/cicero-BGQN/func.xml:774(parameter) /tmp/cicero-BGQN/func.xml:778(parameter) /tmp/cicero-BGQN/func.xml:1012(replaceable) /tmp/cicero-BGQN/func.xml:1016(replaceable) 
msgid "y"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:699(function) 
msgid "div(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:703(entry) 
msgid "integer quotient of <placeholder-1/>/<placeholder-2/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:704(literal) 
msgid "div(9,4)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:711(primary) 
msgid "exp"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:713(function) 
msgid "exp(<placeholder-1/> or <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:716(entry) 
msgid "exponential"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:717(literal) 
msgid "exp(1.0)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:718(literal) 
msgid "2.71828182845905"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:724(primary) 
msgid "floor"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:726(function) 
msgid "floor(<placeholder-1/> or <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:729(entry) 
msgid "largest integer not greater than argument"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:730(literal) 
msgid "floor(-42.8)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:731(literal) 
msgid "-43"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:737(primary) 
msgid "ln"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:739(function) 
msgid "ln(<placeholder-1/> or <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:742(entry) 
msgid "natural logarithm"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:743(literal) 
msgid "ln(2.0)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:744(literal) 
msgid "0.693147180559945"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:750(primary) 
msgid "log"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:752(function) 
msgid "log(<placeholder-1/> or <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:755(entry) 
msgid "base 10 logarithm"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:756(literal) 
msgid "log(100.0)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:761(parameter) /tmp/cicero-BGQN/func.xml:764(parameter) /tmp/cicero-BGQN/func.xml:802(parameter) /tmp/cicero-BGQN/func.xml:805(parameter) /tmp/cicero-BGQN/func.xml:812(parameter) /tmp/cicero-BGQN/func.xml:814(parameter) /tmp/cicero-BGQN/func.xml:4697(literal) 
msgid "b"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:761(function) 
msgid "log(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:764(entry) 
msgid "logarithm to base <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:765(literal) 
msgid "log(2.0, 64.0)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:766(literal) 
msgid "6.0000000000"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:772(primary) 
msgid "mod"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:774(function) 
msgid "mod(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:777(entry) 
msgid "(same as argument types)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:778(entry) 
msgid "remainder of <placeholder-1/>/<placeholder-2/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:779(literal) 
msgid "mod(9,4)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:786(primary) 
msgid "pi"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:788(function) /tmp/cicero-BGQN/func.xml:792(literal) 
msgid "pi()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:791(quote) 
msgid "π"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:791(entry) 
msgid "<placeholder-1/> constant"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:793(literal) 
msgid "3.14159265358979"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:799(primary) 
msgid "power"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:801(parameter) /tmp/cicero-BGQN/func.xml:805(parameter) /tmp/cicero-BGQN/func.xml:811(parameter) /tmp/cicero-BGQN/func.xml:814(parameter) 
msgid "a"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:801(function) /tmp/cicero-BGQN/func.xml:811(function) 
msgid "power(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:805(entry) /tmp/cicero-BGQN/func.xml:814(entry) 
msgid "<placeholder-1/> raised to the power of <placeholder-2/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:806(literal) /tmp/cicero-BGQN/func.xml:815(literal) 
msgid "power(9.0, 3.0)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:807(literal) /tmp/cicero-BGQN/func.xml:816(literal) 
msgid "729"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:822(primary) 
msgid "radians"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:824(function) 
msgid "radians(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:827(entry) 
msgid "degrees to radians"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:828(literal) 
msgid "radians(45.0)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:829(literal) 
msgid "0.785398163397448"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:835(primary) 
msgid "random"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:837(function) /tmp/cicero-BGQN/func.xml:841(literal) /tmp/cicero-BGQN/func.xml:874(literal) 
msgid "random()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:840(entry) 
msgid "random value in the range 0.0 &lt;= x &lt; 1.0"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:848(primary) 
msgid "round"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:850(function) 
msgid "round(<placeholder-1/> or <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:853(entry) 
msgid "round to nearest integer"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:854(literal) 
msgid "round(42.4)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:855(literal) /tmp/cicero-BGQN/func.xml:916(literal) 
msgid "42"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:859(parameter) /tmp/cicero-BGQN/func.xml:920(parameter) 
msgid "v"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:859(parameter) /tmp/cicero-BGQN/func.xml:861(parameter) /tmp/cicero-BGQN/func.xml:920(parameter) /tmp/cicero-BGQN/func.xml:922(parameter) /tmp/cicero-BGQN/func.xml:4741(literal) 
msgid "s"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:859(type) /tmp/cicero-BGQN/func.xml:920(type) /tmp/cicero-BGQN/func.xml:932(type) /tmp/cicero-BGQN/func.xml:934(type) /tmp/cicero-BGQN/func.xml:943(type) /tmp/cicero-BGQN/func.xml:944(type) /tmp/cicero-BGQN/func.xml:1155(type) /tmp/cicero-BGQN/func.xml:1168(type) /tmp/cicero-BGQN/func.xml:1205(type) /tmp/cicero-BGQN/func.xml:1216(type) /tmp/cicero-BGQN/func.xml:1216(type) /tmp/cicero-BGQN/func.xml:1233(type) /tmp/cicero-BGQN/func.xml:1244(type) /tmp/cicero-BGQN/func.xml:1244(type) /tmp/cicero-BGQN/func.xml:1340(type) /tmp/cicero-BGQN/func.xml:1374(type) /tmp/cicero-BGQN/func.xml:1564(type) /tmp/cicero-BGQN/func.xml:1582(type) /tmp/cicero-BGQN/func.xml:1593(type) /tmp/cicero-BGQN/func.xml:1609(type) /tmp/cicero-BGQN/func.xml:1829(type) /tmp/cicero-BGQN/func.xml:1876(type) /tmp/cicero-BGQN/func.xml:1893(type) /tmp/cicero-BGQN/func.xml:1933(type) /tmp/cicero-BGQN/func.xml:1950(type) /tmp/cicero-BGQN/func.xml:2000(type) /tmp/cicero-BGQN/func.xml:2907(type) /tmp/cicero-BGQN/func.xml:2918(type) /tmp/cicero-BGQN/func.xml:2918(type) /tmp/cicero-BGQN/func.xml:2935(type) /tmp/cicero-BGQN/func.xml:2946(type) /tmp/cicero-BGQN/func.xml:2946(type) /tmp/cicero-BGQN/func.xml:3059(type) /tmp/cicero-BGQN/func.xml:3074(type) /tmp/cicero-BGQN/func.xml:3089(type) /tmp/cicero-BGQN/func.xml:5148(type) /tmp/cicero-BGQN/func.xml:7736(type) /tmp/cicero-BGQN/func.xml:7742(type) /tmp/cicero-BGQN/func.xml:8128(type) /tmp/cicero-BGQN/func.xml:8165(type) /tmp/cicero-BGQN/func.xml:8199(type) /tmp/cicero-BGQN/func.xml:8207(type) /tmp/cicero-BGQN/func.xml:10291(type) /tmp/cicero-BGQN/func.xml:10323(type) /tmp/cicero-BGQN/func.xml:10326(type) /tmp/cicero-BGQN/func.xml:10334(type) /tmp/cicero-BGQN/func.xml:10337(type) /tmp/cicero-BGQN/func.xml:10368(type) /tmp/cicero-BGQN/func.xml:10371(type) /tmp/cicero-BGQN/func.xml:10499(type) /tmp/cicero-BGQN/func.xml:10519(type) /tmp/cicero-BGQN/func.xml:10536(type) /tmp/cicero-BGQN/func.xml:10674(type) /tmp/cicero-BGQN/func.xml:10681(type) /tmp/cicero-BGQN/func.xml:11051(type) /tmp/cicero-BGQN/func.xml:11074(type) /tmp/cicero-BGQN/func.xml:11097(type) /tmp/cicero-BGQN/func.xml:11116(type) /tmp/cicero-BGQN/func.xml:11139(type) /tmp/cicero-BGQN/func.xml:11162(type) /tmp/cicero-BGQN/func.xml:12136(type) /tmp/cicero-BGQN/func.xml:12146(type) /tmp/cicero-BGQN/func.xml:12388(type) /tmp/cicero-BGQN/func.xml:12400(type) /tmp/cicero-BGQN/func.xml:12407(type) /tmp/cicero-BGQN/func.xml:13897(type) /tmp/cicero-BGQN/func.xml:13918(type) /tmp/cicero-BGQN/func.xml:14346(type) /tmp/cicero-BGQN/func.xml:14690(type) /tmp/cicero-BGQN/func.xml:14690(type) /tmp/cicero-BGQN/func.xml:14704(type) /tmp/cicero-BGQN/func.xml:14704(type) /tmp/cicero-BGQN/func.xml:14718(type) /tmp/cicero-BGQN/func.xml:14718(type) /tmp/cicero-BGQN/func.xml:14739(type) /tmp/cicero-BGQN/func.xml:14739(type) /tmp/cicero-BGQN/func.xml:14753(type) /tmp/cicero-BGQN/func.xml:14753(type) /tmp/cicero-BGQN/func.xml:14767(type) /tmp/cicero-BGQN/func.xml:14767(type) /tmp/cicero-BGQN/func.xml:14781(type) /tmp/cicero-BGQN/func.xml:14781(type) /tmp/cicero-BGQN/func.xml:14795(type) /tmp/cicero-BGQN/func.xml:14795(type) /tmp/cicero-BGQN/func.xml:14809(type) /tmp/cicero-BGQN/func.xml:14809(type) /tmp/cicero-BGQN/func.xml:14823(type) /tmp/cicero-BGQN/func.xml:14823(type) 
msgid "int"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:859(function) 
msgid "round(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:861(entry) 
msgid "round to <placeholder-1/> decimal places"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:862(literal) 
msgid "round(42.4382, 2)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:863(literal) 
msgid "42.44"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:869(primary) 
msgid "setseed"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:871(function) 
msgid "setseed(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:873(type) /tmp/cicero-BGQN/func.xml:14274(type) /tmp/cicero-BGQN/func.xml:14282(type) /tmp/cicero-BGQN/func.xml:14685(type) /tmp/cicero-BGQN/func.xml:14692(type) /tmp/cicero-BGQN/func.xml:14699(type) /tmp/cicero-BGQN/func.xml:14706(type) /tmp/cicero-BGQN/func.xml:14727(type) /tmp/cicero-BGQN/func.xml:14748(type) /tmp/cicero-BGQN/func.xml:14755(type) /tmp/cicero-BGQN/func.xml:14762(type) /tmp/cicero-BGQN/func.xml:14769(type) 
msgid "void"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:874(entry) 
msgid "set seed for subsequent <placeholder-1/> calls (value between -1.0 and 1.0, inclusive)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:876(literal) 
msgid "setseed(0.54823)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:883(primary) 
msgid "sign"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:885(function) 
msgid "sign(<placeholder-1/> or <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:888(entry) 
msgid "sign of the argument (-1, 0, +1)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:889(literal) 
msgid "sign(-8.4)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:896(primary) 
msgid "sqrt"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:898(function) 
msgid "sqrt(<placeholder-1/> or <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:902(literal) 
msgid "sqrt(2.0)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:903(literal) 
msgid "1.4142135623731"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:909(primary) /tmp/cicero-BGQN/func.xml:8269(primary) 
msgid "trunc"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:911(function) 
msgid "trunc(<placeholder-1/> or <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:914(entry) 
msgid "truncate toward zero"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:915(literal) 
msgid "trunc(42.8)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:920(function) 
msgid "trunc(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:922(entry) 
msgid "truncate to <placeholder-1/> decimal places"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:923(literal) 
msgid "trunc(42.4382, 2)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:924(literal) 
msgid "42.43"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:930(primary) 
msgid "width_bucket"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:932(parameter) /tmp/cicero-BGQN/func.xml:943(parameter) 
msgid "op"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:932(parameter) /tmp/cicero-BGQN/func.xml:937(parameter) /tmp/cicero-BGQN/func.xml:943(parameter) /tmp/cicero-BGQN/func.xml:947(parameter) 
msgid "b1"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:932(parameter) /tmp/cicero-BGQN/func.xml:937(parameter) /tmp/cicero-BGQN/func.xml:943(parameter) /tmp/cicero-BGQN/func.xml:947(parameter) 
msgid "b2"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:932(parameter) /tmp/cicero-BGQN/func.xml:936(parameter) /tmp/cicero-BGQN/func.xml:943(parameter) /tmp/cicero-BGQN/func.xml:946(parameter) /tmp/cicero-BGQN/func.xml:1966(parameter) /tmp/cicero-BGQN/func.xml:1971(parameter) /tmp/cicero-BGQN/func.xml:10580(primary) 
msgid "count"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:932(function) /tmp/cicero-BGQN/func.xml:943(function) 
msgid "width_bucket(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/>, <placeholder-5/><placeholder-6/>, <placeholder-7/><placeholder-8/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:935(parameter) /tmp/cicero-BGQN/func.xml:945(parameter) 
msgid "operand"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:935(entry) /tmp/cicero-BGQN/func.xml:945(entry) 
msgid "return the bucket to which <placeholder-1/> would be assigned in an equidepth histogram with <placeholder-2/> buckets, in the range <placeholder-3/> to <placeholder-4/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:938(literal) /tmp/cicero-BGQN/func.xml:948(literal) 
msgid "width_bucket(5.35, 0.024, 10.06, 5)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:955(para) 
msgid "Finally, <xref linkend=\"functions-math-trig-table\"/> shows the available trigonometric functions. All trigonometric functions take arguments and return values of type <type>double precision</type>. Trigonometric functions arguments are expressed in radians. Inverse functions return values are expressed in radians. See unit transformation functions <literal><function>radians()</function></literal> and <literal><function>degrees()</function></literal> above."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:967(title) 
msgid "Trigonometric Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:981(primary) 
msgid "acos"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:982(function) 
msgid "acos(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:984(entry) 
msgid "inverse cosine"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:990(primary) 
msgid "asin"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:992(function) 
msgid "asin(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:994(entry) 
msgid "inverse sine"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1000(primary) 
msgid "atan"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1002(function) 
msgid "atan(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1004(entry) 
msgid "inverse tangent"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1010(primary) 
msgid "atan2"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1012(function) 
msgid "atan2(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1016(literal) 
msgid "<placeholder-1/>/<placeholder-2/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1015(entry) 
msgid "inverse tangent of <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1022(primary) 
msgid "cos"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1024(function) 
msgid "cos(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1026(entry) 
msgid "cosine"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1032(primary) 
msgid "cot"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1034(function) 
msgid "cot(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1036(entry) 
msgid "cotangent"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1042(primary) 
msgid "sin"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1044(function) 
msgid "sin(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1046(entry) 
msgid "sine"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1052(primary) 
msgid "tan"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1054(function) 
msgid "tan(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1056(entry) 
msgid "tangent"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1066(title) 
msgid "String Functions and Operators"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1068(para) 
msgid "This section describes functions and operators for examining and manipulating string values. Strings in this context include values of the types <type>character</type>, <type>character varying</type>, and <type>text</type>. Unless otherwise noted, all of the functions listed below work on all of these types, but be wary of potential effects of automatic space-padding when using the <type>character</type> type. Some functions also exist natively for the bit-string types."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1079(para) 
msgid "<acronym>SQL</acronym> defines some string functions that use key words, rather than commas, to separate arguments. Details are in <xref linkend=\"functions-string-sql\"/>. <productname>PostgreSQL</productname> also provides versions of these functions that use the regular function invocation syntax (see <xref linkend=\"functions-string-other\"/>)."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1090(para) 
msgid "Before <productname>PostgreSQL</productname> 8.3, these functions would silently accept values of several non-string data types as well, due to the presence of implicit coercions from those data types to <type>text</type>. Those coercions have been removed because they frequently caused surprising behaviors. However, the string concatenation operator (<literal>||</literal>) still accepts non-string input, so long as at least one input is of a string type, as shown in <xref linkend=\"functions-string-sql\"/>. For other cases, insert an explicit coercion to <type>text</type> if you need to duplicate the previous behavior."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1104(title) 
msgid "<acronym>SQL</acronym> String Functions and Operators"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1118(parameter) /tmp/cicero-BGQN/func.xml:1119(parameter) /tmp/cicero-BGQN/func.xml:1134(parameter) /tmp/cicero-BGQN/func.xml:1138(parameter) /tmp/cicero-BGQN/func.xml:1153(parameter) /tmp/cicero-BGQN/func.xml:1166(parameter) /tmp/cicero-BGQN/func.xml:1166(parameter) /tmp/cicero-BGQN/func.xml:1190(parameter) /tmp/cicero-BGQN/func.xml:1203(parameter) /tmp/cicero-BGQN/func.xml:1216(parameter) /tmp/cicero-BGQN/func.xml:1216(parameter) /tmp/cicero-BGQN/func.xml:1231(parameter) /tmp/cicero-BGQN/func.xml:1244(parameter) /tmp/cicero-BGQN/func.xml:1255(parameter) /tmp/cicero-BGQN/func.xml:1267(parameter) /tmp/cicero-BGQN/func.xml:1285(parameter) /tmp/cicero-BGQN/func.xml:1291(parameter) /tmp/cicero-BGQN/func.xml:1302(parameter) /tmp/cicero-BGQN/func.xml:1338(parameter) /tmp/cicero-BGQN/func.xml:1356(parameter) /tmp/cicero-BGQN/func.xml:1363(parameter) /tmp/cicero-BGQN/func.xml:1427(parameter) /tmp/cicero-BGQN/func.xml:1436(parameter) /tmp/cicero-BGQN/func.xml:1451(parameter) /tmp/cicero-BGQN/func.xml:1458(parameter) /tmp/cicero-BGQN/func.xml:1469(parameter) /tmp/cicero-BGQN/func.xml:1485(parameter) /tmp/cicero-BGQN/func.xml:1490(parameter) /tmp/cicero-BGQN/func.xml:1546(parameter) /tmp/cicero-BGQN/func.xml:1580(parameter) /tmp/cicero-BGQN/func.xml:1584(parameter) /tmp/cicero-BGQN/func.xml:1591(parameter) /tmp/cicero-BGQN/func.xml:1595(parameter) /tmp/cicero-BGQN/func.xml:1596(parameter) /tmp/cicero-BGQN/func.xml:1608(parameter) /tmp/cicero-BGQN/func.xml:1614(parameter) /tmp/cicero-BGQN/func.xml:1617(parameter) /tmp/cicero-BGQN/func.xml:1630(parameter) /tmp/cicero-BGQN/func.xml:1637(parameter) /tmp/cicero-BGQN/func.xml:1648(parameter) /tmp/cicero-BGQN/func.xml:1652(parameter) /tmp/cicero-BGQN/func.xml:1679(parameter) /tmp/cicero-BGQN/func.xml:1699(parameter) /tmp/cicero-BGQN/func.xml:1731(parameter) /tmp/cicero-BGQN/func.xml:1762(parameter) /tmp/cicero-BGQN/func.xml:1767(parameter) /tmp/cicero-BGQN/func.xml:1779(parameter) /tmp/cicero-BGQN/func.xml:1795(parameter) /tmp/cicero-BGQN/func.xml:1799(parameter) /tmp/cicero-BGQN/func.xml:1812(parameter) /tmp/cicero-BGQN/func.xml:1816(parameter) /tmp/cicero-BGQN/func.xml:1829(parameter) /tmp/cicero-BGQN/func.xml:1832(parameter) /tmp/cicero-BGQN/func.xml:1843(parameter) /tmp/cicero-BGQN/func.xml:1848(parameter) /tmp/cicero-BGQN/func.xml:1892(parameter) /tmp/cicero-BGQN/func.xml:1898(parameter) /tmp/cicero-BGQN/func.xml:1901(parameter) /tmp/cicero-BGQN/func.xml:1913(parameter) /tmp/cicero-BGQN/func.xml:1920(parameter) /tmp/cicero-BGQN/func.xml:1931(parameter) /tmp/cicero-BGQN/func.xml:1936(parameter) /tmp/cicero-BGQN/func.xml:1948(parameter) /tmp/cicero-BGQN/func.xml:1954(parameter) /tmp/cicero-BGQN/func.xml:1966(parameter) /tmp/cicero-BGQN/func.xml:1971(parameter) /tmp/cicero-BGQN/func.xml:1982(parameter) /tmp/cicero-BGQN/func.xml:1987(parameter) /tmp/cicero-BGQN/func.xml:2016(parameter) /tmp/cicero-BGQN/func.xml:2022(parameter) /tmp/cicero-BGQN/func.xml:2886(parameter) /tmp/cicero-BGQN/func.xml:2887(parameter) /tmp/cicero-BGQN/func.xml:2905(parameter) /tmp/cicero-BGQN/func.xml:2918(parameter) /tmp/cicero-BGQN/func.xml:2918(parameter) /tmp/cicero-BGQN/func.xml:2933(parameter) /tmp/cicero-BGQN/func.xml:2946(parameter) /tmp/cicero-BGQN/func.xml:2963(parameter) /tmp/cicero-BGQN/func.xml:2969(parameter) /tmp/cicero-BGQN/func.xml:3005(parameter) /tmp/cicero-BGQN/func.xml:3012(parameter) /tmp/cicero-BGQN/func.xml:3023(parameter) /tmp/cicero-BGQN/func.xml:3028(parameter) /tmp/cicero-BGQN/func.xml:3040(parameter) /tmp/cicero-BGQN/func.xml:3057(parameter) /tmp/cicero-BGQN/func.xml:3072(parameter) /tmp/cicero-BGQN/func.xml:3087(parameter) /tmp/cicero-BGQN/func.xml:3111(parameter) /tmp/cicero-BGQN/func.xml:3115(parameter) /tmp/cicero-BGQN/func.xml:3127(parameter) /tmp/cicero-BGQN/func.xml:3143(parameter) /tmp/cicero-BGQN/func.xml:3335(replaceable) /tmp/cicero-BGQN/func.xml:3336(replaceable) /tmp/cicero-BGQN/func.xml:3440(replaceable) /tmp/cicero-BGQN/func.xml:3441(replaceable) 
msgid "string"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1118(literal) /tmp/cicero-BGQN/func.xml:1134(literal) /tmp/cicero-BGQN/func.xml:1137(literal) /tmp/cicero-BGQN/func.xml:2886(literal) /tmp/cicero-BGQN/func.xml:3202(literal) /tmp/cicero-BGQN/func.xml:8339(literal) /tmp/cicero-BGQN/func.xml:8351(literal) /tmp/cicero-BGQN/func.xml:10159(literal) /tmp/cicero-BGQN/func.xml:10166(literal) /tmp/cicero-BGQN/func.xml:10173(literal) /tmp/cicero-BGQN/func.xml:10180(literal) 
msgid "||"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1120(type) /tmp/cicero-BGQN/func.xml:1140(type) /tmp/cicero-BGQN/func.xml:1192(type) /tmp/cicero-BGQN/func.xml:1218(type) /tmp/cicero-BGQN/func.xml:1246(type) /tmp/cicero-BGQN/func.xml:1256(type) /tmp/cicero-BGQN/func.xml:1268(type) /tmp/cicero-BGQN/func.xml:1287(type) /tmp/cicero-BGQN/func.xml:1304(type) /tmp/cicero-BGQN/func.xml:1356(type) /tmp/cicero-BGQN/func.xml:1357(type) /tmp/cicero-BGQN/func.xml:1359(type) /tmp/cicero-BGQN/func.xml:1376(type) /tmp/cicero-BGQN/func.xml:1396(type) /tmp/cicero-BGQN/func.xml:1409(type) /tmp/cicero-BGQN/func.xml:1413(type) /tmp/cicero-BGQN/func.xml:1454(type) /tmp/cicero-BGQN/func.xml:1469(type) /tmp/cicero-BGQN/func.xml:1485(type) /tmp/cicero-BGQN/func.xml:1486(type) /tmp/cicero-BGQN/func.xml:1503(type) /tmp/cicero-BGQN/func.xml:1505(type) /tmp/cicero-BGQN/func.xml:1521(type) /tmp/cicero-BGQN/func.xml:1524(type) /tmp/cicero-BGQN/func.xml:1548(type) /tmp/cicero-BGQN/func.xml:1563(type) /tmp/cicero-BGQN/func.xml:1566(type) /tmp/cicero-BGQN/func.xml:1608(type) /tmp/cicero-BGQN/func.xml:1610(type) /tmp/cicero-BGQN/func.xml:1612(type) /tmp/cicero-BGQN/func.xml:1630(type) /tmp/cicero-BGQN/func.xml:1631(type) /tmp/cicero-BGQN/func.xml:1633(type) /tmp/cicero-BGQN/func.xml:1650(type) /tmp/cicero-BGQN/func.xml:1679(type) /tmp/cicero-BGQN/func.xml:1681(type) /tmp/cicero-BGQN/func.xml:1699(type) /tmp/cicero-BGQN/func.xml:1701(type) /tmp/cicero-BGQN/func.xml:1717(type) /tmp/cicero-BGQN/func.xml:1731(type) /tmp/cicero-BGQN/func.xml:1733(type) /tmp/cicero-BGQN/func.xml:1747(type) /tmp/cicero-BGQN/func.xml:1762(type) /tmp/cicero-BGQN/func.xml:1762(type) /tmp/cicero-BGQN/func.xml:1762(type) /tmp/cicero-BGQN/func.xml:1779(type) /tmp/cicero-BGQN/func.xml:1779(type) /tmp/cicero-BGQN/func.xml:1779(type) /tmp/cicero-BGQN/func.xml:1779(type) /tmp/cicero-BGQN/func.xml:1781(type) /tmp/cicero-BGQN/func.xml:1795(type) /tmp/cicero-BGQN/func.xml:1795(type) /tmp/cicero-BGQN/func.xml:1795(type) /tmp/cicero-BGQN/func.xml:1812(type) /tmp/cicero-BGQN/func.xml:1812(type) /tmp/cicero-BGQN/func.xml:1812(type) /tmp/cicero-BGQN/func.xml:1829(type) /tmp/cicero-BGQN/func.xml:1831(type) /tmp/cicero-BGQN/func.xml:1843(type) /tmp/cicero-BGQN/func.xml:1844(type) /tmp/cicero-BGQN/func.xml:1845(type) /tmp/cicero-BGQN/func.xml:1847(type) /tmp/cicero-BGQN/func.xml:1862(type) /tmp/cicero-BGQN/func.xml:1875(type) /tmp/cicero-BGQN/func.xml:1878(type) /tmp/cicero-BGQN/func.xml:1892(type) /tmp/cicero-BGQN/func.xml:1894(type) /tmp/cicero-BGQN/func.xml:1896(type) /tmp/cicero-BGQN/func.xml:1913(type) /tmp/cicero-BGQN/func.xml:1914(type) /tmp/cicero-BGQN/func.xml:1916(type) /tmp/cicero-BGQN/func.xml:1931(type) /tmp/cicero-BGQN/func.xml:1932(type) /tmp/cicero-BGQN/func.xml:1935(type) /tmp/cicero-BGQN/func.xml:1968(type) /tmp/cicero-BGQN/func.xml:1982(type) /tmp/cicero-BGQN/func.xml:1983(type) /tmp/cicero-BGQN/func.xml:1985(type) /tmp/cicero-BGQN/func.xml:2003(type) /tmp/cicero-BGQN/func.xml:2016(type) /tmp/cicero-BGQN/func.xml:2017(type) /tmp/cicero-BGQN/func.xml:2018(type) /tmp/cicero-BGQN/func.xml:2020(type) /tmp/cicero-BGQN/func.xml:3023(type) /tmp/cicero-BGQN/func.xml:3024(type) /tmp/cicero-BGQN/func.xml:3041(type) /tmp/cicero-BGQN/func.xml:3043(type) /tmp/cicero-BGQN/func.xml:3113(type) /tmp/cicero-BGQN/func.xml:5135(type) /tmp/cicero-BGQN/func.xml:5137(type) /tmp/cicero-BGQN/func.xml:5142(type) /tmp/cicero-BGQN/func.xml:5143(type) /tmp/cicero-BGQN/func.xml:5148(type) /tmp/cicero-BGQN/func.xml:5149(type) /tmp/cicero-BGQN/func.xml:5155(type) /tmp/cicero-BGQN/func.xml:5156(type) /tmp/cicero-BGQN/func.xml:5161(type) /tmp/cicero-BGQN/func.xml:5162(type) /tmp/cicero-BGQN/func.xml:5171(type) /tmp/cicero-BGQN/func.xml:5171(type) /tmp/cicero-BGQN/func.xml:5182(type) /tmp/cicero-BGQN/func.xml:5182(type) /tmp/cicero-BGQN/func.xml:5193(type) /tmp/cicero-BGQN/func.xml:5193(type) /tmp/cicero-BGQN/func.xml:6268(type) /tmp/cicero-BGQN/func.xml:6279(type) /tmp/cicero-BGQN/func.xml:6293(type) /tmp/cicero-BGQN/func.xml:6462(type) /tmp/cicero-BGQN/func.xml:6464(type) /tmp/cicero-BGQN/func.xml:8097(type) /tmp/cicero-BGQN/func.xml:8104(type) /tmp/cicero-BGQN/func.xml:8141(type) /tmp/cicero-BGQN/func.xml:8216(primary) /tmp/cicero-BGQN/func.xml:8220(type) /tmp/cicero-BGQN/func.xml:8447(type) /tmp/cicero-BGQN/func.xml:8461(type) /tmp/cicero-BGQN/func.xml:8495(type) /tmp/cicero-BGQN/func.xml:8507(type) /tmp/cicero-BGQN/func.xml:8519(type) /tmp/cicero-BGQN/func.xml:8519(type) /tmp/cicero-BGQN/func.xml:8521(type) /tmp/cicero-BGQN/func.xml:8563(type) /tmp/cicero-BGQN/func.xml:8632(type) /tmp/cicero-BGQN/func.xml:8632(type) /tmp/cicero-BGQN/func.xml:8632(type) /tmp/cicero-BGQN/func.xml:8632(type) /tmp/cicero-BGQN/func.xml:8644(type) /tmp/cicero-BGQN/func.xml:8656(type) /tmp/cicero-BGQN/func.xml:8656(type) /tmp/cicero-BGQN/func.xml:8656(type) /tmp/cicero-BGQN/func.xml:8664(type) /tmp/cicero-BGQN/func.xml:8664(type) /tmp/cicero-BGQN/func.xml:8675(type) /tmp/cicero-BGQN/func.xml:8675(type) /tmp/cicero-BGQN/func.xml:8675(type) /tmp/cicero-BGQN/func.xml:8683(type) /tmp/cicero-BGQN/func.xml:8683(type) /tmp/cicero-BGQN/func.xml:8694(type) /tmp/cicero-BGQN/func.xml:8694(type) /tmp/cicero-BGQN/func.xml:8694(type) /tmp/cicero-BGQN/func.xml:8740(replaceable) /tmp/cicero-BGQN/func.xml:9012(replaceable) /tmp/cicero-BGQN/func.xml:9134(replaceable) /tmp/cicero-BGQN/func.xml:9184(replaceable) /tmp/cicero-BGQN/func.xml:9185(replaceable) /tmp/cicero-BGQN/func.xml:9186(replaceable) /tmp/cicero-BGQN/func.xml:10302(type) /tmp/cicero-BGQN/func.xml:10356(type) /tmp/cicero-BGQN/func.xml:10356(type) /tmp/cicero-BGQN/func.xml:10359(type) /tmp/cicero-BGQN/func.xml:10379(type) /tmp/cicero-BGQN/func.xml:10379(type) /tmp/cicero-BGQN/func.xml:10379(type) /tmp/cicero-BGQN/func.xml:10658(type) /tmp/cicero-BGQN/func.xml:10658(type) /tmp/cicero-BGQN/func.xml:10661(type) /tmp/cicero-BGQN/func.xml:12357(type) /tmp/cicero-BGQN/func.xml:12457(type) /tmp/cicero-BGQN/func.xml:13290(type) /tmp/cicero-BGQN/func.xml:13295(type) /tmp/cicero-BGQN/func.xml:13300(type) /tmp/cicero-BGQN/func.xml:13305(type) /tmp/cicero-BGQN/func.xml:13310(type) /tmp/cicero-BGQN/func.xml:13316(type) /tmp/cicero-BGQN/func.xml:13322(type) /tmp/cicero-BGQN/func.xml:13327(type) /tmp/cicero-BGQN/func.xml:13332(type) /tmp/cicero-BGQN/func.xml:13337(type) /tmp/cicero-BGQN/func.xml:13342(type) /tmp/cicero-BGQN/func.xml:13347(type) /tmp/cicero-BGQN/func.xml:13359(type) /tmp/cicero-BGQN/func.xml:13364(type) /tmp/cicero-BGQN/func.xml:13369(type) /tmp/cicero-BGQN/func.xml:13375(type) /tmp/cicero-BGQN/func.xml:13380(type) /tmp/cicero-BGQN/func.xml:13390(type) /tmp/cicero-BGQN/func.xml:13395(type) /tmp/cicero-BGQN/func.xml:13400(type) /tmp/cicero-BGQN/func.xml:13405(type) /tmp/cicero-BGQN/func.xml:13583(type) /tmp/cicero-BGQN/func.xml:13588(type) /tmp/cicero-BGQN/func.xml:13593(type) /tmp/cicero-BGQN/func.xml:13598(type) /tmp/cicero-BGQN/func.xml:13794(type) /tmp/cicero-BGQN/func.xml:13806(type) /tmp/cicero-BGQN/func.xml:14002(type) /tmp/cicero-BGQN/func.xml:14004(type) /tmp/cicero-BGQN/func.xml:14011(type) /tmp/cicero-BGQN/func.xml:14018(type) /tmp/cicero-BGQN/func.xml:14023(type) /tmp/cicero-BGQN/func.xml:14025(type) /tmp/cicero-BGQN/func.xml:14032(type) /tmp/cicero-BGQN/func.xml:14039(type) /tmp/cicero-BGQN/func.xml:14044(type) /tmp/cicero-BGQN/func.xml:14046(type) /tmp/cicero-BGQN/func.xml:14051(type) /tmp/cicero-BGQN/func.xml:14053(type) /tmp/cicero-BGQN/func.xml:14194(type) /tmp/cicero-BGQN/func.xml:14208(type) /tmp/cicero-BGQN/func.xml:14374(type) /tmp/cicero-BGQN/func.xml:14396(type) /tmp/cicero-BGQN/func.xml:14535(type) /tmp/cicero-BGQN/func.xml:14584(type) /tmp/cicero-BGQN/func.xml:14591(type) /tmp/cicero-BGQN/func.xml:14593(type) /tmp/cicero-BGQN/func.xml:14598(type) /tmp/cicero-BGQN/func.xml:14605(type) 
msgid "text"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1124(primary) /tmp/cicero-BGQN/func.xml:1172(primary) 
msgid "character string"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1125(secondary) /tmp/cicero-BGQN/func.xml:2893(secondary) /tmp/cicero-BGQN/func.xml:3203(entry) 
msgid "concatenation"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1121(entry) /tmp/cicero-BGQN/func.xml:2889(entry) 
msgid "String concatenation <indexterm><placeholder-1/><placeholder-2/></indexterm>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1128(literal) 
msgid "'Post' || 'greSQL'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1129(literal) /tmp/cicero-BGQN/func.xml:12458(productname) 
msgid "PostgreSQL"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1135(parameter) /tmp/cicero-BGQN/func.xml:1137(parameter) 
msgid "non-string"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1133(entry) 
msgid "<literal><placeholder-1/><placeholder-2/><placeholder-3/></literal> or <literal><placeholder-4/><placeholder-5/><placeholder-6/></literal>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1141(entry) 
msgid "String concatenation with one non-string input"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1144(literal) 
msgid "'Value: ' || 42"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1145(literal) 
msgid "Value: 42"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1151(primary) 
msgid "bit_length"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1153(function) 
msgid "bit_length(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1156(entry) 
msgid "Number of bits in string"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1157(literal) 
msgid "bit_length('jose')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1158(literal) 
msgid "32"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1164(primary) 
msgid "char_length"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1166(function) 
msgid "char_length(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1166(function) 
msgid "character_length(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1162(entry) 
msgid "<indexterm><placeholder-1/></indexterm><literal><placeholder-2/></literal> or <literal><placeholder-3/></literal>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1173(secondary) /tmp/cicero-BGQN/func.xml:1176(primary) /tmp/cicero-BGQN/func.xml:1578(primary) /tmp/cicero-BGQN/func.xml:1609(parameter) /tmp/cicero-BGQN/func.xml:1615(parameter) /tmp/cicero-BGQN/func.xml:1618(parameter) /tmp/cicero-BGQN/func.xml:1893(parameter) /tmp/cicero-BGQN/func.xml:1899(parameter) /tmp/cicero-BGQN/func.xml:1902(parameter) /tmp/cicero-BGQN/func.xml:3085(primary) /tmp/cicero-BGQN/func.xml:3094(secondary) /tmp/cicero-BGQN/func.xml:3097(primary) /tmp/cicero-BGQN/func.xml:7662(primary) /tmp/cicero-BGQN/func.xml:7731(entry) /tmp/cicero-BGQN/func.xml:8421(primary) /tmp/cicero-BGQN/func.xml:14591(parameter) /tmp/cicero-BGQN/func.xml:14598(parameter) 
msgid "length"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1177(secondary) 
msgid "of a character string"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1178(see) 
msgid "character string, length"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1169(entry) 
msgid "Number of characters in string <indexterm><placeholder-1/><placeholder-2/></indexterm><indexterm><placeholder-3/><placeholder-4/><placeholder-5/></indexterm>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1181(literal) 
msgid "char_length('jose')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1182(literal) /tmp/cicero-BGQN/func.xml:1208(literal) /tmp/cicero-BGQN/func.xml:1587(literal) /tmp/cicero-BGQN/func.xml:1600(literal) /tmp/cicero-BGQN/func.xml:6991(computeroutput) /tmp/cicero-BGQN/func.xml:8129(literal) /tmp/cicero-BGQN/func.xml:10374(literal) 
msgid "4"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1188(primary) 
msgid "lower"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1190(function) 
msgid "lower(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1193(entry) 
msgid "Convert string to lower case"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1194(literal) 
msgid "lower('TOM')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1195(literal) 
msgid "tom"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1201(primary) /tmp/cicero-BGQN/func.xml:2903(primary) 
msgid "octet_length"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1203(function) /tmp/cicero-BGQN/func.xml:2905(function) 
msgid "octet_length(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1206(entry) 
msgid "Number of bytes in string"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1207(literal) 
msgid "octet_length('jose')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1214(primary) /tmp/cicero-BGQN/func.xml:2916(primary) 
msgid "overlay"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1216(optional) /tmp/cicero-BGQN/func.xml:1244(optional) /tmp/cicero-BGQN/func.xml:2918(optional) /tmp/cicero-BGQN/func.xml:2946(optional) 
msgid "for <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1216(function) /tmp/cicero-BGQN/func.xml:2918(function) 
msgid "overlay(<placeholder-1/> placing <placeholder-2/> from <placeholder-3/><placeholder-4/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1219(entry) /tmp/cicero-BGQN/func.xml:2921(entry) 
msgid "Replace substring"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1222(literal) 
msgid "overlay('Txxxxas' placing 'hom' from 2 for 4)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1223(literal) 
msgid "Thomas"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1229(primary) /tmp/cicero-BGQN/func.xml:2931(primary) 
msgid "position"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1231(parameter) /tmp/cicero-BGQN/func.xml:1242(primary) /tmp/cicero-BGQN/func.xml:1948(parameter) /tmp/cicero-BGQN/func.xml:1953(parameter) /tmp/cicero-BGQN/func.xml:2933(parameter) /tmp/cicero-BGQN/func.xml:2944(primary) /tmp/cicero-BGQN/func.xml:3436(primary) /tmp/cicero-BGQN/func.xml:3582(primary) 
msgid "substring"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1231(function) /tmp/cicero-BGQN/func.xml:1953(literal) /tmp/cicero-BGQN/func.xml:2933(function) 
msgid "position(<placeholder-1/> in <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1234(entry) /tmp/cicero-BGQN/func.xml:2936(entry) 
msgid "Location of specified substring"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1235(literal) 
msgid "position('om' in 'Thomas')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1244(optional) /tmp/cicero-BGQN/func.xml:2946(optional) 
msgid "from <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1244(function) /tmp/cicero-BGQN/func.xml:2946(function) 
msgid "substring(<placeholder-1/><placeholder-2/><placeholder-3/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1247(entry) /tmp/cicero-BGQN/func.xml:2949(entry) 
msgid "Extract substring"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1250(literal) 
msgid "substring('Thomas' from 2 for 3)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1251(literal) 
msgid "hom"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1255(replaceable) /tmp/cicero-BGQN/func.xml:1267(replaceable) /tmp/cicero-BGQN/func.xml:1762(parameter) /tmp/cicero-BGQN/func.xml:1779(parameter) /tmp/cicero-BGQN/func.xml:1795(parameter) /tmp/cicero-BGQN/func.xml:1812(parameter) /tmp/cicero-BGQN/func.xml:3335(replaceable) /tmp/cicero-BGQN/func.xml:3336(replaceable) /tmp/cicero-BGQN/func.xml:3440(replaceable) /tmp/cicero-BGQN/func.xml:3441(replaceable) 
msgid "pattern"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1255(function) 
msgid "substring(<placeholder-1/> from <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1257(entry) 
msgid "Extract substring matching POSIX regular expression. See <xref linkend=\"functions-matching\"/> for more information on pattern matching."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1262(literal) 
msgid "substring('Thomas' from '...$')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1263(literal) 
msgid "mas"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1267(replaceable) /tmp/cicero-BGQN/func.xml:1508(literal) /tmp/cicero-BGQN/func.xml:1509(literal) /tmp/cicero-BGQN/func.xml:3046(literal) /tmp/cicero-BGQN/func.xml:4013(firstterm) 
msgid "escape"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1267(function) /tmp/cicero-BGQN/func.xml:1971(literal) 
msgid "substring(<placeholder-1/> from <placeholder-2/> for <placeholder-3/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1270(acronym) /tmp/cicero-BGQN/func.xml:1684(acronym) /tmp/cicero-BGQN/func.xml:1704(acronym) /tmp/cicero-BGQN/func.xml:1736(acronym) 
msgid "SQL"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1269(entry) 
msgid "Extract substring matching <placeholder-1/> regular expression. See <xref linkend=\"functions-matching\"/> for more information on pattern matching."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1274(literal) 
msgid "substring('Thomas' from '%#\"o_a#\"_' for '#')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1275(literal) 
msgid "oma"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1281(primary) /tmp/cicero-BGQN/func.xml:1366(literal) /tmp/cicero-BGQN/func.xml:1640(literal) /tmp/cicero-BGQN/func.xml:1923(literal) /tmp/cicero-BGQN/func.xml:2959(primary) /tmp/cicero-BGQN/func.xml:3015(literal) 
msgid "trim"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1283(optional) 
msgid "leading | trailing | both"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1284(parameter) /tmp/cicero-BGQN/func.xml:1290(parameter) /tmp/cicero-BGQN/func.xml:1357(parameter) /tmp/cicero-BGQN/func.xml:1362(parameter) /tmp/cicero-BGQN/func.xml:1631(parameter) /tmp/cicero-BGQN/func.xml:1636(parameter) /tmp/cicero-BGQN/func.xml:1914(parameter) /tmp/cicero-BGQN/func.xml:1919(parameter) 
msgid "characters"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1283(function) 
msgid "trim(<placeholder-1/><optional><placeholder-2/></optional> from <placeholder-3/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1288(entry) 
msgid "Remove the longest string containing only the <placeholder-1/> (a space by default) from the start/end/both ends of the <placeholder-2/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1293(literal) 
msgid "trim(both 'x' from 'xTomxx')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1294(literal) /tmp/cicero-BGQN/func.xml:2972(literal) 
msgid "Tom"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1300(primary) 
msgid "upper"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1302(function) 
msgid "upper(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1305(entry) 
msgid "Convert string to upper case"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1306(literal) 
msgid "upper('tom')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1307(literal) 
msgid "TOM"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1313(para) 
msgid "Additional string manipulation functions are available and are listed in <xref linkend=\"functions-string-other\"/>. Some of them are used internally to implement the <acronym>SQL</acronym>-standard string functions listed in <xref linkend=\"functions-string-sql\"/>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1320(title) 
msgid "Other String Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1336(primary) 
msgid "ascii"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1338(function) 
msgid "ascii(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1342(acronym) /tmp/cicero-BGQN/func.xml:1345(acronym) /tmp/cicero-BGQN/func.xml:1381(acronym) /tmp/cicero-BGQN/func.xml:1987(acronym) /tmp/cicero-BGQN/func.xml:3045(acronym) 
msgid "ASCII"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1343(acronym) /tmp/cicero-BGQN/func.xml:1378(acronym) /tmp/cicero-BGQN/func.xml:2074(literal) /tmp/cicero-BGQN/func.xml:2092(literal) /tmp/cicero-BGQN/func.xml:2104(literal) /tmp/cicero-BGQN/func.xml:2122(literal) /tmp/cicero-BGQN/func.xml:2134(literal) /tmp/cicero-BGQN/func.xml:2152(literal) /tmp/cicero-BGQN/func.xml:2158(literal) /tmp/cicero-BGQN/func.xml:2164(literal) /tmp/cicero-BGQN/func.xml:2170(literal) /tmp/cicero-BGQN/func.xml:2176(literal) /tmp/cicero-BGQN/func.xml:2182(literal) /tmp/cicero-BGQN/func.xml:2188(literal) /tmp/cicero-BGQN/func.xml:2194(literal) /tmp/cicero-BGQN/func.xml:2206(literal) /tmp/cicero-BGQN/func.xml:2218(literal) /tmp/cicero-BGQN/func.xml:2236(literal) /tmp/cicero-BGQN/func.xml:2248(literal) /tmp/cicero-BGQN/func.xml:2266(literal) /tmp/cicero-BGQN/func.xml:2284(literal) /tmp/cicero-BGQN/func.xml:2290(literal) /tmp/cicero-BGQN/func.xml:2296(literal) /tmp/cicero-BGQN/func.xml:2302(literal) /tmp/cicero-BGQN/func.xml:2308(literal) /tmp/cicero-BGQN/func.xml:2326(literal) /tmp/cicero-BGQN/func.xml:2344(literal) /tmp/cicero-BGQN/func.xml:2458(literal) /tmp/cicero-BGQN/func.xml:2464(literal) /tmp/cicero-BGQN/func.xml:2470(literal) /tmp/cicero-BGQN/func.xml:2475(literal) /tmp/cicero-BGQN/func.xml:2481(literal) /tmp/cicero-BGQN/func.xml:2487(literal) /tmp/cicero-BGQN/func.xml:2493(literal) /tmp/cicero-BGQN/func.xml:2499(literal) /tmp/cicero-BGQN/func.xml:2505(literal) /tmp/cicero-BGQN/func.xml:2511(literal) /tmp/cicero-BGQN/func.xml:2517(literal) /tmp/cicero-BGQN/func.xml:2523(literal) /tmp/cicero-BGQN/func.xml:2529(literal) /tmp/cicero-BGQN/func.xml:2535(literal) /tmp/cicero-BGQN/func.xml:2541(literal) /tmp/cicero-BGQN/func.xml:2547(literal) /tmp/cicero-BGQN/func.xml:2553(literal) /tmp/cicero-BGQN/func.xml:2559(literal) /tmp/cicero-BGQN/func.xml:2565(literal) /tmp/cicero-BGQN/func.xml:2571(literal) /tmp/cicero-BGQN/func.xml:2577(literal) /tmp/cicero-BGQN/func.xml:2583(literal) /tmp/cicero-BGQN/func.xml:2589(literal) /tmp/cicero-BGQN/func.xml:2595(literal) /tmp/cicero-BGQN/func.xml:2601(literal) /tmp/cicero-BGQN/func.xml:2607(literal) /tmp/cicero-BGQN/func.xml:2613(literal) /tmp/cicero-BGQN/func.xml:2619(literal) /tmp/cicero-BGQN/func.xml:2625(literal) /tmp/cicero-BGQN/func.xml:2631(literal) /tmp/cicero-BGQN/func.xml:2637(literal) /tmp/cicero-BGQN/func.xml:2643(literal) /tmp/cicero-BGQN/func.xml:2649(literal) /tmp/cicero-BGQN/func.xml:2655(literal) /tmp/cicero-BGQN/func.xml:2661(literal) /tmp/cicero-BGQN/func.xml:2667(literal) /tmp/cicero-BGQN/func.xml:2673(literal) /tmp/cicero-BGQN/func.xml:2679(literal) /tmp/cicero-BGQN/func.xml:2685(literal) /tmp/cicero-BGQN/func.xml:2691(literal) /tmp/cicero-BGQN/func.xml:2697(literal) /tmp/cicero-BGQN/func.xml:2716(literal) /tmp/cicero-BGQN/func.xml:2740(literal) /tmp/cicero-BGQN/func.xml:2752(literal) /tmp/cicero-BGQN/func.xml:2758(literal) /tmp/cicero-BGQN/func.xml:2782(literal) /tmp/cicero-BGQN/func.xml:2794(literal) /tmp/cicero-BGQN/func.xml:2800(literal) /tmp/cicero-BGQN/func.xml:2805(literal) /tmp/cicero-BGQN/func.xml:2812(literal) /tmp/cicero-BGQN/func.xml:2817(literal) 
msgid "UTF8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1341(entry) 
msgid "<placeholder-1/> code of the first character of the argument. For <placeholder-2/> returns the Unicode code point of the character. For other multibyte encodings, the argument must be an <placeholder-3/> character."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1347(literal) 
msgid "ascii('x')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1354(primary) /tmp/cicero-BGQN/func.xml:3003(primary) 
msgid "btrim"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1357(optional) /tmp/cicero-BGQN/func.xml:1610(optional) /tmp/cicero-BGQN/func.xml:1631(optional) /tmp/cicero-BGQN/func.xml:1894(optional) /tmp/cicero-BGQN/func.xml:1914(optional) /tmp/cicero-BGQN/func.xml:1983(optional) /tmp/cicero-BGQN/func.xml:8519(optional) /tmp/cicero-BGQN/func.xml:8531(optional) /tmp/cicero-BGQN/func.xml:8543(optional) /tmp/cicero-BGQN/func.xml:14023(optional) 
msgid ", <placeholder-1/><placeholder-2/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1356(function) 
msgid "btrim(<placeholder-1/><placeholder-2/><placeholder-3/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1360(entry) 
msgid "Remove the longest string consisting only of characters in <placeholder-1/> (a space by default) from the start and end of <placeholder-2/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1365(literal) 
msgid "btrim('xyxtrimyyx', 'xy')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1372(primary) 
msgid "chr"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1374(function) 
msgid "chr(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1377(entry) 
msgid "Character with the given code. For <placeholder-1/> the argument is treated as a Unicode code point. For other multibyte encodings the argument must designate an <placeholder-2/> character. The NULL (0) character is not allowed because text data types cannot store such bytes."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1384(literal) 
msgid "chr(65)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1385(literal) 
msgid "A"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1391(primary) 
msgid "concat"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1393(parameter) /tmp/cicero-BGQN/func.xml:1394(parameter) /tmp/cicero-BGQN/func.xml:1410(parameter) /tmp/cicero-BGQN/func.xml:1411(parameter) /tmp/cicero-BGQN/func.xml:1522(parameter) /tmp/cicero-BGQN/func.xml:1563(parameter) /tmp/cicero-BGQN/func.xml:1860(parameter) /tmp/cicero-BGQN/func.xml:1875(parameter) 
msgid "str"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1393(type) /tmp/cicero-BGQN/func.xml:1394(type) /tmp/cicero-BGQN/func.xml:1410(type) /tmp/cicero-BGQN/func.xml:1411(type) /tmp/cicero-BGQN/func.xml:1522(type) 
msgid "\"any\""
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1393(function) 
msgid "concat(<placeholder-1/><placeholder-2/> [, <placeholder-3/><placeholder-4/> [, ...] ])"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1397(entry) 
msgid "Concatenate all arguments. NULL arguments are ignored."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1400(literal) 
msgid "concat('abcde', 2, NULL, 22)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1401(literal) 
msgid "abcde222"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1407(primary) 
msgid "concat_ws"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1409(parameter) 
msgid "sep"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1409(function) 
msgid "concat_ws(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/> [, <placeholder-5/><placeholder-6/> [, ...] ])"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1414(entry) 
msgid "Concatenate all but first arguments with separators. The first parameter is used as a separator. NULL arguments are ignored."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1418(literal) 
msgid "concat_ws(',', 'abcde', 2, NULL, 22)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1419(literal) 
msgid "abcde,2,22"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1425(primary) 
msgid "convert"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1427(type) /tmp/cicero-BGQN/func.xml:1431(type) /tmp/cicero-BGQN/func.xml:1451(type) /tmp/cicero-BGQN/func.xml:1472(type) /tmp/cicero-BGQN/func.xml:1488(type) /tmp/cicero-BGQN/func.xml:1502(type) /tmp/cicero-BGQN/func.xml:1591(type) /tmp/cicero-BGQN/func.xml:2888(type) /tmp/cicero-BGQN/func.xml:2920(type) /tmp/cicero-BGQN/func.xml:2948(type) /tmp/cicero-BGQN/func.xml:2965(type) /tmp/cicero-BGQN/func.xml:3006(type) /tmp/cicero-BGQN/func.xml:3006(type) /tmp/cicero-BGQN/func.xml:3008(type) /tmp/cicero-BGQN/func.xml:3026(type) /tmp/cicero-BGQN/func.xml:3040(type) /tmp/cicero-BGQN/func.xml:3130(type) /tmp/cicero-BGQN/func.xml:3146(type) /tmp/cicero-BGQN/func.xml:14600(type) 
msgid "bytea"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1428(parameter) /tmp/cicero-BGQN/func.xml:1435(parameter) /tmp/cicero-BGQN/func.xml:1452(parameter) /tmp/cicero-BGQN/func.xml:1457(parameter) 
msgid "src_encoding"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1428(type) /tmp/cicero-BGQN/func.xml:1429(type) /tmp/cicero-BGQN/func.xml:1452(type) /tmp/cicero-BGQN/func.xml:1470(type) /tmp/cicero-BGQN/func.xml:1592(type) /tmp/cicero-BGQN/func.xml:1666(type) /tmp/cicero-BGQN/func.xml:8828(replaceable) /tmp/cicero-BGQN/func.xml:8926(replaceable) /tmp/cicero-BGQN/func.xml:12345(type) /tmp/cicero-BGQN/func.xml:12351(type) /tmp/cicero-BGQN/func.xml:12364(type) /tmp/cicero-BGQN/func.xml:12376(type) /tmp/cicero-BGQN/func.xml:12445(type) /tmp/cicero-BGQN/func.xml:12451(type) /tmp/cicero-BGQN/func.xml:13385(type) /tmp/cicero-BGQN/func.xml:14002(parameter) /tmp/cicero-BGQN/func.xml:14358(type) /tmp/cicero-BGQN/func.xml:14418(type) 
msgid "name"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1429(parameter) /tmp/cicero-BGQN/func.xml:1433(parameter) /tmp/cicero-BGQN/func.xml:1470(parameter) /tmp/cicero-BGQN/func.xml:1474(parameter) 
msgid "dest_encoding"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1427(function) 
msgid "convert(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/>, <placeholder-5/><placeholder-6/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1437(command) 
msgid "CREATE CONVERSION"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1432(entry) 
msgid "Convert string to <placeholder-1/>. The original encoding is specified by <placeholder-2/>. The <placeholder-3/> must be valid in this encoding. Conversions can be defined by <placeholder-4/>. Also there are some predefined conversions. See <xref linkend=\"conversion-names\"/> for available conversions."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1441(literal) 
msgid "convert('text_in_utf8', 'UTF8', 'LATIN1')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1442(literal) /tmp/cicero-BGQN/func.xml:1461(literal) 
msgid "text_in_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1442(entry) 
msgid "<placeholder-1/> represented in Latin-1 encoding (ISO 8859-1)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1449(primary) 
msgid "convert_from"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1451(function) 
msgid "convert_from(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1455(entry) 
msgid "Convert string to the database encoding. The original encoding is specified by <placeholder-1/>. The <placeholder-2/> must be valid in this encoding."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1460(literal) 
msgid "convert_from('text_in_utf8', 'UTF8')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1461(entry) 
msgid "<placeholder-1/> represented in the current database encoding"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1467(primary) 
msgid "convert_to"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1469(function) 
msgid "convert_to(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1473(entry) 
msgid "Convert string to <placeholder-1/>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1476(literal) 
msgid "convert_to('some text', 'UTF8')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1477(literal) 
msgid "some text"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1477(entry) 
msgid "<placeholder-1/> represented in the UTF8 encoding"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1483(primary) /tmp/cicero-BGQN/func.xml:3021(primary) 
msgid "decode"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1486(parameter) /tmp/cicero-BGQN/func.xml:1491(parameter) /tmp/cicero-BGQN/func.xml:1503(parameter) /tmp/cicero-BGQN/func.xml:1519(primary) /tmp/cicero-BGQN/func.xml:1521(function) 
msgid "format"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1485(function) /tmp/cicero-BGQN/func.xml:3023(function) 
msgid "decode(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1491(function) /tmp/cicero-BGQN/func.xml:1500(primary) /tmp/cicero-BGQN/func.xml:3029(function) /tmp/cicero-BGQN/func.xml:3029(function) /tmp/cicero-BGQN/func.xml:3038(primary) 
msgid "encode"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1489(entry) 
msgid "Decode binary data from textual representation in <placeholder-1/>. Options for <placeholder-2/> are same as in <placeholder-3/>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1493(literal) 
msgid "decode('MTIzAAE=', 'base64')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1494(literal) 
msgid "\\x3132330001"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1502(parameter) 
msgid "data"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1502(function) /tmp/cicero-BGQN/func.xml:3040(function) 
msgid "encode(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1508(literal) /tmp/cicero-BGQN/func.xml:3046(literal) 
msgid "base64"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1508(literal) /tmp/cicero-BGQN/func.xml:3046(literal) 
msgid "hex"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1509(literal) 
msgid "\\000"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1506(entry) 
msgid "Encode binary data into a textual representation. Supported formats are: <placeholder-1/>, <placeholder-2/>, <placeholder-3/>. <placeholder-4/> merely outputs null bytes as <placeholder-5/> and doubles backslashes."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1512(literal) 
msgid "encode(E'123\\\\000\\\\001', 'base64')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1513(literal) 
msgid "MTIzAAE="
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1521(parameter) 
msgid "formatstr"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1521(literal) 
msgid "<placeholder-1/>(<placeholder-2/><placeholder-3/> [, <placeholder-4/><placeholder-5/> [, ...] ])"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1527(function) 
msgid "sprintf"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1528(literal) 
msgid "%s"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1529(literal) 
msgid "%I"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1530(literal) 
msgid "%L"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1531(literal) 
msgid "%%"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1533(replaceable) /tmp/cicero-BGQN/func.xml:1534(replaceable) /tmp/cicero-BGQN/func.xml:1564(parameter) /tmp/cicero-BGQN/func.xml:1568(replaceable) /tmp/cicero-BGQN/func.xml:1568(replaceable) /tmp/cicero-BGQN/func.xml:1569(replaceable) /tmp/cicero-BGQN/func.xml:1876(parameter) /tmp/cicero-BGQN/func.xml:1880(replaceable) /tmp/cicero-BGQN/func.xml:1880(replaceable) /tmp/cicero-BGQN/func.xml:1881(replaceable) /tmp/cicero-BGQN/func.xml:4087(replaceable) /tmp/cicero-BGQN/func.xml:4088(replaceable) /tmp/cicero-BGQN/func.xml:4090(replaceable) /tmp/cicero-BGQN/func.xml:4120(replaceable) /tmp/cicero-BGQN/func.xml:4121(replaceable) /tmp/cicero-BGQN/func.xml:4719(literal) /tmp/cicero-BGQN/func.xml:4723(literal) 
msgid "n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1533(literal) 
msgid "<placeholder-1/>$"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1525(entry) 
msgid "Format a string. This function is similar to the C function <placeholder-1/>; but only the following conversion specifications are recognized: <placeholder-2/> interpolates the corresponding argument as a string; <placeholder-3/> escapes its argument as an SQL identifier; <placeholder-4/> escapes its argument as an SQL literal; <placeholder-5/> outputs a literal <placeholder-6/>. A conversion can reference an explicit parameter position by preceding the conversion specifier with <placeholder-7/>, where <placeholder-8/> is the argument position. See also <xref linkend=\"plpgsql-quote-literal-example\"/>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1537(literal) 
msgid "format('Hello %s, %1$s', 'World')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1538(literal) 
msgid "Hello World, World"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1544(primary) 
msgid "initcap"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1546(function) 
msgid "initcap(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1549(entry) 
msgid "Convert the first letter of each word to upper case and the rest to lower case. Words are sequences of alphanumeric characters separated by non-alphanumeric characters."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1554(literal) 
msgid "initcap('hi THOMAS')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1555(literal) 
msgid "Hi Thomas"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1561(primary) 
msgid "left"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1563(function) 
msgid "left(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1567(entry) 
msgid "Return first <placeholder-1/> characters in the string. When <placeholder-2/> is negative, return all but last |<placeholder-3/>| characters."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1571(literal) 
msgid "left('abcde', 2)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1572(literal) 
msgid "ab"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1580(function) /tmp/cicero-BGQN/func.xml:3087(function) /tmp/cicero-BGQN/func.xml:7729(function) /tmp/cicero-BGQN/func.xml:8423(function) 
msgid "length(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1583(entry) 
msgid "Number of characters in <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1586(literal) 
msgid "length('jose')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1592(parameter) /tmp/cicero-BGQN/func.xml:1596(parameter) /tmp/cicero-BGQN/func.xml:1983(parameter) 
msgid "encoding"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1591(function) 
msgid "length(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/> )"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1594(entry) 
msgid "Number of characters in <placeholder-1/> in the given <placeholder-2/>. The <placeholder-3/> must be valid in this encoding."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1599(literal) 
msgid "length('jose', 'UTF8')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1606(primary) 
msgid "lpad"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1610(parameter) /tmp/cicero-BGQN/func.xml:1616(parameter) /tmp/cicero-BGQN/func.xml:1894(parameter) /tmp/cicero-BGQN/func.xml:1900(parameter) 
msgid "fill"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1608(function) 
msgid "lpad(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/><placeholder-5/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1613(entry) 
msgid "Fill up the <placeholder-1/> to length <placeholder-2/> by prepending the characters <placeholder-3/> (a space by default). If the <placeholder-4/> is already longer than <placeholder-5/> then it is truncated (on the right)."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1621(literal) 
msgid "lpad('hi', 5, 'xy')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1622(literal) 
msgid "xyxhi"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1628(primary) 
msgid "ltrim"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1630(function) 
msgid "ltrim(<placeholder-1/><placeholder-2/><placeholder-3/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1634(entry) 
msgid "Remove the longest string containing only characters from <placeholder-1/> (a space by default) from the start of <placeholder-2/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1639(literal) 
msgid "ltrim('zzzytrim', 'xyz')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1646(primary) /tmp/cicero-BGQN/func.xml:3109(primary) 
msgid "md5"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1648(function) /tmp/cicero-BGQN/func.xml:3111(function) 
msgid "md5(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1651(entry) /tmp/cicero-BGQN/func.xml:3114(entry) 
msgid "Calculates the MD5 hash of <placeholder-1/>, returning the result in hexadecimal"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1655(literal) 
msgid "md5('abc')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1656(literal) 
msgid "900150983cd24fb0 d6963f7d28e17f72"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1662(primary) 
msgid "pg_client_encoding"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1664(function) /tmp/cicero-BGQN/func.xml:1670(literal) 
msgid "pg_client_encoding()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1667(entry) 
msgid "Current client encoding name"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1671(literal) /tmp/cicero-BGQN/func.xml:2067(literal) /tmp/cicero-BGQN/func.xml:2073(literal) /tmp/cicero-BGQN/func.xml:2350(literal) /tmp/cicero-BGQN/func.xml:2476(literal) 
msgid "SQL_ASCII"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1677(primary) 
msgid "quote_ident"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1679(function) 
msgid "quote_ident(<placeholder-1/><placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1682(entry) 
msgid "Return the given string suitably quoted to be used as an identifier in an <placeholder-1/> statement string. Quotes are added only if necessary (i.e., if the string contains non-identifier characters or would be case-folded). Embedded quotes are properly doubled. See also <xref linkend=\"plpgsql-quote-literal-example\"/>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1690(literal) 
msgid "quote_ident('Foo bar')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1691(literal) 
msgid "\"Foo bar\""
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1697(primary) /tmp/cicero-BGQN/func.xml:1706(function) 
msgid "quote_literal"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1699(function) /tmp/cicero-BGQN/func.xml:1716(function) 
msgid "quote_literal(<placeholder-1/><placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1708(function) /tmp/cicero-BGQN/func.xml:1729(primary) 
msgid "quote_nullable"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1702(entry) 
msgid "Return the given string suitably quoted to be used as a string literal in an <placeholder-1/> statement string. Embedded single-quotes and backslashes are properly doubled. Note that <placeholder-2/> returns null on null input; if the argument might be null, <placeholder-3/> is often more suitable. See also <xref linkend=\"plpgsql-quote-literal-example\"/>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1711(literal) 
msgid "quote_literal(E'O\\'Reilly')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1712(literal) 
msgid "'O''Reilly'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1716(parameter) /tmp/cicero-BGQN/func.xml:1746(parameter) /tmp/cicero-BGQN/func.xml:8828(replaceable) /tmp/cicero-BGQN/func.xml:9987(replaceable) /tmp/cicero-BGQN/func.xml:10050(replaceable) /tmp/cicero-BGQN/func.xml:10053(replaceable) /tmp/cicero-BGQN/func.xml:11306(replaceable) /tmp/cicero-BGQN/func.xml:11312(replaceable) /tmp/cicero-BGQN/func.xml:11315(replaceable) /tmp/cicero-BGQN/func.xml:11333(replaceable) /tmp/cicero-BGQN/func.xml:11339(replaceable) /tmp/cicero-BGQN/func.xml:11342(replaceable) /tmp/cicero-BGQN/func.xml:11359(replaceable) /tmp/cicero-BGQN/func.xml:11362(replaceable) /tmp/cicero-BGQN/func.xml:11365(replaceable) /tmp/cicero-BGQN/func.xml:11375(replaceable) /tmp/cicero-BGQN/func.xml:11378(replaceable) /tmp/cicero-BGQN/func.xml:11381(replaceable) /tmp/cicero-BGQN/func.xml:11392(replaceable) /tmp/cicero-BGQN/func.xml:11396(replaceable) /tmp/cicero-BGQN/func.xml:11399(replaceable) /tmp/cicero-BGQN/func.xml:11866(replaceable) /tmp/cicero-BGQN/func.xml:11897(replaceable) 
msgid "value"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1716(type) /tmp/cicero-BGQN/func.xml:1746(type) /tmp/cicero-BGQN/func.xml:10266(type) /tmp/cicero-BGQN/func.xml:10310(type) /tmp/cicero-BGQN/func.xml:10345(type) 
msgid "anyelement"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1718(entry) 
msgid "Coerce the given value to text and then quote it as a literal. Embedded single-quotes and backslashes are properly doubled."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1722(literal) 
msgid "quote_literal(42.5)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1723(literal) /tmp/cicero-BGQN/func.xml:1754(literal) 
msgid "'42.5'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1731(function) /tmp/cicero-BGQN/func.xml:1746(function) 
msgid "quote_nullable(<placeholder-1/><placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1737(literal) /tmp/cicero-BGQN/func.xml:1742(literal) /tmp/cicero-BGQN/func.xml:1750(literal) 
msgid "NULL"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1734(entry) 
msgid "Return the given string suitably quoted to be used as a string literal in an <placeholder-1/> statement string; or, if the argument is null, return <placeholder-2/>. Embedded single-quotes and backslashes are properly doubled. See also <xref linkend=\"plpgsql-quote-literal-example\"/>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1741(literal) 
msgid "quote_nullable(NULL)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1748(entry) 
msgid "Coerce the given value to text and then quote it as a literal; or, if the argument is null, return <placeholder-1/>. Embedded single-quotes and backslashes are properly doubled."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1753(literal) 
msgid "quote_nullable(42.5)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1760(primary) /tmp/cicero-BGQN/func.xml:3588(primary) 
msgid "regexp_matches"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1762(parameter) /tmp/cicero-BGQN/func.xml:1779(parameter) /tmp/cicero-BGQN/func.xml:1795(parameter) /tmp/cicero-BGQN/func.xml:1812(parameter) 
msgid "flags"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1762(function) 
msgid "regexp_matches(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/> [, <placeholder-5/><placeholder-6/>])"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1764(type) 
msgid "setof text[]"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1765(entry) 
msgid "Return all captured substrings resulting from matching a POSIX regular expression against the <placeholder-1/>. See <xref linkend=\"functions-posix-regexp\"/> for more information."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1770(literal) 
msgid "regexp_matches('foobarbequebaz', '(bar)(beque)')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1771(literal) 
msgid "{bar,beque}"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1777(primary) /tmp/cicero-BGQN/func.xml:3585(primary) 
msgid "regexp_replace"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1779(parameter) 
msgid "replacement"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1779(function) 
msgid "regexp_replace(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/>, <placeholder-5/><placeholder-6/> [, <placeholder-7/><placeholder-8/>])"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1782(entry) 
msgid "Replace substring(s) matching a POSIX regular expression. See <xref linkend=\"functions-posix-regexp\"/> for more information."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1786(literal) 
msgid "regexp_replace('Thomas', '.[mN]a.', 'M')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1787(literal) 
msgid "ThM"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1793(primary) /tmp/cicero-BGQN/func.xml:3594(primary) 
msgid "regexp_split_to_array"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1795(function) 
msgid "regexp_split_to_array(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/> [, <placeholder-5/><placeholder-6/> ])"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1797(type) /tmp/cicero-BGQN/func.xml:8632(type) /tmp/cicero-BGQN/func.xml:8646(type) /tmp/cicero-BGQN/func.xml:10382(type) 
msgid "text[]"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1798(entry) /tmp/cicero-BGQN/func.xml:1815(entry) 
msgid "Split <placeholder-1/> using a POSIX regular expression as the delimiter. See <xref linkend=\"functions-posix-regexp\"/> for more information."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1803(literal) 
msgid "regexp_split_to_array('hello world', E'\\\\s+')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1804(literal) 
msgid "{hello,world}"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1810(primary) /tmp/cicero-BGQN/func.xml:3591(primary) 
msgid "regexp_split_to_table"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1812(function) 
msgid "regexp_split_to_table(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/> [, <placeholder-5/><placeholder-6/>])"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1814(type) /tmp/cicero-BGQN/func.xml:12427(type) /tmp/cicero-BGQN/func.xml:14586(type) 
msgid "setof text"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1820(literal) 
msgid "regexp_split_to_table('hello world', E'\\\\s+')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1821(literal) 
msgid "hello"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1821(literal) 
msgid "world"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1821(entry) 
msgid "<placeholder-1/><placeholder-2/> (2 rows)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1827(primary) 
msgid "repeat"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1829(parameter) /tmp/cicero-BGQN/func.xml:1833(parameter) /tmp/cicero-BGQN/func.xml:2000(parameter) /tmp/cicero-BGQN/func.xml:2004(parameter) 
msgid "number"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1829(function) 
msgid "repeat(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1832(entry) 
msgid "Repeat <placeholder-1/> the specified <placeholder-2/> of times"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1834(literal) 
msgid "repeat('Pg', 4)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1835(literal) 
msgid "PgPgPgPg"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1841(primary) 
msgid "replace"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1844(parameter) /tmp/cicero-BGQN/func.xml:1849(parameter) /tmp/cicero-BGQN/func.xml:1966(parameter) /tmp/cicero-BGQN/func.xml:1971(parameter) /tmp/cicero-BGQN/func.xml:2017(parameter) /tmp/cicero-BGQN/func.xml:2023(parameter) /tmp/cicero-BGQN/func.xml:2025(parameter) /tmp/cicero-BGQN/func.xml:2027(parameter) 
msgid "from"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1845(parameter) /tmp/cicero-BGQN/func.xml:1849(parameter) /tmp/cicero-BGQN/func.xml:2018(parameter) /tmp/cicero-BGQN/func.xml:2024(parameter) /tmp/cicero-BGQN/func.xml:2026(parameter) 
msgid "to"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1843(function) 
msgid "replace(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/>, <placeholder-5/><placeholder-6/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1848(entry) 
msgid "Replace all occurrences in <placeholder-1/> of substring <placeholder-2/> with substring <placeholder-3/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1851(literal) 
msgid "replace('abcdefabcdef', 'cd', 'XX')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1852(literal) 
msgid "abXXefabXXef"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1858(primary) /tmp/cicero-BGQN/func.xml:12248(parameter) 
msgid "reverse"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1860(function) 
msgid "reverse(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1863(entry) 
msgid "Return reversed string."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1866(literal) 
msgid "reverse('abcde')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1867(literal) 
msgid "edcba"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1873(primary) 
msgid "right"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1875(function) 
msgid "right(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1879(entry) 
msgid "Return last <placeholder-1/> characters in the string. When <placeholder-2/> is negative, return all but first |<placeholder-3/>| characters."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1883(literal) 
msgid "right('abcde', 2)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1884(literal) 
msgid "de"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1890(primary) 
msgid "rpad"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1892(function) 
msgid "rpad(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/><placeholder-5/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1897(entry) 
msgid "Fill up the <placeholder-1/> to length <placeholder-2/> by appending the characters <placeholder-3/> (a space by default). If the <placeholder-4/> is already longer than <placeholder-5/> then it is truncated."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1904(literal) 
msgid "rpad('hi', 5, 'xy')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1905(literal) 
msgid "hixyx"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1911(primary) 
msgid "rtrim"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1913(function) 
msgid "rtrim(<placeholder-1/><placeholder-2/><placeholder-3/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1917(entry) 
msgid "Remove the longest string containing only characters from <placeholder-1/> (a space by default) from the end of <placeholder-2/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1922(literal) 
msgid "rtrim('trimxxxx', 'x')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1929(primary) 
msgid "split_part"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1932(parameter) /tmp/cicero-BGQN/func.xml:1936(parameter) /tmp/cicero-BGQN/func.xml:10654(replaceable) 
msgid "delimiter"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1933(parameter) /tmp/cicero-BGQN/func.xml:6307(parameter) /tmp/cicero-BGQN/func.xml:6318(parameter) /tmp/cicero-BGQN/func.xml:6564(replaceable) 
msgid "field"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1931(function) 
msgid "split_part(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/>, <placeholder-5/><placeholder-6/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1936(entry) 
msgid "Split <placeholder-1/> on <placeholder-2/> and return the given field (counting from one)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1939(literal) 
msgid "split_part('abc~@~def~@~ghi', '~@~', 2)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1940(literal) 
msgid "def"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1946(primary) 
msgid "strpos"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1948(function) 
msgid "strpos(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1951(entry) 
msgid "Location of specified substring (same as <placeholder-1/>, but note the reversed argument order)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1957(literal) 
msgid "strpos('high', 'ig')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1964(primary) 
msgid "substr"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1966(optional) /tmp/cicero-BGQN/func.xml:8983(optional) /tmp/cicero-BGQN/func.xml:9262(optional) /tmp/cicero-BGQN/func.xml:9321(optional) /tmp/cicero-BGQN/func.xml:10311(optional) /tmp/cicero-BGQN/func.xml:10356(optional) /tmp/cicero-BGQN/func.xml:10379(optional) 
msgid ", <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1966(function) 
msgid "substr(<placeholder-1/>, <placeholder-2/><placeholder-3/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1969(entry) 
msgid "Extract substring (same as <placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1973(literal) 
msgid "substr('alphabet', 3, 2)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1974(literal) 
msgid "ph"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1980(primary) 
msgid "to_ascii"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1982(function) 
msgid "to_ascii(<placeholder-1/><placeholder-2/><placeholder-3/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1988(literal) /tmp/cicero-BGQN/func.xml:2199(literal) /tmp/cicero-BGQN/func.xml:2205(literal) /tmp/cicero-BGQN/func.xml:2386(literal) /tmp/cicero-BGQN/func.xml:2524(literal) 
msgid "LATIN1"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1988(literal) /tmp/cicero-BGQN/func.xml:2211(literal) /tmp/cicero-BGQN/func.xml:2217(literal) /tmp/cicero-BGQN/func.xml:2223(literal) /tmp/cicero-BGQN/func.xml:2392(literal) /tmp/cicero-BGQN/func.xml:2560(literal) /tmp/cicero-BGQN/func.xml:2704(literal) 
msgid "LATIN2"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1988(literal) /tmp/cicero-BGQN/func.xml:2187(literal) /tmp/cicero-BGQN/func.xml:2548(literal) 
msgid "LATIN9"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1989(literal) /tmp/cicero-BGQN/func.xml:2224(literal) /tmp/cicero-BGQN/func.xml:2428(literal) /tmp/cicero-BGQN/func.xml:2644(literal) /tmp/cicero-BGQN/func.xml:2703(literal) /tmp/cicero-BGQN/func.xml:2709(literal) /tmp/cicero-BGQN/func.xml:2715(literal) 
msgid "WIN1250"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1986(entry) 
msgid "Convert <placeholder-1/> to <placeholder-2/> from another encoding (only supports conversion from <placeholder-3/>, <placeholder-4/>, <placeholder-5/>, and <placeholder-6/> encodings)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1991(literal) 
msgid "to_ascii('Karel')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1992(literal) 
msgid "Karel"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:1998(primary) 
msgid "to_hex"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2001(type) /tmp/cicero-BGQN/func.xml:9641(type) /tmp/cicero-BGQN/func.xml:9647(type) /tmp/cicero-BGQN/func.xml:9653(type) /tmp/cicero-BGQN/func.xml:9657(type) /tmp/cicero-BGQN/func.xml:9658(type) /tmp/cicero-BGQN/func.xml:9662(type) /tmp/cicero-BGQN/func.xml:9663(type) /tmp/cicero-BGQN/func.xml:10500(type) /tmp/cicero-BGQN/func.xml:10519(type) /tmp/cicero-BGQN/func.xml:10536(type) /tmp/cicero-BGQN/func.xml:10585(type) /tmp/cicero-BGQN/func.xml:10592(type) /tmp/cicero-BGQN/func.xml:10675(type) /tmp/cicero-BGQN/func.xml:10680(type) /tmp/cicero-BGQN/func.xml:10682(type) /tmp/cicero-BGQN/func.xml:10913(type) /tmp/cicero-BGQN/func.xml:11052(type) /tmp/cicero-BGQN/func.xml:11075(type) /tmp/cicero-BGQN/func.xml:11098(type) /tmp/cicero-BGQN/func.xml:11117(type) /tmp/cicero-BGQN/func.xml:11140(type) /tmp/cicero-BGQN/func.xml:11163(type) /tmp/cicero-BGQN/func.xml:11229(type) /tmp/cicero-BGQN/func.xml:11242(type) /tmp/cicero-BGQN/func.xml:11255(type) /tmp/cicero-BGQN/func.xml:12136(type) /tmp/cicero-BGQN/func.xml:12146(type) /tmp/cicero-BGQN/func.xml:13673(type) /tmp/cicero-BGQN/func.xml:13688(type) /tmp/cicero-BGQN/func.xml:13693(type) /tmp/cicero-BGQN/func.xml:13697(parameter) /tmp/cicero-BGQN/func.xml:14353(type) /tmp/cicero-BGQN/func.xml:14360(type) /tmp/cicero-BGQN/func.xml:14367(type) /tmp/cicero-BGQN/func.xml:14376(type) /tmp/cicero-BGQN/func.xml:14387(type) /tmp/cicero-BGQN/func.xml:14394(type) /tmp/cicero-BGQN/func.xml:14403(type) /tmp/cicero-BGQN/func.xml:14413(type) /tmp/cicero-BGQN/func.xml:14420(type) /tmp/cicero-BGQN/func.xml:14427(type) /tmp/cicero-BGQN/func.xml:14591(type) /tmp/cicero-BGQN/func.xml:14591(type) /tmp/cicero-BGQN/func.xml:14598(type) /tmp/cicero-BGQN/func.xml:14598(type) /tmp/cicero-BGQN/func.xml:14683(type) /tmp/cicero-BGQN/func.xml:14697(type) /tmp/cicero-BGQN/func.xml:14711(type) /tmp/cicero-BGQN/func.xml:14732(type) /tmp/cicero-BGQN/func.xml:14746(type) /tmp/cicero-BGQN/func.xml:14760(type) /tmp/cicero-BGQN/func.xml:14774(type) /tmp/cicero-BGQN/func.xml:14788(type) /tmp/cicero-BGQN/func.xml:14802(type) /tmp/cicero-BGQN/func.xml:14816(type) 
msgid "bigint"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2000(function) 
msgid "to_hex(<placeholder-1/><placeholder-2/> or <placeholder-3/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2004(entry) 
msgid "Convert <placeholder-1/> to its equivalent hexadecimal representation"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2007(literal) 
msgid "to_hex(2147483647)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2008(literal) 
msgid "7fffffff"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2014(primary) 
msgid "translate"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2016(function) 
msgid "translate(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/>, <placeholder-5/><placeholder-6/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2021(entry) 
msgid "Any character in <placeholder-1/> that matches a character in the <placeholder-2/> set is replaced by the corresponding character in the <placeholder-3/> set. If <placeholder-4/> is longer than <placeholder-5/>, occurrences of the extra characters in <placeholder-6/> are removed."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2029(literal) 
msgid "translate('12345', '143', 'ax')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2030(literal) 
msgid "a2x5"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2037(para) 
msgid "See also the aggregate function <function>string_agg</function> in <xref linkend=\"functions-aggregate\"/>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2043(title) 
msgid "Built-in Conversions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2049(para) 
msgid "The conversion names follow a standard naming scheme: The official name of the source encoding with all non-alphanumeric characters replaced by underscores, followed by <literal>_to_</literal>, followed by the similarly processed destination encoding name. Therefore, the names might deviate from the customary encoding names."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2047(entry) 
msgid "Conversion Name <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2059(entry) 
msgid "Source Encoding"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2060(entry) 
msgid "Destination Encoding"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2066(literal) 
msgid "ascii_to_mic"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2068(literal) /tmp/cicero-BGQN/func.xml:2086(literal) /tmp/cicero-BGQN/func.xml:2098(literal) /tmp/cicero-BGQN/func.xml:2110(literal) /tmp/cicero-BGQN/func.xml:2128(literal) /tmp/cicero-BGQN/func.xml:2146(literal) /tmp/cicero-BGQN/func.xml:2200(literal) /tmp/cicero-BGQN/func.xml:2212(literal) /tmp/cicero-BGQN/func.xml:2230(literal) /tmp/cicero-BGQN/func.xml:2242(literal) /tmp/cicero-BGQN/func.xml:2260(literal) /tmp/cicero-BGQN/func.xml:2320(literal) /tmp/cicero-BGQN/func.xml:2349(literal) /tmp/cicero-BGQN/func.xml:2355(literal) /tmp/cicero-BGQN/func.xml:2361(literal) /tmp/cicero-BGQN/func.xml:2367(literal) /tmp/cicero-BGQN/func.xml:2373(literal) /tmp/cicero-BGQN/func.xml:2379(literal) /tmp/cicero-BGQN/func.xml:2385(literal) /tmp/cicero-BGQN/func.xml:2391(literal) /tmp/cicero-BGQN/func.xml:2397(literal) /tmp/cicero-BGQN/func.xml:2403(literal) /tmp/cicero-BGQN/func.xml:2409(literal) /tmp/cicero-BGQN/func.xml:2415(literal) /tmp/cicero-BGQN/func.xml:2421(literal) /tmp/cicero-BGQN/func.xml:2427(literal) /tmp/cicero-BGQN/func.xml:2433(literal) /tmp/cicero-BGQN/func.xml:2439(literal) /tmp/cicero-BGQN/func.xml:2452(literal) /tmp/cicero-BGQN/func.xml:2710(literal) /tmp/cicero-BGQN/func.xml:2734(literal) /tmp/cicero-BGQN/func.xml:2776(literal) 
msgid "MULE_INTERNAL"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2072(literal) 
msgid "ascii_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2078(literal) 
msgid "big5_to_euc_tw"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2079(literal) /tmp/cicero-BGQN/func.xml:2085(literal) /tmp/cicero-BGQN/func.xml:2091(literal) /tmp/cicero-BGQN/func.xml:2140(literal) /tmp/cicero-BGQN/func.xml:2356(literal) /tmp/cicero-BGQN/func.xml:2482(literal) 
msgid "BIG5"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2080(literal) /tmp/cicero-BGQN/func.xml:2139(literal) /tmp/cicero-BGQN/func.xml:2145(literal) /tmp/cicero-BGQN/func.xml:2151(literal) /tmp/cicero-BGQN/func.xml:2380(literal) /tmp/cicero-BGQN/func.xml:2506(literal) 
msgid "EUC_TW"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2084(literal) 
msgid "big5_to_mic"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2090(literal) 
msgid "big5_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2096(literal) 
msgid "euc_cn_to_mic"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2097(literal) /tmp/cicero-BGQN/func.xml:2103(literal) /tmp/cicero-BGQN/func.xml:2362(literal) /tmp/cicero-BGQN/func.xml:2488(literal) 
msgid "EUC_CN"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2102(literal) 
msgid "euc_cn_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2108(literal) 
msgid "euc_jp_to_mic"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2109(literal) /tmp/cicero-BGQN/func.xml:2115(literal) /tmp/cicero-BGQN/func.xml:2121(literal) /tmp/cicero-BGQN/func.xml:2368(literal) /tmp/cicero-BGQN/func.xml:2446(literal) /tmp/cicero-BGQN/func.xml:2494(literal) 
msgid "EUC_JP"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2114(literal) 
msgid "euc_jp_to_sjis"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2116(literal) /tmp/cicero-BGQN/func.xml:2422(literal) /tmp/cicero-BGQN/func.xml:2445(literal) /tmp/cicero-BGQN/func.xml:2451(literal) /tmp/cicero-BGQN/func.xml:2457(literal) /tmp/cicero-BGQN/func.xml:2626(literal) 
msgid "SJIS"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2120(literal) 
msgid "euc_jp_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2126(literal) 
msgid "euc_kr_to_mic"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2127(literal) /tmp/cicero-BGQN/func.xml:2133(literal) /tmp/cicero-BGQN/func.xml:2374(literal) /tmp/cicero-BGQN/func.xml:2500(literal) 
msgid "EUC_KR"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2132(literal) 
msgid "euc_kr_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2138(literal) 
msgid "euc_tw_to_big5"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2144(literal) 
msgid "euc_tw_to_mic"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2150(literal) 
msgid "euc_tw_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2156(literal) 
msgid "gb18030_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2157(literal) /tmp/cicero-BGQN/func.xml:2512(literal) 
msgid "GB18030"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2162(literal) 
msgid "gbk_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2163(literal) /tmp/cicero-BGQN/func.xml:2518(literal) 
msgid "GBK"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2168(literal) 
msgid "iso_8859_10_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2169(literal) /tmp/cicero-BGQN/func.xml:2530(literal) 
msgid "LATIN6"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2174(literal) 
msgid "iso_8859_13_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2175(literal) /tmp/cicero-BGQN/func.xml:2536(literal) 
msgid "LATIN7"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2180(literal) 
msgid "iso_8859_14_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2181(literal) /tmp/cicero-BGQN/func.xml:2542(literal) 
msgid "LATIN8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2186(literal) 
msgid "iso_8859_15_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2192(literal) 
msgid "iso_8859_16_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2193(literal) /tmp/cicero-BGQN/func.xml:2554(literal) 
msgid "LATIN10"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2198(literal) 
msgid "iso_8859_1_to_mic"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2204(literal) 
msgid "iso_8859_1_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2210(literal) 
msgid "iso_8859_2_to_mic"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2216(literal) 
msgid "iso_8859_2_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2222(literal) 
msgid "iso_8859_2_to_windows_1250"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2228(literal) 
msgid "iso_8859_3_to_mic"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2229(literal) /tmp/cicero-BGQN/func.xml:2235(literal) /tmp/cicero-BGQN/func.xml:2398(literal) /tmp/cicero-BGQN/func.xml:2566(literal) 
msgid "LATIN3"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2234(literal) 
msgid "iso_8859_3_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2240(literal) 
msgid "iso_8859_4_to_mic"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2241(literal) /tmp/cicero-BGQN/func.xml:2247(literal) /tmp/cicero-BGQN/func.xml:2404(literal) /tmp/cicero-BGQN/func.xml:2572(literal) 
msgid "LATIN4"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2246(literal) 
msgid "iso_8859_4_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2252(literal) 
msgid "iso_8859_5_to_koi8_r"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2253(literal) /tmp/cicero-BGQN/func.xml:2259(literal) /tmp/cicero-BGQN/func.xml:2265(literal) /tmp/cicero-BGQN/func.xml:2271(literal) /tmp/cicero-BGQN/func.xml:2277(literal) /tmp/cicero-BGQN/func.xml:2314(literal) /tmp/cicero-BGQN/func.xml:2410(literal) /tmp/cicero-BGQN/func.xml:2578(literal) /tmp/cicero-BGQN/func.xml:2722(literal) /tmp/cicero-BGQN/func.xml:2764(literal) 
msgid "ISO_8859_5"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2254(literal) /tmp/cicero-BGQN/func.xml:2313(literal) /tmp/cicero-BGQN/func.xml:2319(literal) /tmp/cicero-BGQN/func.xml:2325(literal) /tmp/cicero-BGQN/func.xml:2331(literal) /tmp/cicero-BGQN/func.xml:2337(literal) /tmp/cicero-BGQN/func.xml:2416(literal) /tmp/cicero-BGQN/func.xml:2614(literal) /tmp/cicero-BGQN/func.xml:2728(literal) /tmp/cicero-BGQN/func.xml:2770(literal) 
msgid "KOI8R"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2258(literal) 
msgid "iso_8859_5_to_mic"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2264(literal) 
msgid "iso_8859_5_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2270(literal) 
msgid "iso_8859_5_to_windows_1251"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2272(literal) /tmp/cicero-BGQN/func.xml:2332(literal) /tmp/cicero-BGQN/func.xml:2434(literal) /tmp/cicero-BGQN/func.xml:2650(literal) /tmp/cicero-BGQN/func.xml:2721(literal) /tmp/cicero-BGQN/func.xml:2727(literal) /tmp/cicero-BGQN/func.xml:2733(literal) /tmp/cicero-BGQN/func.xml:2739(literal) /tmp/cicero-BGQN/func.xml:2745(literal) 
msgid "WIN1251"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2276(literal) 
msgid "iso_8859_5_to_windows_866"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2278(literal) /tmp/cicero-BGQN/func.xml:2338(literal) /tmp/cicero-BGQN/func.xml:2440(literal) /tmp/cicero-BGQN/func.xml:2692(literal) /tmp/cicero-BGQN/func.xml:2746(literal) /tmp/cicero-BGQN/func.xml:2763(literal) /tmp/cicero-BGQN/func.xml:2769(literal) /tmp/cicero-BGQN/func.xml:2775(literal) /tmp/cicero-BGQN/func.xml:2781(literal) /tmp/cicero-BGQN/func.xml:2787(literal) 
msgid "WIN866"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2282(literal) 
msgid "iso_8859_6_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2283(literal) /tmp/cicero-BGQN/func.xml:2584(literal) 
msgid "ISO_8859_6"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2288(literal) 
msgid "iso_8859_7_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2289(literal) /tmp/cicero-BGQN/func.xml:2590(literal) 
msgid "ISO_8859_7"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2294(literal) 
msgid "iso_8859_8_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2295(literal) /tmp/cicero-BGQN/func.xml:2596(literal) 
msgid "ISO_8859_8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2300(literal) 
msgid "iso_8859_9_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2301(literal) /tmp/cicero-BGQN/func.xml:2602(literal) 
msgid "LATIN5"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2306(literal) 
msgid "johab_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2307(literal) /tmp/cicero-BGQN/func.xml:2608(literal) 
msgid "JOHAB"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2312(literal) 
msgid "koi8_r_to_iso_8859_5"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2318(literal) 
msgid "koi8_r_to_mic"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2324(literal) 
msgid "koi8_r_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2330(literal) 
msgid "koi8_r_to_windows_1251"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2336(literal) 
msgid "koi8_r_to_windows_866"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2342(literal) 
msgid "koi8_u_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2343(literal) /tmp/cicero-BGQN/func.xml:2620(literal) 
msgid "KOI8U"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2348(literal) 
msgid "mic_to_ascii"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2354(literal) 
msgid "mic_to_big5"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2360(literal) 
msgid "mic_to_euc_cn"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2366(literal) 
msgid "mic_to_euc_jp"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2372(literal) 
msgid "mic_to_euc_kr"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2378(literal) 
msgid "mic_to_euc_tw"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2384(literal) 
msgid "mic_to_iso_8859_1"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2390(literal) 
msgid "mic_to_iso_8859_2"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2396(literal) 
msgid "mic_to_iso_8859_3"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2402(literal) 
msgid "mic_to_iso_8859_4"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2408(literal) 
msgid "mic_to_iso_8859_5"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2414(literal) 
msgid "mic_to_koi8_r"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2420(literal) 
msgid "mic_to_sjis"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2426(literal) 
msgid "mic_to_windows_1250"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2432(literal) 
msgid "mic_to_windows_1251"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2438(literal) 
msgid "mic_to_windows_866"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2444(literal) 
msgid "sjis_to_euc_jp"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2450(literal) 
msgid "sjis_to_mic"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2456(literal) 
msgid "sjis_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2462(literal) 
msgid "tcvn_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2463(literal) /tmp/cicero-BGQN/func.xml:2632(literal) 
msgid "WIN1258"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2468(literal) 
msgid "uhc_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2469(literal) /tmp/cicero-BGQN/func.xml:2638(literal) 
msgid "UHC"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2474(literal) 
msgid "utf8_to_ascii"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2480(literal) 
msgid "utf8_to_big5"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2486(literal) 
msgid "utf8_to_euc_cn"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2492(literal) 
msgid "utf8_to_euc_jp"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2498(literal) 
msgid "utf8_to_euc_kr"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2504(literal) 
msgid "utf8_to_euc_tw"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2510(literal) 
msgid "utf8_to_gb18030"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2516(literal) 
msgid "utf8_to_gbk"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2522(literal) 
msgid "utf8_to_iso_8859_1"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2528(literal) 
msgid "utf8_to_iso_8859_10"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2534(literal) 
msgid "utf8_to_iso_8859_13"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2540(literal) 
msgid "utf8_to_iso_8859_14"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2546(literal) 
msgid "utf8_to_iso_8859_15"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2552(literal) 
msgid "utf8_to_iso_8859_16"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2558(literal) 
msgid "utf8_to_iso_8859_2"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2564(literal) 
msgid "utf8_to_iso_8859_3"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2570(literal) 
msgid "utf8_to_iso_8859_4"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2576(literal) 
msgid "utf8_to_iso_8859_5"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2582(literal) 
msgid "utf8_to_iso_8859_6"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2588(literal) 
msgid "utf8_to_iso_8859_7"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2594(literal) 
msgid "utf8_to_iso_8859_8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2600(literal) 
msgid "utf8_to_iso_8859_9"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2606(literal) 
msgid "utf8_to_johab"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2612(literal) 
msgid "utf8_to_koi8_r"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2618(literal) 
msgid "utf8_to_koi8_u"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2624(literal) 
msgid "utf8_to_sjis"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2630(literal) 
msgid "utf8_to_tcvn"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2636(literal) 
msgid "utf8_to_uhc"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2642(literal) 
msgid "utf8_to_windows_1250"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2648(literal) 
msgid "utf8_to_windows_1251"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2654(literal) 
msgid "utf8_to_windows_1252"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2656(literal) /tmp/cicero-BGQN/func.xml:2751(literal) 
msgid "WIN1252"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2660(literal) 
msgid "utf8_to_windows_1253"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2662(literal) 
msgid "WIN1253"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2666(literal) 
msgid "utf8_to_windows_1254"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2668(literal) 
msgid "WIN1254"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2672(literal) 
msgid "utf8_to_windows_1255"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2674(literal) 
msgid "WIN1255"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2678(literal) 
msgid "utf8_to_windows_1256"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2680(literal) /tmp/cicero-BGQN/func.xml:2757(literal) 
msgid "WIN1256"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2684(literal) 
msgid "utf8_to_windows_1257"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2686(literal) 
msgid "WIN1257"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2690(literal) 
msgid "utf8_to_windows_866"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2696(literal) 
msgid "utf8_to_windows_874"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2698(literal) /tmp/cicero-BGQN/func.xml:2793(literal) 
msgid "WIN874"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2702(literal) 
msgid "windows_1250_to_iso_8859_2"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2708(literal) 
msgid "windows_1250_to_mic"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2714(literal) 
msgid "windows_1250_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2720(literal) 
msgid "windows_1251_to_iso_8859_5"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2726(literal) 
msgid "windows_1251_to_koi8_r"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2732(literal) 
msgid "windows_1251_to_mic"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2738(literal) 
msgid "windows_1251_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2744(literal) 
msgid "windows_1251_to_windows_866"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2750(literal) 
msgid "windows_1252_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2756(literal) 
msgid "windows_1256_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2762(literal) 
msgid "windows_866_to_iso_8859_5"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2768(literal) 
msgid "windows_866_to_koi8_r"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2774(literal) 
msgid "windows_866_to_mic"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2780(literal) 
msgid "windows_866_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2786(literal) 
msgid "windows_866_to_windows_1251"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2788(literal) 
msgid "WIN"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2792(literal) 
msgid "windows_874_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2798(literal) 
msgid "euc_jis_2004_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2799(literal) /tmp/cicero-BGQN/func.xml:2806(literal) /tmp/cicero-BGQN/func.xml:2823(literal) /tmp/cicero-BGQN/func.xml:2830(literal) 
msgid "EUC_JIS_2004"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2804(literal) 
msgid "ut8_to_euc_jis_2004"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2810(literal) 
msgid "shift_jis_2004_to_utf8"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2811(literal) /tmp/cicero-BGQN/func.xml:2818(literal) /tmp/cicero-BGQN/func.xml:2824(literal) /tmp/cicero-BGQN/func.xml:2829(literal) 
msgid "SHIFT_JIS_2004"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2816(literal) 
msgid "ut8_to_shift_jis_2004"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2822(literal) 
msgid "euc_jis_2004_to_shift_jis_2004"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2828(literal) 
msgid "shift_jis_2004_to_euc_jis_2004"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2841(title) 
msgid "Binary String Functions and Operators"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2844(primary) 
msgid "binary data"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2845(secondary) /tmp/cicero-BGQN/func.xml:3172(secondary) /tmp/cicero-BGQN/func.xml:12107(secondary) /tmp/cicero-BGQN/func.xml:13824(tertiary) 
msgid "functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2848(para) 
msgid "This section describes functions and operators for examining and manipulating values of type <type>bytea</type>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2853(para) 
msgid "<acronym>SQL</acronym> defines some string functions that use key words, rather than commas, to separate arguments. Details are in <xref linkend=\"functions-binarystring-sql\"/>. <productname>PostgreSQL</productname> also provides versions of these functions that use the regular function invocation syntax (see <xref linkend=\"functions-binarystring-other\"/>)."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2864(para) 
msgid "The sample results shown on this page assume that the server parameter <link linkend=\"guc-bytea-output\"><varname>bytea_output</varname></link> is set to <literal>escape</literal> (the traditional PostgreSQL format)."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2872(title) 
msgid "<acronym>SQL</acronym> Binary String Functions and Operators"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2892(primary) /tmp/cicero-BGQN/func.xml:3093(primary) 
msgid "binary string"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2896(literal) 
msgid "E'\\\\\\\\Post'::bytea || E'\\\\047gres\\\\000'::bytea"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2897(literal) 
msgid "\\\\Post'gres\\000"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2908(entry) 
msgid "Number of bytes in binary string"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2909(literal) 
msgid "octet_length(E'jo\\\\000se'::bytea)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2924(literal) 
msgid "overlay(E'Th\\\\000omas'::bytea placing E'\\\\002\\\\003'::bytea from 2 for 3)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2925(literal) 
msgid "T\\\\002\\\\003mas"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2937(literal) 
msgid "position(E'\\\\000om'::bytea in E'Th\\\\000omas'::bytea)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2952(literal) 
msgid "substring(E'Th\\\\000omas'::bytea from 2 for 3)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2953(literal) 
msgid "h\\000o"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2961(optional) 
msgid "both"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2962(parameter) /tmp/cicero-BGQN/func.xml:2968(parameter) /tmp/cicero-BGQN/func.xml:3006(parameter) /tmp/cicero-BGQN/func.xml:3011(parameter) 
msgid "bytes"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2961(function) 
msgid "trim(<placeholder-1/><placeholder-2/> from <placeholder-3/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2966(entry) 
msgid "Remove the longest string containing only the bytes in <placeholder-1/> from the start and end of <placeholder-2/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2971(literal) 
msgid "trim(E'\\\\000'::bytea from E'\\\\000Tom\\\\000'::bytea)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2978(para) 
msgid "Additional binary string manipulation functions are available and are listed in <xref linkend=\"functions-binarystring-other\"/>. Some of them are used internally to implement the <acronym>SQL</acronym>-standard string functions listed in <xref linkend=\"functions-binarystring-sql\"/>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:2987(title) 
msgid "Other Binary String Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3005(function) 
msgid "btrim(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3009(entry) 
msgid "Remove the longest string consisting only of bytes in <placeholder-1/> from the start and end of <placeholder-2/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3014(literal) 
msgid "btrim(E'\\\\000trim\\\\000'::bytea, E'\\\\000'::bytea)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3024(parameter) /tmp/cicero-BGQN/func.xml:3041(parameter) 
msgid "type"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3027(entry) 
msgid "Decode binary string from <placeholder-1/> previously encoded with <placeholder-2/>. Parameter type is same as in <placeholder-3/>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3031(literal) 
msgid "decode(E'123\\\\000456', 'escape')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3032(literal) /tmp/cicero-BGQN/func.xml:3049(literal) 
msgid "123\\000456"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3044(entry) 
msgid "Encode binary string to <placeholder-1/>-only representation. Supported types are: <placeholder-2/>, <placeholder-3/>, <placeholder-4/>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3048(literal) 
msgid "encode(E'123\\\\000456'::bytea, 'escape')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3055(primary) 
msgid "get_bit"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3057(parameter) /tmp/cicero-BGQN/func.xml:3072(parameter) /tmp/cicero-BGQN/func.xml:3128(parameter) /tmp/cicero-BGQN/func.xml:3144(parameter) /tmp/cicero-BGQN/func.xml:11307(replaceable) /tmp/cicero-BGQN/func.xml:11316(replaceable) /tmp/cicero-BGQN/func.xml:11319(replaceable) /tmp/cicero-BGQN/func.xml:11322(replaceable) /tmp/cicero-BGQN/func.xml:11334(replaceable) /tmp/cicero-BGQN/func.xml:11343(replaceable) /tmp/cicero-BGQN/func.xml:11346(replaceable) /tmp/cicero-BGQN/func.xml:11349(replaceable) /tmp/cicero-BGQN/func.xml:14591(parameter) /tmp/cicero-BGQN/func.xml:14598(parameter) 
msgid "offset"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3057(function) 
msgid "get_bit(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3060(entry) 
msgid "Extract bit from string"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3063(literal) 
msgid "get_bit(E'Th\\\\000omas'::bytea, 45)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3070(primary) 
msgid "get_byte"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3072(function) 
msgid "get_byte(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3075(entry) 
msgid "Extract byte from string"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3078(literal) 
msgid "get_byte(E'Th\\\\000omas'::bytea, 4)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3079(literal) 
msgid "109"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3098(secondary) 
msgid "of a binary string"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3099(see) 
msgid "binary strings, length"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3090(entry) 
msgid "Length of binary string <indexterm><placeholder-1/><placeholder-2/></indexterm><indexterm><placeholder-3/><placeholder-4/><placeholder-5/></indexterm>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3102(literal) 
msgid "length(E'jo\\\\000se'::bytea)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3118(literal) 
msgid "md5(E'Th\\\\000omas'::bytea)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3119(literal) 
msgid "8ab2d3c9689aaf18 b4958c334c82d8b1"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3125(primary) 
msgid "set_bit"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3128(parameter) /tmp/cicero-BGQN/func.xml:3144(parameter) 
msgid "newvalue"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3127(function) 
msgid "set_bit(<placeholder-1/>, <placeholder-2/>, <placeholder-3/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3131(entry) 
msgid "Set bit in string"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3134(literal) 
msgid "set_bit(E'Th\\\\000omas'::bytea, 45, 0)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3135(literal) 
msgid "Th\\000omAs"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3141(primary) 
msgid "set_byte"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3143(function) 
msgid "set_byte(<placeholder-1/>, <placeholder-2/>, <placeholder-3/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3147(entry) 
msgid "Set byte in string"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3150(literal) 
msgid "set_byte(E'Th\\\\000omas'::bytea, 4, 64)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3151(literal) 
msgid "Th\\000o@as"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3157(para) 
msgid "<function>get_byte</function> and <function>set_byte</function> number the first byte of a binary string as byte 0. <function>get_bit</function> and <function>set_bit</function> number bits from the right within each byte; for example bit 0 is the least significant bit of the first byte, and bit 15 is the most significant bit of the second byte."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3168(title) 
msgid "Bit String Functions and Operators"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3171(primary) 
msgid "bit strings"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3175(para) 
msgid "This section describes functions and operators for examining and manipulating bit strings, that is values of the types <type>bit</type> and <type>bit varying</type>. Aside from the usual comparison operators, the operators shown in <xref linkend=\"functions-bit-string-op-table\"/> can be used. Bit string operands of <literal>&amp;</literal>, <literal>|</literal>, and <literal>#</literal> must be of equal length. When bit shifting, the original length of the string is preserved, as shown in the examples."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3188(title) 
msgid "Bit String Operators"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3204(literal) 
msgid "B'10001' || B'011'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3205(literal) 
msgid "10001011"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3211(literal) 
msgid "B'10001' &amp; B'01101'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3212(literal) 
msgid "00001"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3218(literal) 
msgid "B'10001' | B'01101'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3219(literal) 
msgid "11101"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3225(literal) 
msgid "B'10001' # B'01101'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3226(literal) 
msgid "11100"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3232(literal) 
msgid "~ B'10001'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3233(literal) 
msgid "01110"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3239(literal) 
msgid "B'10001' &lt;&lt; 3"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3240(literal) 
msgid "01000"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3246(literal) 
msgid "B'10001' &gt;&gt; 2"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3247(literal) 
msgid "00100"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3253(para) 
msgid "The following <acronym>SQL</acronym>-standard functions work on bit strings as well as character strings: <literal><function>length</function></literal>, <literal><function>bit_length</function></literal>, <literal><function>octet_length</function></literal>, <literal><function>position</function></literal>, <literal><function>substring</function></literal>, <literal><function>overlay</function></literal>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3264(para) 
msgid "The following functions work on bit strings as well as binary strings: <literal><function>get_bit</function></literal>, <literal><function>set_bit</function></literal>. When working with a bit string, these functions number the first (leftmost) bit of the string as bit 0."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3277(programlisting) 
#, no-wrap
msgid "\n44::bit(10)                    <lineannotation>0000101100</lineannotation>\n44::bit(3)                     <lineannotation>100</lineannotation>\ncast(-44 as bit(12))           <lineannotation>111111010100</lineannotation>\n'1110'::bit(4)::integer        <lineannotation>14</lineannotation>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3273(para) 
msgid "In addition, it is possible to cast integral values to and from type <type>bit</type>. Some examples: <placeholder-1/> Note that casting to just <quote>bit</quote> means casting to <literal>bit(1)</literal>, and so will deliver only the least significant bit of the integer."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3289(para) 
msgid "Prior to <productname>PostgreSQL</productname> 8.0, casting an integer to <type>bit(n)</type> would copy the leftmost <literal>n</literal> bits of the integer, whereas now it copies the rightmost <literal>n</literal> bits. Also, casting an integer to a bit string width wider than the integer itself will sign-extend on the left."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3302(title) 
msgid "Pattern Matching"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3305(primary) /tmp/cicero-BGQN/func.xml:3579(seealso) 
msgid "pattern matching"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3308(para) 
msgid "There are three separate approaches to pattern matching provided by <productname>PostgreSQL</productname>: the traditional <acronym>SQL</acronym><function>LIKE</function> operator, the more recent <function>SIMILAR TO</function> operator (added in SQL:1999), and <acronym>POSIX</acronym>-style regular expressions. Aside from the basic <quote>does this string match this pattern?</quote> operators, functions are available to extract or replace matching substrings and to split a string at matching locations."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3321(para) 
msgid "If you have pattern matching needs that go beyond this, consider writing a user-defined function in Perl or Tcl."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3328(function) /tmp/cicero-BGQN/func.xml:3331(primary) 
msgid "LIKE"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3335(replaceable) /tmp/cicero-BGQN/func.xml:3336(replaceable) /tmp/cicero-BGQN/func.xml:3440(replaceable) /tmp/cicero-BGQN/func.xml:3441(replaceable) 
msgid "escape-character"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3335(optional) /tmp/cicero-BGQN/func.xml:3336(optional) /tmp/cicero-BGQN/func.xml:3440(optional) /tmp/cicero-BGQN/func.xml:3441(optional) 
msgid "ESCAPE <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3334(synopsis) 
#, no-wrap
msgid "\n<placeholder-1/> LIKE <placeholder-2/> <placeholder-3/>\n<placeholder-4/> NOT LIKE <placeholder-5/> <placeholder-6/>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3339(para) 
msgid "The <function>LIKE</function> expression returns true if the <replaceable>string</replaceable> matches the supplied <replaceable>pattern</replaceable>. (As expected, the <function>NOT LIKE</function> expression returns false if <function>LIKE</function> returns true, and vice versa. An equivalent expression is <literal>NOT (<replaceable>string</replaceable> LIKE <replaceable>pattern</replaceable>)</literal>.)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3350(para) 
msgid "If <replaceable>pattern</replaceable> does not contain percent signs or underscores, then the pattern only represents the string itself; in that case <function>LIKE</function> acts like the equals operator. An underscore (<literal>_</literal>) in <replaceable>pattern</replaceable> stands for (matches) any single character; a percent sign (<literal>%</literal>) matches any sequence of zero or more characters."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3362(programlisting) 
#, no-wrap
msgid "\n'abc' LIKE 'abc'    <lineannotation>true</lineannotation>\n'abc' LIKE 'a%'     <lineannotation>true</lineannotation>\n'abc' LIKE '_b_'    <lineannotation>true</lineannotation>\n'abc' LIKE 'c'      <lineannotation>false</lineannotation>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3360(para) /tmp/cicero-BGQN/func.xml:3539(para) /tmp/cicero-BGQN/func.xml:3666(para) /tmp/cicero-BGQN/func.xml:3698(para) /tmp/cicero-BGQN/func.xml:3734(para) /tmp/cicero-BGQN/func.xml:3771(para) /tmp/cicero-BGQN/func.xml:3830(para) 
msgid "Some examples: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3370(para) 
msgid "<function>LIKE</function> pattern matching always covers the entire string. Therefore, to match a sequence anywhere within a string, the pattern must start and end with a percent sign."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3376(para) 
msgid "To match a literal underscore or percent sign without matching other characters, the respective character in <replaceable>pattern</replaceable> must be preceded by the escape character. The default escape character is the backslash but a different one can be selected by using the <literal>ESCAPE</literal> clause. To match the escape character itself, write two escape characters."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3386(para) 
msgid "Note that the backslash already has a special meaning in string literals, so to write a pattern constant that contains a backslash you must write two backslashes in an SQL statement (assuming escape string syntax is used, see <xref linkend=\"sql-syntax-strings\"/>). Thus, writing a pattern that actually matches a literal backslash means writing four backslashes in the statement. You can avoid this by selecting a different escape character with <literal>ESCAPE</literal>; then a backslash is not special to <function>LIKE</function> anymore. (But backslash is still special to the string literal parser, so you still need two of them to match a backslash.)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3398(para) 
msgid "It's also possible to select no escape character by writing <literal>ESCAPE ''</literal>. This effectively disables the escape mechanism, which makes it impossible to turn off the special meaning of underscore and percent signs in the pattern."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3405(para) 
msgid "The key word <token>ILIKE</token> can be used instead of <token>LIKE</token> to make the match case-insensitive according to the active locale. This is not in the <acronym>SQL</acronym> standard but is a <productname>PostgreSQL</productname> extension."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3412(para) 
msgid "The operator <literal>~~</literal> is equivalent to <function>LIKE</function>, and <literal>~~*</literal> corresponds to <function>ILIKE</function>. There are also <literal>!~~</literal> and <literal>!~~*</literal> operators that represent <function>NOT LIKE</function> and <function>NOT ILIKE</function>, respectively. All of these operators are <productname>PostgreSQL</productname>-specific."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3425(title) 
msgid "<function>SIMILAR TO</function> Regular Expressions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3428(primary) /tmp/cicero-BGQN/func.xml:3578(primary) 
msgid "regular expression"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3433(primary) 
msgid "SIMILAR TO"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3439(synopsis) 
#, no-wrap
msgid "\n<placeholder-1/> SIMILAR TO <placeholder-2/> <placeholder-3/>\n<placeholder-4/> NOT SIMILAR TO <placeholder-5/> <placeholder-6/>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3444(para) 
msgid "The <function>SIMILAR TO</function> operator returns true or false depending on whether its pattern matches the given string. It is similar to <function>LIKE</function>, except that it interprets the pattern using the SQL standard's definition of a regular expression. SQL regular expressions are a curious cross between <function>LIKE</function> notation and common regular expression notation."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3454(para) 
msgid "Like <function>LIKE</function>, the <function>SIMILAR TO</function> operator succeeds only if its pattern matches the entire string; this is unlike common regular expression behavior where the pattern can match any part of the string. Also like <function>LIKE</function>, <function>SIMILAR TO</function> uses <literal>_</literal> and <literal>%</literal> as wildcard characters denoting any single character and any string, respectively (these are comparable to <literal>.</literal> and <literal>.*</literal> in POSIX regular expressions)."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3474(para) 
msgid "<literal>|</literal> denotes alternation (either of two alternatives)."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3479(para) 
msgid "<literal>*</literal> denotes repetition of the previous item zero or more times."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3485(para) 
msgid "<literal>+</literal> denotes repetition of the previous item one or more times."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3491(para) 
msgid "<literal>?</literal> denotes repetition of the previous item zero or one time."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3497(para) 
msgid "<literal>{</literal><replaceable>m</replaceable><literal>}</literal> denotes repetition of the previous item exactly <replaceable>m</replaceable> times."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3503(para) 
msgid "<literal>{</literal><replaceable>m</replaceable><literal>,}</literal> denotes repetition of the previous item <replaceable>m</replaceable> or more times."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3509(para) 
msgid "<literal>{</literal><replaceable>m</replaceable><literal>,</literal><replaceable>n</replaceable><literal>}</literal> denotes repetition of the previous item at least <replaceable>m</replaceable> and not more than <replaceable>n</replaceable> times."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3516(para) 
msgid "Parentheses <literal>()</literal> can be used to group items into a single logical item."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3522(para) 
msgid "A bracket expression <literal>[...]</literal> specifies a character class, just as in POSIX regular expressions."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3467(para) 
msgid "In addition to these facilities borrowed from <function>LIKE</function>, <function>SIMILAR TO</function> supports these pattern-matching metacharacters borrowed from POSIX regular expressions: <placeholder-1/> Notice that the period (<literal>.</literal>) is not a metacharacter for <function>SIMILAR TO</function>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3533(para) 
msgid "As with <function>LIKE</function>, a backslash disables the special meaning of any of these metacharacters; or a different escape character can be specified with <literal>ESCAPE</literal>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3541(programlisting) 
#, no-wrap
msgid "\n'abc' SIMILAR TO 'abc'      <lineannotation>true</lineannotation>\n'abc' SIMILAR TO 'a'        <lineannotation>false</lineannotation>\n'abc' SIMILAR TO '%(b|d)%'  <lineannotation>true</lineannotation>\n'abc' SIMILAR TO '(b|c)%'   <lineannotation>false</lineannotation>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3549(para) 
msgid "The <function>substring</function> function with three parameters, <function>substring(<replaceable>string</replaceable> from <replaceable>pattern</replaceable> for <replaceable>escape-character</replaceable>)</function>, provides extraction of a substring that matches an SQL regular expression pattern. As with <literal>SIMILAR TO</literal>, the specified pattern must match the entire data string, or else the function fails and returns null. To indicate the part of the pattern that should be returned on success, the pattern must contain two occurrences of the escape character followed by a double quote (<literal>\"</literal>). The text matching the portion of the pattern between these markers is returned."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3567(programlisting) 
#, no-wrap
msgid "\nsubstring('foobar' from '%#\"o_b#\"%' for '#')   <lineannotation>oob</lineannotation>\nsubstring('foobar' from '#\"o_b#\"%' for '#')    <lineannotation>NULL</lineannotation>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3565(para) 
msgid "Some examples, with <literal>#&quot;</literal> delimiting the return string: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3575(title) 
msgid "<acronym>POSIX</acronym> Regular Expressions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3597(para) 
msgid "<xref linkend=\"functions-posix-table\"/> lists the available operators for pattern matching using POSIX regular expressions."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3603(title) 
msgid "Regular Expression Match Operators"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3617(entry) 
msgid "Matches regular expression, case sensitive"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3618(literal) 
msgid "'thomas' ~ '.*thomas.*'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3622(literal) 
msgid "~*"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3623(entry) 
msgid "Matches regular expression, case insensitive"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3624(literal) 
msgid "'thomas' ~* '.*Thomas.*'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3628(literal) 
msgid "!~"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3629(entry) 
msgid "Does not match regular expression, case sensitive"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3630(literal) 
msgid "'thomas' !~ '.*Thomas.*'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3634(literal) 
msgid "!~*"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3635(entry) 
msgid "Does not match regular expression, case insensitive"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3636(literal) 
msgid "'thomas' !~* '.*vadim.*'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3642(para) 
msgid "<acronym>POSIX</acronym> regular expressions provide a more powerful means for pattern matching than the <function>LIKE</function> and <function>SIMILAR TO</function> operators. Many Unix tools such as <command>egrep</command>, <command>sed</command>, or <command>awk</command> use a pattern matching language that is similar to the one described here."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3651(para) 
msgid "A regular expression is a character sequence that is an abbreviated definition of a set of strings (a <firstterm>regular set</firstterm>). A string is said to match a regular expression if it is a member of the regular set described by the regular expression. As with <function>LIKE</function>, pattern characters match string characters exactly unless they are special characters in the regular expression language — but regular expressions use different special characters than <function>LIKE</function> does. Unlike <function>LIKE</function> patterns, a regular expression is allowed to match anywhere within a string, unless the regular expression is explicitly anchored to the beginning or end of the string."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3668(programlisting) 
#, no-wrap
msgid "\n'abc' ~ 'abc'    <lineannotation>true</lineannotation>\n'abc' ~ '^a'     <lineannotation>true</lineannotation>\n'abc' ~ '(b|d)'  <lineannotation>true</lineannotation>\n'abc' ~ '^(b|c)' <lineannotation>false</lineannotation>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3676(para) 
msgid "The <acronym>POSIX</acronym> pattern language is described in much greater detail below."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3681(para) 
msgid "The <function>substring</function> function with two parameters, <function>substring(<replaceable>string</replaceable> from <replaceable>pattern</replaceable>)</function>, provides extraction of a substring that matches a POSIX regular expression pattern. It returns null if there is no match, otherwise the portion of the text that matched the pattern. But if the pattern contains any parentheses, the portion of the text that matched the first parenthesized subexpression (the one whose left parenthesis comes first) is returned. You can put parentheses around the whole expression if you want to use parentheses within it without triggering this exception. If you need parentheses in the pattern before the subexpression you want to extract, see the non-capturing parentheses described below."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3700(programlisting) 
#, no-wrap
msgid "\nsubstring('foobar' from 'o.b')     <lineannotation>oob</lineannotation>\nsubstring('foobar' from 'o(.)b')   <lineannotation>o</lineannotation>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3706(para) 
msgid "The <function>regexp_replace</function> function provides substitution of new text for substrings that match POSIX regular expression patterns. It has the syntax <function>regexp_replace</function>(<replaceable>source</replaceable>, <replaceable>pattern</replaceable>, <replaceable>replacement</replaceable><optional>, <replaceable>flags</replaceable></optional>). The <replaceable>source</replaceable> string is returned unchanged if there is no match to the <replaceable>pattern</replaceable>. If there is a match, the <replaceable>source</replaceable> string is returned with the <replaceable>replacement</replaceable> string substituted for the matching substring. The <replaceable>replacement</replaceable> string can contain <literal>\\</literal><replaceable>n</replaceable>, where <replaceable>n</replaceable> is 1 through 9, to indicate that the source substring matching the <replaceable>n</replaceable>'th parenthesized subexpression of the pattern should be inserted, and it can contain <literal>\\&amp;</literal> to indicate that the substring matching the entire pattern should be inserted. Write <literal>\\\\</literal> if you need to put a literal backslash in the replacement text. (As always, remember to double backslashes written in literal constant strings, assuming escape string syntax is used.) The <replaceable>flags</replaceable> parameter is an optional text string containing zero or more single-letter flags that change the function's behavior. Flag <literal>i</literal> specifies case-insensitive matching, while flag <literal>g</literal> specifies replacement of each matching substring rather than only the first one. Other supported flags are described in <xref linkend=\"posix-embedded-options-table\"/>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3736(programlisting) 
#, no-wrap
msgid "\nregexp_replace('foobarbaz', 'b..', 'X')\n                                   <lineannotation>fooXbaz</lineannotation>\nregexp_replace('foobarbaz', 'b..', 'X', 'g')\n                                   <lineannotation>fooXX</lineannotation>\nregexp_replace('foobarbaz', 'b(..)', E'X\\\\1Y', 'g')\n                                   <lineannotation>fooXarYXazY</lineannotation>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3746(para) 
msgid "The <function>regexp_matches</function> function returns a text array of all of the captured substrings resulting from matching a POSIX regular expression pattern. It has the syntax <function>regexp_matches</function>(<replaceable>string</replaceable>, <replaceable>pattern</replaceable><optional>, <replaceable>flags</replaceable></optional>). The function can return no rows, one row, or multiple rows (see the <literal>g</literal> flag below). If the <replaceable>pattern</replaceable> does not match, the function returns no rows. If the pattern contains no parenthesized subexpressions, then each row returned is a single-element text array containing the substring matching the whole pattern. If the pattern contains parenthesized subexpressions, the function returns a text array whose <replaceable>n</replaceable>'th element is the substring matching the <replaceable>n</replaceable>'th parenthesized subexpression of the pattern (not counting <quote>non-capturing</quote> parentheses; see below for details). The <replaceable>flags</replaceable> parameter is an optional text string containing zero or more single-letter flags that change the function's behavior. Flag <literal>g</literal> causes the function to find each match in the string, not only the first one, and return a row for each such match. Other supported flags are described in <xref linkend=\"posix-embedded-options-table\"/>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3773(programlisting) 
#, no-wrap
msgid "\nSELECT regexp_matches('foobarbequebaz', '(bar)(beque)');\n regexp_matches \n----------------\n {bar,beque}\n(1 row)\n\nSELECT regexp_matches('foobarbequebazilbarfbonk', '(b[^b]+)(b[^b]+)', 'g');\n regexp_matches \n----------------\n {bar,beque}\n {bazil,barf}\n(2 rows)\n\nSELECT regexp_matches('foobarbequebaz', 'barbeque');\n regexp_matches \n----------------\n {barbeque}\n(1 row)\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3800(programlisting) 
#, no-wrap
msgid "\nSELECT col1, (SELECT regexp_matches(col2, '(bar)(beque)')) FROM tab;\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3795(para) 
msgid "It is possible to force <function>regexp_matches()</function> to always return one row by using a sub-select; this is particularly useful in a <literal>SELECT</literal> target list when you want all rows returned, even non-matching ones: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3805(para) 
msgid "The <function>regexp_split_to_table</function> function splits a string using a POSIX regular expression pattern as a delimiter. It has the syntax <function>regexp_split_to_table</function>(<replaceable>string</replaceable>, <replaceable>pattern</replaceable><optional>, <replaceable>flags</replaceable></optional>). If there is no match to the <replaceable>pattern</replaceable>, the function returns the <replaceable>string</replaceable>. If there is at least one match, for each match it returns the text from the end of the last match (or the beginning of the string) to the beginning of the match. When there are no more matches, it returns the text from the end of the last match to the end of the string. The <replaceable>flags</replaceable> parameter is an optional text string containing zero or more single-letter flags that change the function's behavior. <function>regexp_split_to_table</function> supports the flags described in <xref linkend=\"posix-embedded-options-table\"/>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3821(para) 
msgid "The <function>regexp_split_to_array</function> function behaves the same as <function>regexp_split_to_table</function>, except that <function>regexp_split_to_array</function> returns its result as an array of <type>text</type>. It has the syntax <function>regexp_split_to_array</function>(<replaceable>string</replaceable>, <replaceable>pattern</replaceable><optional>, <replaceable>flags</replaceable></optional>). The parameters are the same as for <function>regexp_split_to_table</function>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3832(programlisting) 
#, no-wrap
msgid "\n\nSELECT foo FROM regexp_split_to_table('the quick brown fox jumped over the lazy dog', E'\\\\s+') AS foo;\n  foo   \n--------\n the    \n quick  \n brown  \n fox    \n jumped \n over   \n the    \n lazy   \n dog    \n(9 rows)\n\nSELECT regexp_split_to_array('the quick brown fox jumped over the lazy dog', E'\\\\s+');\n              regexp_split_to_array             \n------------------------------------------------\n {the,quick,brown,fox,jumped,over,the,lazy,dog}\n(1 row)\n\nSELECT foo FROM regexp_split_to_table('the quick brown fox', E'\\\\s*') AS foo;\n foo \n-----\n t         \n h         \n e         \n q         \n u         \n i         \n c         \n k         \n b         \n r         \n o         \n w         \n n         \n f         \n o         \n x         \n(16 rows)\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3877(para) 
msgid "As the last example demonstrates, the regexp split functions ignore zero-length matches that occur at the start or end of the string or immediately after a previous match. This is contrary to the strict definition of regexp matching that is implemented by <function>regexp_matches</function>, but is usually the most convenient behavior in practice. Other software systems such as Perl use similar definitions."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3889(title) 
msgid "Regular Expression Details"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3891(para) 
msgid "<productname>PostgreSQL</productname>'s regular expressions are implemented using a software package written by Henry Spencer. Much of the description of regular expressions below is copied verbatim from his manual."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3898(para) 
msgid "Regular expressions (<acronym>RE</acronym>s), as defined in <acronym>POSIX</acronym> 1003.2, come in two forms: <firstterm>extended</firstterm><acronym>RE</acronym>s or <acronym>ERE</acronym>s (roughly those of <command>egrep</command>), and <firstterm>basic</firstterm><acronym>RE</acronym>s or <acronym>BRE</acronym>s (roughly those of <command>ed</command>). <productname>PostgreSQL</productname> supports both forms, and also implements some extensions that are not in the POSIX standard, but have become widely used due to their availability in programming languages such as Perl and Tcl. <acronym>RE</acronym>s using these non-POSIX extensions are called <firstterm>advanced</firstterm><acronym>RE</acronym>s or <acronym>ARE</acronym>s in this documentation. AREs are almost an exact superset of EREs, but BREs have several notational incompatibilities (as well as being much more limited). We first describe the ARE and ERE forms, noting features that apply only to AREs, and then describe how BREs differ."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3919(para) 
msgid "<productname>PostgreSQL</productname> always initially presumes that a regular expression follows the ARE rules. However, the more limited ERE or BRE rules can be chosen by prepending an <firstterm>embedded option</firstterm> to the RE pattern, as described in <xref linkend=\"posix-metasyntax\"/>. This can be useful for compatibility with applications that expect exactly the <acronym>POSIX</acronym> 1003.2 rules."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3929(para) 
msgid "A regular expression is defined as one or more <firstterm>branches</firstterm>, separated by <literal>|</literal>. It matches anything that matches one of the branches."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3936(para) 
msgid "A branch is zero or more <firstterm>quantified atoms</firstterm> or <firstterm>constraints</firstterm>, concatenated. It matches a match for the first, followed by a match for the second, etc; an empty branch matches the empty string."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3943(para) 
msgid "A quantified atom is an <firstterm>atom</firstterm> possibly followed by a single <firstterm>quantifier</firstterm>. Without a quantifier, it matches a match for the atom. With a quantifier, it can match some number of matches of the atom. An <firstterm>atom</firstterm> can be any of the possibilities shown in <xref linkend=\"posix-atoms-table\"/>. The possible quantifiers and their meanings are shown in <xref linkend=\"posix-quantifiers-table\"/>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3954(para) 
msgid "A <firstterm>constraint</firstterm> matches an empty string, but matches only when specific conditions are met. A constraint can be used where an atom could be used, except it cannot be followed by a quantifier. The simple constraints are shown in <xref linkend=\"posix-constraints-table\"/>; some more constraints are described later."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3965(title) 
msgid "Regular Expression Atoms"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3970(entry) 
msgid "Atom"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3977(literal) 
msgid "("
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3977(replaceable) /tmp/cicero-BGQN/func.xml:3978(replaceable) /tmp/cicero-BGQN/func.xml:3980(replaceable) /tmp/cicero-BGQN/func.xml:3984(replaceable) /tmp/cicero-BGQN/func.xml:4175(replaceable) /tmp/cicero-BGQN/func.xml:4177(replaceable) /tmp/cicero-BGQN/func.xml:4182(replaceable) /tmp/cicero-BGQN/func.xml:4184(replaceable) 
msgid "re"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3977(literal) /tmp/cicero-BGQN/func.xml:3984(literal) /tmp/cicero-BGQN/func.xml:4175(literal) /tmp/cicero-BGQN/func.xml:4182(literal) 
msgid ")"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3978(entry) 
msgid "(where <placeholder-1/> is any regular expression) matches a match for <placeholder-2/>, with the match noted for possible reporting"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3984(literal) 
msgid "(?:"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3986(quote) 
msgid "non-capturing"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3985(entry) 
msgid "as above, but the match is not noted for reporting (a <placeholder-1/> set of parentheses) (AREs only)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3991(literal) /tmp/cicero-BGQN/func.xml:5679(literal) 
msgid "."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3992(entry) 
msgid "matches any single character"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3996(literal) 
msgid "["
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3996(replaceable) /tmp/cicero-BGQN/func.xml:3998(replaceable) 
msgid "chars"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3996(literal) 
msgid "]"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3997(firstterm) 
msgid "bracket expression"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:3997(entry) 
msgid "a <placeholder-1/>, matching any one of the <placeholder-2/> (see <xref linkend=\"posix-bracket-expressions\"/> for more detail)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4003(literal) /tmp/cicero-BGQN/func.xml:4010(literal) /tmp/cicero-BGQN/func.xml:4386(literal) /tmp/cicero-BGQN/func.xml:4460(literal) /tmp/cicero-BGQN/func.xml:4468(literal) /tmp/cicero-BGQN/func.xml:4616(literal) /tmp/cicero-BGQN/func.xml:4622(literal) 
msgid "\\"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4003(replaceable) /tmp/cicero-BGQN/func.xml:4004(replaceable) 
msgid "k"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4006(literal) 
msgid "\\\\"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4004(entry) 
msgid "(where <placeholder-1/> is a non-alphanumeric character) matches that character taken as an ordinary character, e.g., <placeholder-2/> matches a backslash character"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4010(replaceable) /tmp/cicero-BGQN/func.xml:4011(replaceable) /tmp/cicero-BGQN/func.xml:4014(replaceable) /tmp/cicero-BGQN/func.xml:4702(literal) 
msgid "c"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4011(entry) 
msgid "where <placeholder-1/> is alphanumeric (possibly followed by other characters) is an <placeholder-2/>, see <xref linkend=\"posix-escape-sequences\"/> (AREs only; in EREs and BREs, this matches <placeholder-3/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4018(literal) /tmp/cicero-BGQN/func.xml:4020(literal) /tmp/cicero-BGQN/func.xml:4076(literal) /tmp/cicero-BGQN/func.xml:4081(literal) /tmp/cicero-BGQN/func.xml:4087(literal) /tmp/cicero-BGQN/func.xml:4109(literal) /tmp/cicero-BGQN/func.xml:4110(literal) /tmp/cicero-BGQN/func.xml:4114(literal) /tmp/cicero-BGQN/func.xml:4115(literal) /tmp/cicero-BGQN/func.xml:4120(literal) /tmp/cicero-BGQN/func.xml:4121(literal) 
msgid "{"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4022(replaceable) 
msgid "bound"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4019(entry) 
msgid "when followed by a character other than a digit, matches the left-brace character <placeholder-1/>; when followed by a digit, it is the beginning of a <placeholder-2/> (see below)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4027(entry) 
msgid "where <placeholder-1/> is a single character with no other significance, matches that character"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4034(para) 
msgid "An RE cannot end with <literal>\\</literal>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4039(para) 
msgid "Remember that the backslash (<literal>\\</literal>) already has a special meaning in <productname>PostgreSQL</productname> string literals. To write a pattern constant that contains a backslash, you must write two backslashes in the statement, assuming escape string syntax is used (see <xref linkend=\"sql-syntax-strings\"/>)."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4049(title) 
msgid "Regular Expression Quantifiers"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4054(entry) 
msgid "Quantifier"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4055(entry) 
msgid "Matches"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4062(entry) 
msgid "a sequence of 0 or more matches of the atom"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4067(entry) 
msgid "a sequence of 1 or more matches of the atom"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4071(literal) /tmp/cicero-BGQN/func.xml:4105(literal) 
msgid "?"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4072(entry) 
msgid "a sequence of 0 or 1 matches of the atom"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4076(replaceable) /tmp/cicero-BGQN/func.xml:4077(replaceable) /tmp/cicero-BGQN/func.xml:4081(replaceable) /tmp/cicero-BGQN/func.xml:4082(replaceable) /tmp/cicero-BGQN/func.xml:4087(replaceable) /tmp/cicero-BGQN/func.xml:4088(replaceable) /tmp/cicero-BGQN/func.xml:4089(replaceable) /tmp/cicero-BGQN/func.xml:4109(replaceable) /tmp/cicero-BGQN/func.xml:4110(replaceable) /tmp/cicero-BGQN/func.xml:4114(replaceable) /tmp/cicero-BGQN/func.xml:4115(replaceable) /tmp/cicero-BGQN/func.xml:4120(replaceable) /tmp/cicero-BGQN/func.xml:4121(replaceable) /tmp/cicero-BGQN/func.xml:4616(replaceable) /tmp/cicero-BGQN/func.xml:4617(replaceable) /tmp/cicero-BGQN/func.xml:4618(replaceable) /tmp/cicero-BGQN/func.xml:4623(replaceable) /tmp/cicero-BGQN/func.xml:4718(literal) 
msgid "m"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4076(literal) /tmp/cicero-BGQN/func.xml:4087(literal) /tmp/cicero-BGQN/func.xml:4110(literal) /tmp/cicero-BGQN/func.xml:4121(literal) 
msgid "}"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4077(entry) 
msgid "a sequence of exactly <placeholder-1/> matches of the atom"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4081(literal) /tmp/cicero-BGQN/func.xml:4115(literal) 
msgid ",}"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4082(entry) 
msgid "a sequence of <placeholder-1/> or more matches of the atom"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4087(literal) /tmp/cicero-BGQN/func.xml:4120(literal) /tmp/cicero-BGQN/func.xml:4121(literal) /tmp/cicero-BGQN/func.xml:5683(literal) 
msgid ","
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4088(entry) 
msgid "a sequence of <placeholder-1/> through <placeholder-2/> (inclusive) matches of the atom; <placeholder-3/> cannot exceed <placeholder-4/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4094(literal) 
msgid "*?"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4095(entry) /tmp/cicero-BGQN/func.xml:4100(entry) /tmp/cicero-BGQN/func.xml:4105(entry) 
msgid "non-greedy version of <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4099(literal) 
msgid "+?"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4104(literal) 
msgid "??"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4109(literal) /tmp/cicero-BGQN/func.xml:4120(literal) 
msgid "}?"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4110(entry) /tmp/cicero-BGQN/func.xml:4115(entry) 
msgid "non-greedy version of <placeholder-1/><placeholder-2/><placeholder-3/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4114(literal) 
msgid ",}?"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4121(entry) 
msgid "non-greedy version of <placeholder-1/><placeholder-2/><placeholder-3/><placeholder-4/><placeholder-5/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4127(para) 
msgid "The forms using <literal>{</literal><replaceable>...</replaceable><literal>}</literal> are known as <firstterm>bounds</firstterm>. The numbers <replaceable>m</replaceable> and <replaceable>n</replaceable> within a bound are unsigned decimal integers with permissible values from 0 to 255 inclusive."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4134(para) 
msgid "<firstterm>Non-greedy</firstterm> quantifiers (available in AREs only) match the same possibilities as their corresponding normal (<firstterm>greedy</firstterm>) counterparts, but prefer the smallest number rather than the largest number of matches. See <xref linkend=\"posix-matching-rules\"/> for more detail."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4143(para) 
msgid "A quantifier cannot immediately follow another quantifier, e.g., <literal>**</literal> is invalid. A quantifier cannot begin an expression or subexpression or follow <literal>^</literal> or <literal>|</literal>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4153(title) 
msgid "Regular Expression Constraints"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4158(entry) 
msgid "Constraint"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4166(entry) 
msgid "matches at the beginning of the string"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4170(literal) /tmp/cicero-BGQN/func.xml:4591(literal) 
msgid "$"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4171(entry) 
msgid "matches at the end of the string"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4175(literal) 
msgid "(?="
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4176(firstterm) 
msgid "positive lookahead"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4176(entry) 
msgid "<placeholder-1/> matches at any point where a substring matching <placeholder-2/> begins (AREs only)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4182(literal) 
msgid "(?!"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4183(firstterm) 
msgid "negative lookahead"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4183(entry) 
msgid "<placeholder-1/> matches at any point where no substring matching <placeholder-2/> begins (AREs only)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4191(para) 
msgid "Lookahead constraints cannot contain <firstterm>back references</firstterm> (see <xref linkend=\"posix-escape-sequences\"/>), and all parentheses within them are considered non-capturing."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4199(title) 
msgid "Bracket Expressions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4201(para) 
msgid "A <firstterm>bracket expression</firstterm> is a list of characters enclosed in <literal>[]</literal>. It normally matches any single character from the list (but see below). If the list begins with <literal>^</literal>, it matches any single character <emphasis>not</emphasis> from the rest of the list. If two characters in the list are separated by <literal>-</literal>, this is shorthand for the full range of characters between those two (inclusive) in the collating sequence, e.g., <literal>[0-9]</literal> in <acronym>ASCII</acronym> matches any decimal digit. It is illegal for two ranges to share an endpoint, e.g., <literal>a-c-e</literal>. Ranges are very collating-sequence-dependent, so portable programs should avoid relying on them."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4218(para) 
msgid "To include a literal <literal>]</literal> in the list, make it the first character (after <literal>^</literal>, if that is used). To include a literal <literal>-</literal>, make it the first or last character, or the second endpoint of a range. To use a literal <literal>-</literal> as the first endpoint of a range, enclose it in <literal>[.</literal> and <literal>.]</literal> to make it a collating element (see below). With the exception of these characters, some combinations using <literal>[</literal> (see next paragraphs), and escapes (AREs only), all other special characters lose their special significance within a bracket expression. In particular, <literal>\\</literal> is not special when following ERE or BRE rules, though it is special (as introducing an escape) in AREs."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4234(para) 
msgid "Within a bracket expression, a collating element (a character, a multiple-character sequence that collates as if it were a single character, or a collating-sequence name for either) enclosed in <literal>[.</literal> and <literal>.]</literal> stands for the sequence of characters of that collating element. The sequence is treated as a single element of the bracket expression's list. This allows a bracket expression containing a multiple-character collating element to match more than one character, e.g., if the collating sequence includes a <literal>ch</literal> collating element, then the RE <literal>[[.ch.]]*c</literal> matches the first five characters of <literal>chchcc</literal>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4250(para) 
msgid "<productname>PostgreSQL</productname> currently does not support multi-character collating elements. This information describes possible future behavior."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4256(para) 
msgid "Within a bracket expression, a collating element enclosed in <literal>[=</literal> and <literal>=]</literal> is an <firstterm>equivalence class</firstterm>, standing for the sequences of characters of all collating elements equivalent to that one, including itself. (If there are no other equivalent collating elements, the treatment is as if the enclosing delimiters were <literal>[.</literal> and <literal>.]</literal>.) For example, if <literal>o</literal> and <literal>^</literal> are the members of an equivalence class, then <literal>[[=o=]]</literal>, <literal>[[=^=]]</literal>, and <literal>[o^]</literal> are all synonymous. An equivalence class cannot be an endpoint of a range."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4270(para) 
msgid "Within a bracket expression, the name of a character class enclosed in <literal>[:</literal> and <literal>:]</literal> stands for the list of all characters belonging to that class. Standard character class names are: <literal>alnum</literal>, <literal>alpha</literal>, <literal>blank</literal>, <literal>cntrl</literal>, <literal>digit</literal>, <literal>graph</literal>, <literal>lower</literal>, <literal>print</literal>, <literal>punct</literal>, <literal>space</literal>, <literal>upper</literal>, <literal>xdigit</literal>. These stand for the character classes defined in <citerefentry><refentrytitle>ctype</refentrytitle><manvolnum>3</manvolnum></citerefentry>. A locale can provide others. A character class cannot be used as an endpoint of a range."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4287(para) 
msgid "There are two special cases of bracket expressions: the bracket expressions <literal>[[:&lt;:]]</literal> and <literal>[[:&gt;:]]</literal> are constraints, matching empty strings at the beginning and end of a word respectively. A word is defined as a sequence of word characters that is neither preceded nor followed by word characters. A word character is an <literal>alnum</literal> character (as defined by <citerefentry><refentrytitle>ctype</refentrytitle><manvolnum>3</manvolnum></citerefentry>) or an underscore. This is an extension, compatible with but not specified by <acronym>POSIX</acronym> 1003.2, and should be used with caution in software intended to be portable to other systems. The constraint escapes described below are usually preferable; they are no more standard, but are easier to type."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4306(title) 
msgid "Regular Expression Escapes"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4308(para) 
msgid "<firstterm>Escapes</firstterm> are special sequences beginning with <literal>\\</literal> followed by an alphanumeric character. Escapes come in several varieties: character entry, class shorthands, constraint escapes, and back references. A <literal>\\</literal> followed by an alphanumeric character but not constituting a valid escape is illegal in AREs. In EREs, there are no escapes: outside a bracket expression, a <literal>\\</literal> followed by an alphanumeric character merely stands for that character as an ordinary character, and inside a bracket expression, <literal>\\</literal> is an ordinary character. (The latter is the one actual incompatibility between EREs and AREs.)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4321(para) 
msgid "<firstterm>Character-entry escapes</firstterm> exist to make it easier to specify non-printing and other inconvenient characters in REs. They are shown in <xref linkend=\"posix-character-entry-escapes-table\"/>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4327(para) 
msgid "<firstterm>Class-shorthand escapes</firstterm> provide shorthands for certain commonly-used character classes. They are shown in <xref linkend=\"posix-class-shorthand-escapes-table\"/>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4333(para) 
msgid "A <firstterm>constraint escape</firstterm> is a constraint, matching the empty string if specific conditions are met, written as an escape. They are shown in <xref linkend=\"posix-constraint-escapes-table\"/>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4340(para) 
msgid "A <firstterm>back reference</firstterm> (<literal>\\</literal><replaceable>n</replaceable>) matches the same string matched by the previous parenthesized subexpression specified by the number <replaceable>n</replaceable> (see <xref linkend=\"posix-constraint-backref-table\"/>). For example, <literal>([bc])\\1</literal> matches <literal>bb</literal> or <literal>cc</literal> but not <literal>bc</literal> or <literal>cb</literal>. The subexpression must entirely precede the back reference in the RE. Subexpressions are numbered in the order of their leading parentheses. Non-capturing parentheses do not define subexpressions."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4356(programlisting) 
#, no-wrap
msgid "\n'123' ~ E'^\\\\d{3}' <lineannotation>true</lineannotation>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4353(para) 
msgid "Keep in mind that an escape's leading <literal>\\</literal> will need to be doubled when entering the pattern as an SQL string constant. For example: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4363(title) 
msgid "Regular Expression Character-entry Escapes"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4368(entry) /tmp/cicero-BGQN/func.xml:4496(entry) /tmp/cicero-BGQN/func.xml:4553(entry) /tmp/cicero-BGQN/func.xml:4609(entry) 
msgid "Escape"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4375(literal) 
msgid "\\a"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4376(entry) 
msgid "alert (bell) character, as in C"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4380(literal) 
msgid "\\b"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4381(entry) 
msgid "backspace, as in C"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4385(literal) 
msgid "\\B"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4386(entry) 
msgid "synonym for backslash (<placeholder-1/>) to help reduce the need for backslash doubling"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4391(literal) 
msgid "\\c"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4391(replaceable) /tmp/cicero-BGQN/func.xml:4392(replaceable) /tmp/cicero-BGQN/func.xml:4394(replaceable) /tmp/cicero-BGQN/func.xml:10817(replaceable) /tmp/cicero-BGQN/func.xml:10837(replaceable) /tmp/cicero-BGQN/func.xml:10857(replaceable) /tmp/cicero-BGQN/func.xml:10873(replaceable) /tmp/cicero-BGQN/func.xml:10882(replaceable) /tmp/cicero-BGQN/func.xml:10890(replaceable) /tmp/cicero-BGQN/func.xml:10907(replaceable) /tmp/cicero-BGQN/func.xml:10926(replaceable) /tmp/cicero-BGQN/func.xml:10936(replaceable) /tmp/cicero-BGQN/func.xml:10945(replaceable) /tmp/cicero-BGQN/func.xml:10964(replaceable) /tmp/cicero-BGQN/func.xml:10973(replaceable) /tmp/cicero-BGQN/func.xml:10982(replaceable) /tmp/cicero-BGQN/func.xml:10991(replaceable) /tmp/cicero-BGQN/func.xml:10992(replaceable) /tmp/cicero-BGQN/func.xml:11002(replaceable) /tmp/cicero-BGQN/func.xml:11011(replaceable) /tmp/cicero-BGQN/func.xml:11013(replaceable) /tmp/cicero-BGQN/func.xml:11025(replaceable) 
msgid "X"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4392(entry) 
msgid "(where <placeholder-1/> is any character) the character whose low-order 5 bits are the same as those of <placeholder-2/>, and whose other bits are all zero"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4398(literal) 
msgid "\\e"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4400(literal) 
msgid "ESC"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4399(entry) 
msgid "the character whose collating-sequence name is <placeholder-1/>, or failing that, the character with octal value 033"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4405(literal) 
msgid "\\f"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4406(entry) 
msgid "form feed, as in C"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4410(literal) 
msgid "\\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4411(entry) 
msgid "newline, as in C"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4415(literal) 
msgid "\\r"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4416(entry) 
msgid "carriage return, as in C"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4420(literal) 
msgid "\\t"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4421(entry) 
msgid "horizontal tab, as in C"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4425(literal) 
msgid "\\u"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4425(replaceable) /tmp/cicero-BGQN/func.xml:4426(replaceable) /tmp/cicero-BGQN/func.xml:4427(replaceable) 
msgid "wxyz"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4427(literal) 
msgid "U+"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4426(entry) 
msgid "(where <placeholder-1/> is exactly four hexadecimal digits) the UTF16 (Unicode, 16-bit) character <placeholder-2/><placeholder-3/> in the local byte ordering"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4432(literal) 
msgid "\\U"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4432(replaceable) /tmp/cicero-BGQN/func.xml:4433(replaceable) 
msgid "stuvwxyz"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4433(entry) 
msgid "(where <placeholder-1/> is exactly eight hexadecimal digits) reserved for a hypothetical Unicode extension to 32 bits"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4440(literal) 
msgid "\\v"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4441(entry) 
msgid "vertical tab, as in C"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4445(literal) 
msgid "\\x"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4445(replaceable) /tmp/cicero-BGQN/func.xml:4446(replaceable) /tmp/cicero-BGQN/func.xml:4449(replaceable) 
msgid "hhh"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4449(literal) 
msgid "0x"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4446(entry) 
msgid "(where <placeholder-1/> is any sequence of hexadecimal digits) the character whose hexadecimal value is <placeholder-2/><placeholder-3/> (a single character no matter how many hexadecimal digits are used)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4455(literal) 
msgid "\\0"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4456(literal) /tmp/cicero-BGQN/func.xml:4464(literal) /tmp/cicero-BGQN/func.xml:4472(literal) /tmp/cicero-BGQN/func.xml:5675(literal) /tmp/cicero-BGQN/func.xml:10340(literal) 
msgid "0"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4456(entry) 
msgid "the character whose value is <placeholder-1/> (the null byte)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4460(replaceable) /tmp/cicero-BGQN/func.xml:4461(replaceable) /tmp/cicero-BGQN/func.xml:4464(replaceable) 
msgid "xy"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4462(firstterm) /tmp/cicero-BGQN/func.xml:4470(firstterm) 
msgid "back reference"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4461(entry) 
msgid "(where <placeholder-1/> is exactly two octal digits, and is not a <placeholder-2/>) the character whose octal value is <placeholder-3/><placeholder-4/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4468(replaceable) /tmp/cicero-BGQN/func.xml:4469(replaceable) /tmp/cicero-BGQN/func.xml:4472(replaceable) 
msgid "xyz"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4469(entry) 
msgid "(where <placeholder-1/> is exactly three octal digits, and is not a <placeholder-2/>) the character whose octal value is <placeholder-3/><placeholder-4/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4478(para) 
msgid "Hexadecimal digits are <literal>0</literal>-<literal>9</literal>, <literal>a</literal>-<literal>f</literal>, and <literal>A</literal>-<literal>F</literal>. Octal digits are <literal>0</literal>-<literal>7</literal>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4484(para) 
msgid "The character-entry escapes are always taken as ordinary characters. For example, <literal>\\135</literal> is <literal>]</literal> in ASCII, but <literal>\\135</literal> does not terminate a bracket expression."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4491(title) 
msgid "Regular Expression Class-shorthand Escapes"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4503(literal) 
msgid "\\d"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4504(literal) 
msgid "[[:digit:]]"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4508(literal) 
msgid "\\s"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4509(literal) 
msgid "[[:space:]]"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4513(literal) 
msgid "\\w"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4514(literal) 
msgid "[[:alnum:]_]"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4514(entry) /tmp/cicero-BGQN/func.xml:4530(entry) 
msgid "<placeholder-1/> (note underscore is included)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4519(literal) 
msgid "\\D"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4520(literal) 
msgid "[^[:digit:]]"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4524(literal) 
msgid "\\S"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4525(literal) 
msgid "[^[:space:]]"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4529(literal) 
msgid "\\W"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4530(literal) 
msgid "[^[:alnum:]_]"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4537(para) 
msgid "Within bracket expressions, <literal>\\d</literal>, <literal>\\s</literal>, and <literal>\\w</literal> lose their outer brackets, and <literal>\\D</literal>, <literal>\\S</literal>, and <literal>\\W</literal> are illegal. (So, for example, <literal>[a-c\\d]</literal> is equivalent to <literal>[a-c[:digit:]]</literal>. Also, <literal>[a-c\\D]</literal>, which is equivalent to <literal>[a-c^[:digit:]]</literal>, is illegal.)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4548(title) 
msgid "Regular Expression Constraint Escapes"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4560(literal) 
msgid "\\A"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4561(entry) 
msgid "matches only at the beginning of the string (see <xref linkend=\"posix-matching-rules\"/> for how this differs from <placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4567(literal) 
msgid "\\m"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4568(entry) 
msgid "matches only at the beginning of a word"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4572(literal) 
msgid "\\M"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4573(entry) 
msgid "matches only at the end of a word"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4577(literal) 
msgid "\\y"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4578(entry) 
msgid "matches only at the beginning or end of a word"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4582(literal) 
msgid "\\Y"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4583(entry) 
msgid "matches only at a point that is not the beginning or end of a word"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4588(literal) 
msgid "\\Z"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4589(entry) 
msgid "matches only at the end of the string (see <xref linkend=\"posix-matching-rules\"/> for how this differs from <placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4597(para) 
msgid "A word is defined as in the specification of <literal>[[:&lt;:]]</literal> and <literal>[[:&gt;:]]</literal> above. Constraint escapes are illegal within bracket expressions."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4604(title) 
msgid "Regular Expression Back References"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4617(entry) 
msgid "(where <placeholder-1/> is a nonzero digit) a back reference to the <placeholder-2/>'th subexpression"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4622(replaceable) /tmp/cicero-BGQN/func.xml:4625(replaceable) /tmp/cicero-BGQN/func.xml:4627(replaceable) 
msgid "mnn"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4624(replaceable) 
msgid "nn"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4623(entry) 
msgid "(where <placeholder-1/> is a nonzero digit, and <placeholder-2/> is some more digits, and the decimal value <placeholder-3/> is not greater than the number of closing capturing parentheses seen so far) a back reference to the <placeholder-4/>'th subexpression"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4634(para) 
msgid "There is an inherent ambiguity between octal character-entry escapes and back references, which is resolved by the following heuristics, as hinted at above. A leading zero always indicates an octal escape. A single non-zero digit, not followed by another digit, is always taken as a back reference. A multi-digit sequence not starting with a zero is taken as a back reference if it comes after a suitable subexpression (i.e., the number is in the legal range for a back reference), and otherwise is taken as octal."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4650(title) 
msgid "Regular Expression Metasyntax"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4652(para) 
msgid "In addition to the main syntax described above, there are some special forms and miscellaneous syntactic facilities available."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4657(para) 
msgid "An RE can begin with one of two special <firstterm>director</firstterm> prefixes. If an RE begins with <literal>***:</literal>, the rest of the RE is taken as an ARE. (This normally has no effect in <productname>PostgreSQL</productname>, since REs are assumed to be AREs; but it does have an effect if ERE or BRE mode had been specified by the <replaceable>flags</replaceable> parameter to a regex function.) If an RE begins with <literal>***=</literal>, the rest of the RE is taken to be a literal string, with all characters considered ordinary characters."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4669(para) 
msgid "An ARE can begin with <firstterm>embedded options</firstterm>: a sequence <literal>(?</literal><replaceable>xyz</replaceable><literal>)</literal> (where <replaceable>xyz</replaceable> is one or more alphabetic characters) specifies options affecting the rest of the RE. These options override any previously determined options — in particular, they can override the case-sensitivity behavior implied by a regex operator, or the <replaceable>flags</replaceable> parameter to a regex function. The available option letters are shown in <xref linkend=\"posix-embedded-options-table\"/>. Note that these same option letters are used in the <replaceable>flags</replaceable> parameters of regex functions."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4685(title) 
msgid "ARE Embedded-option Letters"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4690(entry) 
msgid "Option"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4698(entry) 
msgid "rest of RE is a BRE"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4703(entry) 
msgid "case-sensitive matching (overrides operator type)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4707(literal) 
msgid "e"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4708(entry) 
msgid "rest of RE is an ERE"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4712(literal) 
msgid "i"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4713(entry) 
msgid "case-insensitive matching (see <xref linkend=\"posix-matching-rules\"/>) (overrides operator type)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4719(entry) 
msgid "historical synonym for <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4724(entry) 
msgid "newline-sensitive matching (see <xref linkend=\"posix-matching-rules\"/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4729(literal) 
msgid "p"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4730(entry) 
msgid "partial newline-sensitive matching (see <xref linkend=\"posix-matching-rules\"/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4735(literal) 
msgid "q"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4736(quote) 
msgid "quoted"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4736(entry) 
msgid "rest of RE is a literal (<placeholder-1/>) string, all ordinary characters"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4742(entry) 
msgid "non-newline-sensitive matching (default)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4746(literal) /tmp/cicero-BGQN/func.xml:8330(literal) /tmp/cicero-BGQN/func.xml:8336(literal) /tmp/cicero-BGQN/func.xml:8372(literal) /tmp/cicero-BGQN/func.xml:10099(literal) /tmp/cicero-BGQN/func.xml:10106(literal) /tmp/cicero-BGQN/func.xml:10113(literal) /tmp/cicero-BGQN/func.xml:10120(literal) /tmp/cicero-BGQN/func.xml:10127(literal) /tmp/cicero-BGQN/func.xml:10134(literal) /tmp/cicero-BGQN/func.xml:10141(literal) /tmp/cicero-BGQN/func.xml:10148(literal) /tmp/cicero-BGQN/func.xml:10155(literal) 
msgid "t"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4747(entry) 
msgid "tight syntax (default; see below)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4751(literal) 
msgid "w"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4752(quote) 
msgid "weird"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4752(entry) 
msgid "inverse partial newline-sensitive (<placeholder-1/>) matching (see <xref linkend=\"posix-matching-rules\"/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4758(entry) 
msgid "expanded syntax (see below)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4764(para) 
msgid "Embedded options take effect at the <literal>)</literal> terminating the sequence. They can appear only at the start of an ARE (after the <literal>***:</literal> director if any)."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4783(para) 
msgid "a white-space character or <literal>#</literal> preceded by <literal>\\</literal> is retained"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4789(para) 
msgid "white space or <literal>#</literal> within a bracket expression is retained"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4794(para) 
msgid "white space and comments cannot appear within multi-character symbols, such as <literal>(?:</literal>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4770(para) 
msgid "In addition to the usual (<firstterm>tight</firstterm>) RE syntax, in which all characters are significant, there is an <firstterm>expanded</firstterm> syntax, available by specifying the embedded <literal>x</literal> option. In the expanded syntax, white-space characters in the RE are ignored, as are all characters between a <literal>#</literal> and the following newline (or the end of the RE). This permits paragraphing and commenting a complex RE. There are three exceptions to that basic rule: <placeholder-1/> For this purpose, white-space characters are blank, tab, newline, and any character that belongs to the <replaceable>space</replaceable> character class."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4805(para) 
msgid "Finally, in an ARE, outside bracket expressions, the sequence <literal>(?#</literal><replaceable>ttt</replaceable><literal>)</literal> (where <replaceable>ttt</replaceable> is any text not containing a <literal>)</literal>) is a comment, completely ignored. Again, this is not allowed between the characters of multi-character symbols, like <literal>(?:</literal>. Such comments are more a historical artifact than a useful facility, and their use is deprecated; use the expanded syntax instead."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4816(para) 
msgid "<emphasis>None</emphasis> of these metasyntax extensions is available if an initial <literal>***=</literal> director has specified that the user's input be treated as a literal string rather than as an RE."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4825(title) 
msgid "Regular Expression Matching Rules"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4827(para) 
msgid "In the event that an RE could match more than one substring of a given string, the RE matches the one starting earliest in the string. If the RE could match more than one substring starting at that point, either the longest possible match or the shortest possible match will be taken, depending on whether the RE is <firstterm>greedy</firstterm> or <firstterm>non-greedy</firstterm>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4840(para) 
msgid "Most atoms, and all constraints, have no greediness attribute (because they cannot match variable amounts of text anyway)."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4846(para) 
msgid "Adding parentheses around an RE does not change its greediness."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4851(para) 
msgid "A quantified atom with a fixed-repetition quantifier (<literal>{</literal><replaceable>m</replaceable><literal>}</literal> or <literal>{</literal><replaceable>m</replaceable><literal>}?</literal>) has the same greediness (possibly none) as the atom itself."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4860(para) 
msgid "A quantified atom with other normal quantifiers (including <literal>{</literal><replaceable>m</replaceable><literal>,</literal><replaceable>n</replaceable><literal>}</literal> with <replaceable>m</replaceable> equal to <replaceable>n</replaceable>) is greedy (prefers longest match)."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4868(para) 
msgid "A quantified atom with a non-greedy quantifier (including <literal>{</literal><replaceable>m</replaceable><literal>,</literal><replaceable>n</replaceable><literal>}?</literal> with <replaceable>m</replaceable> equal to <replaceable>n</replaceable>) is non-greedy (prefers shortest match)."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4876(para) 
msgid "A branch — that is, an RE that has no top-level <literal>|</literal> operator — has the same greediness as the first quantified atom in it that has a greediness attribute."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4883(para) 
msgid "An RE consisting of two or more branches connected by the <literal>|</literal> operator is always greedy."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4836(para) 
msgid "Whether an RE is greedy or not is determined by the following rules: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4891(para) 
msgid "The above rules associate greediness attributes not only with individual quantified atoms, but with branches and entire REs that contain quantified atoms. What that means is that the matching is done in such a way that the branch, or whole RE, matches the longest or shortest possible substring <emphasis>as a whole</emphasis>. Once the length of the entire match is determined, the part of it that matches any particular subexpression is determined on the basis of the greediness attribute of that subexpression, with subexpressions starting earlier in the RE taking priority over ones starting later."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4903(para) 
msgid "An example of what this means: <screen>\nSELECT SUBSTRING('XY1234Z', 'Y*([0-9]{1,3})');\n<lineannotation>Result: </lineannotation><computeroutput>123</computeroutput>\nSELECT SUBSTRING('XY1234Z', 'Y*?([0-9]{1,3})');\n<lineannotation>Result: </lineannotation><computeroutput>1</computeroutput>\n</screen> In the first case, the RE as a whole is greedy because <literal>Y*</literal> is greedy. It can match beginning at the <literal>Y</literal>, and it matches the longest possible string starting there, i.e., <literal>Y123</literal>. The output is the parenthesized part of that, or <literal>123</literal>. In the second case, the RE as a whole is non-greedy because <literal>Y*?</literal> is non-greedy. It can match beginning at the <literal>Y</literal>, and it matches the shortest possible string starting there, i.e., <literal>Y1</literal>. The subexpression <literal>[0-9]{1,3}</literal> is greedy but it cannot change the decision as to the overall match length; so it is forced to match just <literal>1</literal>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4923(para) 
msgid "In short, when an RE contains both greedy and non-greedy subexpressions, the total match length is either as long as possible or as short as possible, according to the attribute assigned to the whole RE. The attributes assigned to the subexpressions only affect how much of that match they are allowed to <quote>eat</quote> relative to each other."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4931(para) 
msgid "The quantifiers <literal>{1,1}</literal> and <literal>{1,1}?</literal> can be used to force greediness or non-greediness, respectively, on a subexpression or a whole RE."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4937(para) 
msgid "Match lengths are measured in characters, not collating elements. An empty string is considered longer than no match at all. For example: <literal>bb*</literal> matches the three middle characters of <literal>abbbc</literal>; <literal>(week|wee)(night|knights)</literal> matches all ten characters of <literal>weeknights</literal>; when <literal>(.*).*</literal> is matched against <literal>abc</literal> the parenthesized subexpression matches all three characters; and when <literal>(a*)*</literal> is matched against <literal>bc</literal> both the whole RE and the parenthesized subexpression match an empty string."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4953(para) 
msgid "If case-independent matching is specified, the effect is much as if all case distinctions had vanished from the alphabet. When an alphabetic that exists in multiple cases appears as an ordinary character outside a bracket expression, it is effectively transformed into a bracket expression containing both cases, e.g., <literal>x</literal> becomes <literal>[xX]</literal>. When it appears inside a bracket expression, all case counterparts of it are added to the bracket expression, e.g., <literal>[x]</literal> becomes <literal>[xX]</literal> and <literal>[^x]</literal> becomes <literal>[^xX]</literal>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4967(para) 
msgid "If newline-sensitive matching is specified, <literal>.</literal> and bracket expressions using <literal>^</literal> will never match the newline character (so that matches will never cross newlines unless the RE explicitly arranges it) and <literal>^</literal>and <literal>$</literal> will match the empty string after and before a newline respectively, in addition to matching at beginning and end of string respectively. But the ARE escapes <literal>\\A</literal> and <literal>\\Z</literal> continue to match beginning or end of string <emphasis>only</emphasis>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4981(para) 
msgid "If partial newline-sensitive matching is specified, this affects <literal>.</literal> and bracket expressions as with newline-sensitive matching, but not <literal>^</literal> and <literal>$</literal>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4988(para) 
msgid "If inverse partial newline-sensitive matching is specified, this affects <literal>^</literal> and <literal>$</literal> as with newline-sensitive matching, but not <literal>.</literal> and bracket expressions. This isn't very useful but is provided for symmetry."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:4998(title) 
msgid "Limits and Compatibility"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5000(para) 
msgid "No particular limit is imposed on the length of REs in this implementation. However, programs intended to be highly portable should not employ REs longer than 256 bytes, as a POSIX-compliant implementation can refuse to accept such REs."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5008(para) 
msgid "The only feature of AREs that is actually incompatible with POSIX EREs is that <literal>\\</literal> does not lose its special significance inside bracket expressions. All other ARE features use syntax which is illegal or has undefined or unspecified effects in POSIX EREs; the <literal>***</literal> syntax of directors likewise is outside the POSIX syntax for both BREs and EREs."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5018(para) 
msgid "Many of the ARE extensions are borrowed from Perl, but some have been changed to clean them up, and a few Perl extensions are not present. Incompatibilities of note include <literal>\\b</literal>, <literal>\\B</literal>, the lack of special treatment for a trailing newline, the addition of complemented bracket expressions to the things affected by newline-sensitive matching, the restrictions on parentheses and back references in lookahead constraints, and the longest/shortest-match (rather than first-match) matching semantics."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5036(para) 
msgid "In AREs, <literal>\\</literal> followed by an alphanumeric character is either an escape or an error, while in previous releases, it was just another way of writing the alphanumeric. This should not be much of a problem because there was no reason to write such a sequence in earlier releases."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5045(para) 
msgid "In AREs, <literal>\\</literal> remains a special character within <literal>[]</literal>, so a literal <literal>\\</literal> within a bracket expression must be written <literal>\\\\</literal>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5030(para) 
msgid "Two significant incompatibilities exist between AREs and the ERE syntax recognized by pre-7.4 releases of <productname>PostgreSQL</productname>: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5056(title) 
msgid "Basic Regular Expressions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5058(para) 
msgid "BREs differ from EREs in several respects. In BREs, <literal>|</literal>, <literal>+</literal>, and <literal>?</literal> are ordinary characters and there is no equivalent for their functionality. The delimiters for bounds are <literal>\\{</literal> and <literal>\\}</literal>, with <literal>{</literal> and <literal>}</literal> by themselves ordinary characters. The parentheses for nested subexpressions are <literal>\\(</literal> and <literal>\\)</literal>, with <literal>(</literal> and <literal>)</literal> by themselves ordinary characters. <literal>^</literal> is an ordinary character except at the beginning of the RE or the beginning of a parenthesized subexpression, <literal>$</literal> is an ordinary character except at the end of the RE or the end of a parenthesized subexpression, and <literal>*</literal> is an ordinary character if it appears at the beginning of the RE or the beginning of a parenthesized subexpression (after a possible leading <literal>^</literal>). Finally, single-digit back references are available, and <literal>\\&lt;</literal> and <literal>\\&gt;</literal> are synonyms for <literal>[[:&lt;:]]</literal> and <literal>[[:&gt;:]]</literal> respectively; no other escapes are available in BREs."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5092(title) 
msgid "Data Type Formatting Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5095(primary) 
msgid "formatting"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5098(para) 
msgid "The <productname>PostgreSQL</productname> formatting functions provide a powerful set of tools for converting various data types (date/time, integer, floating point, numeric) to formatted strings and for converting from formatted strings to specific data types. <xref linkend=\"functions-formatting-table\"/> lists them. These functions all follow a common calling convention: the first argument is the value to be formatted and the second argument is a template that defines the output or input format."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5108(para) 
msgid "A single-argument <function>to_timestamp</function> function is also available; it accepts a <type>double precision</type> argument and converts from Unix epoch (seconds since 1970-01-01 00:00:00+00) to <type>timestamp with time zone</type>. (<type>Integer</type> Unix epochs are implicitly cast to <type>double precision</type>.)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5119(title) 
msgid "Formatting Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5133(primary) /tmp/cicero-BGQN/func.xml:5154(function) 
msgid "to_char"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5135(type) /tmp/cicero-BGQN/func.xml:6186(type) /tmp/cicero-BGQN/func.xml:6186(type) /tmp/cicero-BGQN/func.xml:6196(type) /tmp/cicero-BGQN/func.xml:6268(type) /tmp/cicero-BGQN/func.xml:6293(type) /tmp/cicero-BGQN/func.xml:6295(type) /tmp/cicero-BGQN/func.xml:6308(type) /tmp/cicero-BGQN/func.xml:6341(type) /tmp/cicero-BGQN/func.xml:6417(type) /tmp/cicero-BGQN/func.xml:12156(type) 
msgid "timestamp"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5135(function) /tmp/cicero-BGQN/func.xml:5142(function) /tmp/cicero-BGQN/func.xml:5148(function) /tmp/cicero-BGQN/func.xml:5161(function) 
msgid "to_char(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5138(entry) 
msgid "convert time stamp to string"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5139(literal) 
msgid "to_char(current_timestamp, 'HH12:MI:SS')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5142(type) /tmp/cicero-BGQN/func.xml:6188(type) /tmp/cicero-BGQN/func.xml:6197(type) /tmp/cicero-BGQN/func.xml:6279(type) /tmp/cicero-BGQN/func.xml:6319(type) /tmp/cicero-BGQN/func.xml:6349(type) /tmp/cicero-BGQN/func.xml:6361(type) /tmp/cicero-BGQN/func.xml:6363(type) /tmp/cicero-BGQN/func.xml:6374(type) /tmp/cicero-BGQN/func.xml:6376(type) /tmp/cicero-BGQN/func.xml:6387(type) /tmp/cicero-BGQN/func.xml:6389(type) /tmp/cicero-BGQN/func.xml:10501(type) /tmp/cicero-BGQN/func.xml:10677(type) /tmp/cicero-BGQN/func.xml:12155(type) 
msgid "interval"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5144(entry) 
msgid "convert interval to string"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5145(literal) 
msgid "to_char(interval '15h 2m 12s', 'HH24:MI:SS')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5150(entry) 
msgid "convert integer to string"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5151(literal) 
msgid "to_char(125, '999')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5154(type) /tmp/cicero-BGQN/func.xml:5200(type) /tmp/cicero-BGQN/func.xml:6270(type) /tmp/cicero-BGQN/func.xml:6280(type) /tmp/cicero-BGQN/func.xml:6310(type) /tmp/cicero-BGQN/func.xml:6320(type) /tmp/cicero-BGQN/func.xml:7694(type) /tmp/cicero-BGQN/func.xml:7706(type) /tmp/cicero-BGQN/func.xml:7712(type) /tmp/cicero-BGQN/func.xml:7730(type) /tmp/cicero-BGQN/func.xml:7761(type) /tmp/cicero-BGQN/func.xml:7767(type) /tmp/cicero-BGQN/func.xml:7822(type) /tmp/cicero-BGQN/func.xml:7866(type) /tmp/cicero-BGQN/func.xml:7867(type) /tmp/cicero-BGQN/func.xml:10500(type) /tmp/cicero-BGQN/func.xml:10505(type) /tmp/cicero-BGQN/func.xml:10675(type) /tmp/cicero-BGQN/func.xml:10682(type) /tmp/cicero-BGQN/func.xml:10820(type) /tmp/cicero-BGQN/func.xml:10823(type) /tmp/cicero-BGQN/func.xml:10840(type) /tmp/cicero-BGQN/func.xml:10843(type) /tmp/cicero-BGQN/func.xml:10860(type) /tmp/cicero-BGQN/func.xml:10863(type) /tmp/cicero-BGQN/func.xml:10876(type) /tmp/cicero-BGQN/func.xml:10879(type) /tmp/cicero-BGQN/func.xml:10893(type) /tmp/cicero-BGQN/func.xml:10896(type) /tmp/cicero-BGQN/func.xml:10910(type) /tmp/cicero-BGQN/func.xml:10929(type) /tmp/cicero-BGQN/func.xml:10932(type) /tmp/cicero-BGQN/func.xml:10948(type) /tmp/cicero-BGQN/func.xml:10951(type) /tmp/cicero-BGQN/func.xml:10967(type) /tmp/cicero-BGQN/func.xml:10970(type) /tmp/cicero-BGQN/func.xml:10985(type) /tmp/cicero-BGQN/func.xml:10988(type) /tmp/cicero-BGQN/func.xml:11005(type) /tmp/cicero-BGQN/func.xml:11008(type) /tmp/cicero-BGQN/func.xml:11028(type) /tmp/cicero-BGQN/func.xml:11031(type) /tmp/cicero-BGQN/func.xml:11052(type) /tmp/cicero-BGQN/func.xml:11056(type) /tmp/cicero-BGQN/func.xml:11075(type) /tmp/cicero-BGQN/func.xml:11079(type) /tmp/cicero-BGQN/func.xml:11098(type) /tmp/cicero-BGQN/func.xml:11102(type) /tmp/cicero-BGQN/func.xml:11117(type) /tmp/cicero-BGQN/func.xml:11121(type) /tmp/cicero-BGQN/func.xml:11140(type) /tmp/cicero-BGQN/func.xml:11144(type) /tmp/cicero-BGQN/func.xml:11163(type) /tmp/cicero-BGQN/func.xml:11167(type) /tmp/cicero-BGQN/func.xml:11268(type) /tmp/cicero-BGQN/func.xml:11281(type) 
msgid "double precision"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5154(literal) /tmp/cicero-BGQN/func.xml:7866(literal) /tmp/cicero-BGQN/func.xml:10265(literal) /tmp/cicero-BGQN/func.xml:10276(literal) /tmp/cicero-BGQN/func.xml:10322(literal) /tmp/cicero-BGQN/func.xml:10333(literal) /tmp/cicero-BGQN/func.xml:10344(literal) /tmp/cicero-BGQN/func.xml:10367(literal) /tmp/cicero-BGQN/func.xml:12677(literal) /tmp/cicero-BGQN/func.xml:12709(literal) /tmp/cicero-BGQN/func.xml:12724(literal) /tmp/cicero-BGQN/func.xml:12739(literal) /tmp/cicero-BGQN/func.xml:12754(literal) /tmp/cicero-BGQN/func.xml:12769(literal) /tmp/cicero-BGQN/func.xml:12784(literal) /tmp/cicero-BGQN/func.xml:12799(literal) /tmp/cicero-BGQN/func.xml:12814(literal) /tmp/cicero-BGQN/func.xml:12829(literal) /tmp/cicero-BGQN/func.xml:12844(literal) /tmp/cicero-BGQN/func.xml:13379(entry) 
msgid "<placeholder-1/>(<placeholder-2/>, <placeholder-3/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5157(entry) 
msgid "convert real/double precision to string"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5158(literal) 
msgid "to_char(125.8::real, '999D9')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5163(entry) 
msgid "convert numeric to string"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5164(literal) 
msgid "to_char(-125.8, '999D99S')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5169(primary) /tmp/cicero-BGQN/func.xml:5415(function) 
msgid "to_date"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5171(function) 
msgid "to_date(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5173(type) /tmp/cicero-BGQN/func.xml:6225(type) /tmp/cicero-BGQN/func.xml:6332(type) /tmp/cicero-BGQN/func.xml:7148(primary) 
msgid "date"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5174(entry) 
msgid "convert string to date"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5175(literal) 
msgid "to_date('05 Dec 2000', 'DD Mon YYYY')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5180(primary) 
msgid "to_number"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5182(function) 
msgid "to_number(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5185(entry) 
msgid "convert string to numeric"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5186(literal) 
msgid "to_number('12,454.8-', '99G999D9S')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5191(primary) /tmp/cicero-BGQN/func.xml:5415(function) 
msgid "to_timestamp"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5193(function) 
msgid "to_timestamp(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5195(type) /tmp/cicero-BGQN/func.xml:5201(type) /tmp/cicero-BGQN/func.xml:6210(type) /tmp/cicero-BGQN/func.xml:6255(type) /tmp/cicero-BGQN/func.xml:6432(type) /tmp/cicero-BGQN/func.xml:6447(type) /tmp/cicero-BGQN/func.xml:6478(type) /tmp/cicero-BGQN/func.xml:7090(type) /tmp/cicero-BGQN/func.xml:7096(type) /tmp/cicero-BGQN/func.xml:12156(type) /tmp/cicero-BGQN/func.xml:12415(type) /tmp/cicero-BGQN/func.xml:12439(type) /tmp/cicero-BGQN/func.xml:14221(type) 
msgid "timestamp with time zone"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5196(entry) 
msgid "convert string to time stamp"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5197(literal) 
msgid "to_timestamp('05 Dec 2000', 'DD Mon YYYY')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5200(function) 
msgid "to_timestamp(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5202(entry) 
msgid "convert Unix epoch to time stamp"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5203(literal) 
msgid "to_timestamp(1284352323)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5209(para) 
msgid "In a <function>to_char</function> output template string, there are certain patterns that are recognized and replaced with appropriately-formatted data based on the given value. Any text that is not a template pattern is simply copied verbatim. Similarly, in an input template string (for the other functions), template patterns identify the values to be supplied by the input data string."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5218(para) 
msgid "<xref linkend=\"functions-formatting-datetime-table\"/> shows the template patterns available for formatting date and time values."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5224(title) 
msgid "Template Patterns for Date/Time Formatting"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5228(entry) /tmp/cicero-BGQN/func.xml:5665(entry) 
msgid "Pattern"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5234(literal) 
msgid "HH"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5235(entry) /tmp/cicero-BGQN/func.xml:5239(entry) 
msgid "hour of day (01-12)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5238(literal) 
msgid "HH12"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5242(literal) 
msgid "HH24"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5243(entry) 
msgid "hour of day (00-23)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5246(literal) /tmp/cicero-BGQN/func.xml:5707(literal) 
msgid "MI"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5247(entry) 
msgid "minute (00-59)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5250(literal) 
msgid "SS"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5251(entry) 
msgid "second (00-59)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5254(literal) 
msgid "MS"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5255(entry) 
msgid "millisecond (000-999)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5258(literal) 
msgid "US"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5259(entry) 
msgid "microsecond (000000-999999)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5262(literal) 
msgid "SSSS"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5263(entry) 
msgid "seconds past midnight (0-86399)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5266(literal) 
msgid "AM"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5266(literal) 
msgid "am"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5267(literal) 
msgid "PM"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5267(literal) 
msgid "pm"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5266(entry) /tmp/cicero-BGQN/func.xml:5271(entry) /tmp/cicero-BGQN/func.xml:5312(entry) /tmp/cicero-BGQN/func.xml:5317(entry) 
msgid "<placeholder-1/>, <placeholder-2/>, <placeholder-3/> or <placeholder-4/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5268(entry) 
msgid "meridiem indicator (without periods)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5271(literal) 
msgid "A.M."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5271(literal) 
msgid "a.m."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5272(literal) 
msgid "P.M."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5272(literal) 
msgid "p.m."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5273(entry) 
msgid "meridiem indicator (with periods)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5276(literal) 
msgid "Y,YYY"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5277(entry) 
msgid "year (4 and more digits) with comma"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5280(literal) 
msgid "YYYY"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5281(entry) 
msgid "year (4 and more digits)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5284(literal) 
msgid "YYY"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5285(entry) 
msgid "last 3 digits of year"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5288(literal) 
msgid "YY"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5289(entry) 
msgid "last 2 digits of year"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5292(literal) /tmp/cicero-BGQN/func.xml:10817(replaceable) /tmp/cicero-BGQN/func.xml:10837(replaceable) /tmp/cicero-BGQN/func.xml:10857(replaceable) /tmp/cicero-BGQN/func.xml:10873(replaceable) /tmp/cicero-BGQN/func.xml:10890(replaceable) /tmp/cicero-BGQN/func.xml:10899(replaceable) /tmp/cicero-BGQN/func.xml:10907(replaceable) /tmp/cicero-BGQN/func.xml:10926(replaceable) /tmp/cicero-BGQN/func.xml:10937(replaceable) /tmp/cicero-BGQN/func.xml:10945(replaceable) /tmp/cicero-BGQN/func.xml:10964(replaceable) /tmp/cicero-BGQN/func.xml:10974(replaceable) /tmp/cicero-BGQN/func.xml:10982(replaceable) /tmp/cicero-BGQN/func.xml:11002(replaceable) /tmp/cicero-BGQN/func.xml:11012(replaceable) /tmp/cicero-BGQN/func.xml:11014(replaceable) /tmp/cicero-BGQN/func.xml:11025(replaceable) /tmp/cicero-BGQN/func.xml:11034(replaceable) /tmp/cicero-BGQN/func.xml:11035(replaceable) 
msgid "Y"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5293(entry) 
msgid "last digit of year"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5296(literal) 
msgid "IYYY"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5297(entry) 
msgid "ISO year (4 and more digits)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5300(literal) 
msgid "IYY"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5301(entry) 
msgid "last 3 digits of ISO year"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5304(literal) 
msgid "IY"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5305(entry) 
msgid "last 2 digits of ISO year"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5308(literal) 
msgid "I"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5309(entry) 
msgid "last digit of ISO year"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5312(literal) 
msgid "BC"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5312(literal) 
msgid "bc"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5313(literal) 
msgid "AD"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5313(literal) 
msgid "ad"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5314(entry) 
msgid "era indicator (without periods)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5317(literal) 
msgid "B.C."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5317(literal) 
msgid "b.c."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5318(literal) 
msgid "A.D."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5318(literal) 
msgid "a.d."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5319(entry) 
msgid "era indicator (with periods)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5322(literal) 
msgid "MONTH"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5323(entry) 
msgid "full upper case month name (blank-padded to 9 chars)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5326(literal) 
msgid "Month"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5327(entry) 
msgid "full capitalized month name (blank-padded to 9 chars)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5330(literal) /tmp/cicero-BGQN/func.xml:6843(literal) /tmp/cicero-BGQN/func.xml:7034(literal) 
msgid "month"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5331(entry) 
msgid "full lower case month name (blank-padded to 9 chars)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5334(literal) 
msgid "MON"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5335(entry) 
msgid "abbreviated upper case month name (3 chars in English, localized lengths vary)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5338(literal) 
msgid "Mon"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5339(entry) 
msgid "abbreviated capitalized month name (3 chars in English, localized lengths vary)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5342(literal) 
msgid "mon"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5343(entry) 
msgid "abbreviated lower case month name (3 chars in English, localized lengths vary)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5346(literal) 
msgid "MM"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5347(entry) 
msgid "month number (01-12)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5350(literal) 
msgid "DAY"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5351(entry) 
msgid "full upper case day name (blank-padded to 9 chars)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5354(literal) 
msgid "Day"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5355(entry) 
msgid "full capitalized day name (blank-padded to 9 chars)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5358(literal) /tmp/cicero-BGQN/func.xml:6615(literal) /tmp/cicero-BGQN/func.xml:7032(literal) 
msgid "day"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5359(entry) 
msgid "full lower case day name (blank-padded to 9 chars)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5362(literal) 
msgid "DY"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5363(entry) 
msgid "abbreviated upper case day name (3 chars in English, localized lengths vary)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5366(literal) 
msgid "Dy"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5367(entry) 
msgid "abbreviated capitalized day name (3 chars in English, localized lengths vary)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5370(literal) 
msgid "dy"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5371(entry) 
msgid "abbreviated lower case day name (3 chars in English, localized lengths vary)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5374(literal) 
msgid "DDD"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5375(entry) 
msgid "day of year (001-366)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5378(literal) 
msgid "IDDD"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5379(entry) 
msgid "ISO day of year (001-371; day 1 of the year is Monday of the first ISO week.)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5382(literal) 
msgid "DD"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5383(entry) 
msgid "day of month (01-31)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5386(literal) /tmp/cicero-BGQN/func.xml:5699(literal) 
msgid "D"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5387(literal) /tmp/cicero-BGQN/func.xml:5391(literal) /tmp/cicero-BGQN/func.xml:6740(computeroutput) /tmp/cicero-BGQN/func.xml:6944(computeroutput) 
msgid "7"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5387(entry) 
msgid "day of the week, Sunday(<placeholder-1/>) to Saturday(<placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5390(literal) 
msgid "ID"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5391(entry) 
msgid "ISO day of the week, Monday(<placeholder-1/>) to Sunday(<placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5394(literal) 
msgid "W"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5395(entry) 
msgid "week of month (1-5) (The first week starts on the first day of the month.)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5398(literal) 
msgid "WW"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5399(entry) 
msgid "week number of year (1-53) (The first week starts on the first day of the year.)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5402(literal) 
msgid "IW"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5403(entry) 
msgid "ISO week number of year (01 - 53; the first Thursday of the new year is in week 1.)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5406(literal) 
msgid "CC"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5407(entry) 
msgid "century (2 digits) (The twenty-first century starts on 2001-01-01.)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5410(literal) 
msgid "J"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5411(entry) 
msgid "Julian Day (days since November 24, 4714 BC at midnight)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5414(literal) 
msgid "Q"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5415(entry) 
msgid "quarter (ignored by <placeholder-1/> and <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5418(literal) 
msgid "RM"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5419(entry) 
msgid "month in upper case Roman numerals (I-XII; I=January)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5422(literal) 
msgid "rm"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5423(entry) 
msgid "month in lower case Roman numerals (i-xii; i=January)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5426(literal) 
msgid "TZ"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5427(entry) 
msgid "upper case time-zone name"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5430(literal) 
msgid "tz"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5431(entry) 
msgid "lower case time-zone name"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5437(para) 
msgid "Modifiers can be applied to any template pattern to alter its behavior. For example, <literal>FMMonth</literal> is the <literal>Month</literal> pattern with the <literal>FM</literal> modifier. <xref linkend=\"functions-formatting-datetimemod-table\"/> shows the modifier patterns for date/time formatting."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5447(title) 
msgid "Template Pattern Modifiers for Date/Time Formatting"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5451(entry) /tmp/cicero-BGQN/func.xml:5817(entry) 
msgid "Modifier"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5458(literal) /tmp/cicero-BGQN/func.xml:5824(literal) 
msgid "FM"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5458(entry) /tmp/cicero-BGQN/func.xml:5473(entry) /tmp/cicero-BGQN/func.xml:5478(entry) /tmp/cicero-BGQN/func.xml:5824(entry) 
msgid "<placeholder-1/> prefix"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5459(entry) /tmp/cicero-BGQN/func.xml:5825(entry) 
msgid "fill mode (suppress padding blanks and trailing zeroes)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5460(literal) 
msgid "FMMonth"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5463(literal) /tmp/cicero-BGQN/func.xml:5723(literal) /tmp/cicero-BGQN/func.xml:5829(literal) 
msgid "TH"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5463(entry) /tmp/cicero-BGQN/func.xml:5468(entry) /tmp/cicero-BGQN/func.xml:5484(entry) /tmp/cicero-BGQN/func.xml:5829(entry) /tmp/cicero-BGQN/func.xml:5834(entry) 
msgid "<placeholder-1/> suffix"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5464(entry) /tmp/cicero-BGQN/func.xml:5830(entry) 
msgid "upper case ordinal number suffix"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5465(literal) 
msgid "DDTH"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5465(literal) 
msgid "12TH"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5465(entry) /tmp/cicero-BGQN/func.xml:5470(entry) 
msgid "<placeholder-1/>, e.g., <placeholder-2/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5468(literal) /tmp/cicero-BGQN/func.xml:5723(literal) /tmp/cicero-BGQN/func.xml:5834(literal) 
msgid "th"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5469(entry) /tmp/cicero-BGQN/func.xml:5835(entry) 
msgid "lower case ordinal number suffix"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5470(literal) 
msgid "DDth"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5470(literal) 
msgid "12th"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5473(literal) 
msgid "FX"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5474(entry) 
msgid "fixed format global option (see usage notes)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5475(literal) 
msgid "FX Month DD Day"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5478(literal) 
msgid "TM"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5479(entry) 
msgid "translation mode (print localized day and month names based on <xref linkend=\"guc-lc-time\"/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5481(literal) 
msgid "TMMonth"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5484(literal) 
msgid "SP"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5485(entry) 
msgid "spell mode (not implemented)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5486(literal) 
msgid "DDSP"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5497(para) 
msgid "<literal>FM</literal> suppresses leading zeroes and trailing blanks that would otherwise be added to make the output of a pattern be fixed-width. In <productname>PostgreSQL</productname>, <literal>FM</literal> modifies only the next specification, while in Oracle <literal>FM</literal> affects all subsequent specifications, and repeated <literal>FM</literal> modifiers toggle fill mode on and off."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5509(para) 
msgid "<literal>TM</literal> does not include trailing blanks."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5515(para) 
msgid "<function>to_timestamp</function> and <function>to_date</function> skip multiple blank spaces in the input string unless the <literal>FX</literal> option is used. For example, <literal>to_timestamp('2000    JUN', 'YYYY MON')</literal> works, but <literal>to_timestamp('2000    JUN', 'FXYYYY MON')</literal> returns an error because <function>to_timestamp</function> expects one space only. <literal>FX</literal> must be specified as the first item in the template."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5528(para) 
msgid "Ordinary text is allowed in <function>to_char</function> templates and will be output literally. You can put a substring in double quotes to force it to be interpreted as literal text even if it contains pattern key words. For example, in <literal>'\"Hello Year \"YYYY'</literal>, the <literal>YYYY</literal> will be replaced by the year data, but the single <literal>Y</literal> in <literal>Year</literal> will not be. In <function>to_date</function>, <function>to_number</function>, and <function>to_timestamp</function>, double-quoted strings skip the number of input characters contained in the string, e.g. <literal>\"XX\"</literal> skips two input characters."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5543(para) 
msgid "If you want to have a double quote in the output you must precede it with a backslash, for example <literal>E'\\\\\"YYYY Month\\\\\"'</literal>. (Two backslashes are necessary because the backslash has special meaning when using the escape string syntax.)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5553(para) 
msgid "The <literal>YYYY</literal> conversion from string to <type>timestamp</type> or <type>date</type> has a restriction when processing years with more than 4 digits. You must use some non-digit character or template after <literal>YYYY</literal>, otherwise the year is always interpreted as 4 digits. For example (with the year 20000): <literal>to_date('200001131', 'YYYYMMDD')</literal> will be interpreted as a 4-digit year; instead use a non-digit separator after the year, like <literal>to_date('20000-1131', 'YYYY-MMDD')</literal> or <literal>to_date('20000Nov31', 'YYYYMonDD')</literal>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5568(para) 
msgid "In conversions from string to <type>timestamp</type> or <type>date</type>, the <literal>CC</literal> (century) field is ignored if there is a <literal>YYY</literal>, <literal>YYYY</literal> or <literal>Y,YYY</literal> field. If <literal>CC</literal> is used with <literal>YY</literal> or <literal>Y</literal> then the year is computed as <literal>(CC-1)*100+YY</literal>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5585(para) 
msgid "Year, week, and weekday: for example <literal>to_date('2006-42-4', 'IYYY-IW-ID')</literal> returns the date <literal>2006-10-19</literal>. If you omit the weekday it is assumed to be 1 (Monday)."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5593(para) 
msgid "Year and day of year: for example <literal>to_date('2006-291', 'IYYY-IDDD')</literal> also returns <literal>2006-10-19</literal>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5579(para) 
msgid "An ISO week date (as distinct from a Gregorian date) can be specified to <function>to_timestamp</function> and <function>to_date</function> in one of two ways: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5600(para) 
msgid "Attempting to construct a date using a mixture of ISO week and Gregorian date fields is nonsensical, and will cause an error. In the context of an ISO year, the concept of a <quote>month</quote> or <quote>day of month</quote> has no meaning. In the context of a Gregorian year, the ISO week has no meaning. Users should avoid mixing Gregorian and ISO date specifications."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5611(para) 
msgid "In a conversion from string to <type>timestamp</type>, millisecond (<literal>MS</literal>) or microsecond (<literal>US</literal>) values are used as the seconds digits after the decimal point. For example <literal>to_timestamp('12:3', 'SS:MS')</literal> is not 3 milliseconds, but 300, because the conversion counts it as 12 + 0.3 seconds. This means for the format <literal>SS:MS</literal>, the input values <literal>12:3</literal>, <literal>12:30</literal>, and <literal>12:300</literal> specify the same number of milliseconds. To get three milliseconds, one must use <literal>12:003</literal>, which the conversion counts as 12 + 0.003 = 12.003 seconds."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5625(para) 
msgid "Here is a more complex example: <literal>to_timestamp('15:12:02.020.001230', 'HH:MI:SS.MS.US')</literal> is 15 hours, 12 minutes, and 2 seconds + 20 milliseconds + 1230 microseconds = 2.021230 seconds."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5635(para) 
msgid "<function>to_char(..., 'ID')</function>'s day of the week numbering matches the <function>extract(isodow from ...)</function> function, but <function>to_char(..., 'D')</function>'s does not match <function>extract(dow from ...)</function>'s day numbering."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5644(para) 
msgid "<function>to_char(interval)</function> formats <literal>HH</literal> and <literal>HH12</literal> as shown on a 12-hour clock, i.e. zero hours and 36 hours output as <literal>12</literal>, while <literal>HH24</literal> outputs the full hour value, which can exceed 23 for intervals."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5492(para) 
msgid "Usage notes for date/time formatting: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5655(para) 
msgid "<xref linkend=\"functions-formatting-numeric-table\"/> shows the template patterns available for formatting numeric values."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5661(title) 
msgid "Template Patterns for Numeric Formatting"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5671(literal) 
msgid "9"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5672(entry) 
msgid "value with the specified number of digits"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5676(entry) 
msgid "value with leading zeros"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5679(entry) 
msgid "<placeholder-1/> (period)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5680(entry) 
msgid "decimal point"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5683(entry) 
msgid "<placeholder-1/> (comma)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5684(entry) 
msgid "group (thousand) separator"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5687(literal) 
msgid "PR"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5688(entry) 
msgid "negative value in angle brackets"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5691(literal) 
msgid "S"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5692(entry) 
msgid "sign anchored to number (uses locale)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5695(literal) 
msgid "L"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5696(entry) 
msgid "currency symbol (uses locale)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5700(entry) 
msgid "decimal point (uses locale)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5703(literal) 
msgid "G"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5704(entry) 
msgid "group separator (uses locale)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5708(entry) 
msgid "minus sign in specified position (if number &lt; 0)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5711(literal) 
msgid "PL"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5712(entry) 
msgid "plus sign in specified position (if number &gt; 0)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5715(literal) 
msgid "SG"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5716(entry) 
msgid "plus/minus sign in specified position"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5719(literal) 
msgid "RN"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5720(entry) 
msgid "Roman numeral (input between 1 and 3999)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5724(entry) 
msgid "ordinal number suffix"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5727(literal) 
msgid "V"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5728(entry) 
msgid "shift specified number of digits (see notes)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5731(literal) 
msgid "EEEE"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5732(entry) 
msgid "exponent for scientific notation"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5743(para) 
msgid "A sign formatted using <literal>SG</literal>, <literal>PL</literal>, or <literal>MI</literal> is not anchored to the number; for example, <literal>to_char(-12, 'MI9999')</literal> produces <literal>'-  12'</literal> but <literal>to_char(-12, 'S9999')</literal> produces <literal>'  -12'</literal>. The Oracle implementation does not allow the use of <literal>MI</literal> before <literal>9</literal>, but rather requires that <literal>9</literal> precede <literal>MI</literal>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5757(para) 
msgid "<literal>9</literal> results in a value with the same number of digits as there are <literal>9</literal>s. If a digit is not available it outputs a space."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5765(para) 
msgid "<literal>TH</literal> does not convert values less than zero and does not convert fractional numbers."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5772(para) 
msgid "<literal>PL</literal>, <literal>SG</literal>, and <literal>TH</literal> are <productname>PostgreSQL</productname> extensions."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5780(para) 
msgid "<literal>V</literal> effectively multiplies the input values by <literal>10^<replaceable>n</replaceable></literal>, where <replaceable>n</replaceable> is the number of digits following <literal>V</literal>. <function>to_char</function> does not support the use of <literal>V</literal> combined with a decimal point (e.g., <literal>99.9V99</literal> is not allowed)."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5793(para) 
msgid "<literal>EEEE</literal> (scientific notation) cannot be used in combination with any of the other formatting patterns or modifiers other than digit and decimal point patterns, and must be at the end of the format string (e.g., <literal>9.99EEEE</literal> is a valid pattern)."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5738(para) 
msgid "Usage notes for numeric formatting: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5803(para) 
msgid "Certain modifiers can be applied to any template pattern to alter its behavior. For example, <literal>FM9999</literal> is the <literal>9999</literal> pattern with the <literal>FM</literal> modifier. <xref linkend=\"functions-formatting-numericmod-table\"/> shows the modifier patterns for numeric formatting."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5813(title) 
msgid "Template Pattern Modifiers for Numeric Formatting"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5826(literal) 
msgid "FM9999"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5831(literal) 
msgid "999TH"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5836(literal) 
msgid "999th"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5842(para) 
msgid "<xref linkend=\"functions-formatting-examples-table\"/> shows some examples of the use of the <function>to_char</function> function."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5848(title) 
msgid "<function>to_char</function> Examples"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5852(entry) /tmp/cicero-BGQN/func.xml:7079(entry) 
msgid "Expression"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5858(literal) 
msgid "to_char(current_timestamp, 'Day, DD  HH12:MI:SS')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5859(literal) 
msgid "'Tuesday  , 06  05:39:18'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5862(literal) 
msgid "to_char(current_timestamp, 'FMDay, FMDD  HH12:MI:SS')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5863(literal) 
msgid "'Tuesday, 6  05:39:18'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5866(literal) 
msgid "to_char(-0.1, '99.99')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5867(literal) 
msgid "'  -.10'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5870(literal) 
msgid "to_char(-0.1, 'FM9.99')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5871(literal) 
msgid "'-.1'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5874(literal) 
msgid "to_char(0.1, '0.9')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5875(literal) 
msgid "' 0.1'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5878(literal) 
msgid "to_char(12, '9990999.9')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5879(literal) 
msgid "'    0012.0'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5882(literal) 
msgid "to_char(12, 'FM9990999.9')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5883(literal) 
msgid "'0012.'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5886(literal) 
msgid "to_char(485, '999')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5887(literal) 
msgid "' 485'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5890(literal) 
msgid "to_char(-485, '999')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5891(literal) /tmp/cicero-BGQN/func.xml:5951(literal) 
msgid "'-485'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5894(literal) 
msgid "to_char(485, '9 9 9')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5895(literal) 
msgid "' 4 8 5'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5898(literal) 
msgid "to_char(1485, '9,999')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5899(literal) 
msgid "' 1,485'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5902(literal) 
msgid "to_char(1485, '9G999')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5903(literal) 
msgid "' 1 485'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5906(literal) 
msgid "to_char(148.5, '999.999')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5907(literal) 
msgid "' 148.500'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5910(literal) 
msgid "to_char(148.5, 'FM999.999')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5911(literal) 
msgid "'148.5'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5914(literal) 
msgid "to_char(148.5, 'FM999.990')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5915(literal) 
msgid "'148.500'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5918(literal) 
msgid "to_char(148.5, '999D999')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5919(literal) 
msgid "' 148,500'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5922(literal) 
msgid "to_char(3148.5, '9G999D999')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5923(literal) 
msgid "' 3 148,500'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5926(literal) 
msgid "to_char(-485, '999S')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5927(literal) /tmp/cicero-BGQN/func.xml:5931(literal) 
msgid "'485-'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5930(literal) 
msgid "to_char(-485, '999MI')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5934(literal) 
msgid "to_char(485, '999MI')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5935(literal) 
msgid "'485 '"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5938(literal) 
msgid "to_char(485, 'FM999MI')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5939(literal) 
msgid "'485'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5942(literal) 
msgid "to_char(485, 'PL999')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5943(literal) /tmp/cicero-BGQN/func.xml:5947(literal) 
msgid "'+485'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5946(literal) 
msgid "to_char(485, 'SG999')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5950(literal) 
msgid "to_char(-485, 'SG999')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5954(literal) 
msgid "to_char(-485, '9SG99')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5955(literal) 
msgid "'4-85'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5958(literal) 
msgid "to_char(-485, '999PR')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5959(literal) 
msgid "'&lt;485&gt;'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5962(literal) 
msgid "to_char(485, 'L999')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5963(literal) 
msgid "'DM 485"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5966(literal) 
msgid "to_char(485, 'RN')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5967(literal) 
msgid "'        CDLXXXV'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5970(literal) 
msgid "to_char(485, 'FMRN')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5971(literal) 
msgid "'CDLXXXV'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5974(literal) 
msgid "to_char(5.2, 'FMRN')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5975(literal) 
msgid "'V'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5978(literal) 
msgid "to_char(482, '999th')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5979(literal) 
msgid "' 482nd'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5982(literal) 
msgid "to_char(485, '\"Good number:\"999')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5983(literal) 
msgid "'Good number: 485'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5986(literal) 
msgid "to_char(485.8, '\"Pre:\"999\" Post:\" .999')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5987(literal) 
msgid "'Pre: 485 Post: .800'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5990(literal) 
msgid "to_char(12, '99V999')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5991(literal) 
msgid "' 12000'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5994(literal) 
msgid "to_char(12.4, '99V999')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5995(literal) 
msgid "' 12400'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5998(literal) 
msgid "to_char(12.45, '99V9')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:5999(literal) 
msgid "' 125'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6002(literal) 
msgid "to_char(0.0004859, '9.99EEEE')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6003(literal) 
msgid "' 4.86e-04'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6013(title) 
msgid "Date/Time Functions and Operators"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6015(para) 
msgid "<xref linkend=\"functions-datetime-table\"/> shows the available functions for date/time value processing, with details appearing in the following subsections. <xref linkend=\"operators-datetime-table\"/> illustrates the behaviors of the basic arithmetic operators (<literal>+</literal>, <literal>*</literal>, etc.). For formatting functions, refer to <xref linkend=\"functions-formatting\"/>. You should be familiar with the background information on date/time data types from <xref linkend=\"datatype-datetime\"/>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6027(para) 
msgid "All the functions and operators described below that take <type>time</type> or <type>timestamp</type> inputs actually come in two variants: one that takes <type>time with time zone</type> or <type>timestamp with time zone</type>, and one that takes <type>time without time zone</type> or <type>timestamp without time zone</type>. For brevity, these variants are not shown separately. Also, the <literal>+</literal> and <literal>*</literal> operators come in commutative pairs (for example both date + integer and integer + date); we show only one of each such pair."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6038(title) 
msgid "Date/Time Operators"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6052(literal) 
msgid "date '2001-09-28' + integer '7'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6053(literal) 
msgid "date '2001-10-05'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6058(literal) 
msgid "date '2001-09-28' + interval '1 hour'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6059(literal) 
msgid "timestamp '2001-09-28 01:00:00'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6064(literal) 
msgid "date '2001-09-28' + time '03:00'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6065(literal) 
msgid "timestamp '2001-09-28 03:00:00'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6070(literal) 
msgid "interval '1 day' + interval '1 hour'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6071(literal) 
msgid "interval '1 day 01:00:00'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6076(literal) 
msgid "timestamp '2001-09-28 01:00' + interval '23 hours'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6077(literal) 
msgid "timestamp '2001-09-29 00:00:00'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6082(literal) 
msgid "time '01:00' + interval '3 hours'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6083(literal) 
msgid "time '04:00:00'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6088(literal) 
msgid "- interval '23 hours'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6089(literal) 
msgid "interval '-23:00:00'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6094(literal) 
msgid "date '2001-10-01' - date '2001-09-28'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6095(literal) 
msgid "integer '3'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6095(entry) 
msgid "<placeholder-1/> (days)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6100(literal) 
msgid "date '2001-10-01' - integer '7'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6101(literal) 
msgid "date '2001-09-24'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6106(literal) 
msgid "date '2001-09-28' - interval '1 hour'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6107(literal) 
msgid "timestamp '2001-09-27 23:00:00'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6112(literal) 
msgid "time '05:00' - time '03:00'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6113(literal) 
msgid "interval '02:00:00'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6118(literal) 
msgid "time '05:00' - interval '2 hours'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6119(literal) 
msgid "time '03:00:00'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6124(literal) 
msgid "timestamp '2001-09-28 23:00' - interval '23 hours'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6125(literal) 
msgid "timestamp '2001-09-28 00:00:00'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6130(literal) 
msgid "interval '1 day' - interval '1 hour'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6131(literal) 
msgid "interval '1 day -01:00:00'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6136(literal) 
msgid "timestamp '2001-09-29 03:00' - timestamp '2001-09-27 12:00'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6137(literal) 
msgid "interval '1 day 15:00:00'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6142(literal) 
msgid "900 * interval '1 second'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6143(literal) 
msgid "interval '00:15:00'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6148(literal) 
msgid "21 * interval '1 day'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6149(literal) 
msgid "interval '21 days'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6154(literal) 
msgid "double precision '3.5' * interval '1 hour'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6155(literal) 
msgid "interval '03:30:00'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6160(literal) 
msgid "interval '1 hour' / double precision '1.5'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6161(literal) 
msgid "interval '00:40:00'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6168(title) 
msgid "Date/Time Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6184(primary) 
msgid "age"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6186(function) 
msgid "age(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6189(quote) 
msgid "symbolic"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6189(entry) 
msgid "Subtract arguments, producing a <placeholder-1/> result that uses years and months"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6191(literal) 
msgid "age(timestamp '2001-04-10', timestamp '1957-06-13')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6192(literal) 
msgid "43 years 9 mons 27 days"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6196(function) 
msgid "age(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6198(function) /tmp/cicero-BGQN/func.xml:6221(primary) /tmp/cicero-BGQN/func.xml:6223(function) 
msgid "current_date"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6198(entry) 
msgid "Subtract from <placeholder-1/> (at midnight)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6199(literal) 
msgid "age(timestamp '1957-06-13')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6200(literal) 
msgid "43 years 8 mons 3 days"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6206(primary) /tmp/cicero-BGQN/func.xml:6464(function) 
msgid "clock_timestamp"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6208(function) 
msgid "clock_timestamp()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6211(entry) 
msgid "Current date and time (changes during statement execution); see <xref linkend=\"functions-datetime-current\"/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6226(entry) 
msgid "Current date; see <xref linkend=\"functions-datetime-current\"/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6236(primary) /tmp/cicero-BGQN/func.xml:6238(function) 
msgid "current_time"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6240(type) /tmp/cicero-BGQN/func.xml:7105(type) /tmp/cicero-BGQN/func.xml:7107(type) 
msgid "time with time zone"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6241(entry) /tmp/cicero-BGQN/func.xml:6403(entry) 
msgid "Current time of day; see <xref linkend=\"functions-datetime-current\"/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6251(primary) /tmp/cicero-BGQN/func.xml:6253(function) 
msgid "current_timestamp"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6256(entry) /tmp/cicero-BGQN/func.xml:6418(entry) /tmp/cicero-BGQN/func.xml:6433(entry) /tmp/cicero-BGQN/func.xml:6479(entry) 
msgid "Current date and time (start of current transaction); see <xref linkend=\"functions-datetime-current\"/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6266(primary) /tmp/cicero-BGQN/func.xml:6557(primary) 
msgid "date_part"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6268(function) /tmp/cicero-BGQN/func.xml:6279(function) 
msgid "date_part(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6271(function) /tmp/cicero-BGQN/func.xml:6282(function) /tmp/cicero-BGQN/func.xml:6305(primary) /tmp/cicero-BGQN/func.xml:6307(function) /tmp/cicero-BGQN/func.xml:6318(function) /tmp/cicero-BGQN/func.xml:6560(primary) 
msgid "extract"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6271(entry) /tmp/cicero-BGQN/func.xml:6281(entry) 
msgid "Get subfield (equivalent to <placeholder-1/>); see <xref linkend=\"functions-datetime-extract\"/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6274(literal) 
msgid "date_part('hour', timestamp '2001-02-16 20:38:40')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6284(literal) 
msgid "date_part('month', interval '2 years 3 months')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6291(primary) /tmp/cicero-BGQN/func.xml:6997(function) /tmp/cicero-BGQN/func.xml:7000(primary) 
msgid "date_trunc"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6293(function) 
msgid "date_trunc(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6296(entry) 
msgid "Truncate to specified precision; see also <xref linkend=\"functions-datetime-trunc\"/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6298(literal) 
msgid "date_trunc('hour', timestamp '2001-02-16 20:38:40')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6299(literal) 
msgid "2001-02-16 20:00:00"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6307(literal) /tmp/cicero-BGQN/func.xml:6318(literal) 
msgid "<placeholder-1/>(<placeholder-2/> from <placeholder-3/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6311(entry) /tmp/cicero-BGQN/func.xml:6321(entry) 
msgid "Get subfield; see <xref linkend=\"functions-datetime-extract\"/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6313(literal) 
msgid "extract(hour from timestamp '2001-02-16 20:38:40')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6323(literal) 
msgid "extract(month from interval '2 years 3 months')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6330(primary) 
msgid "isfinite"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6332(function) /tmp/cicero-BGQN/func.xml:6341(function) /tmp/cicero-BGQN/func.xml:6349(function) 
msgid "isfinite(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6334(type) /tmp/cicero-BGQN/func.xml:6342(type) /tmp/cicero-BGQN/func.xml:6350(type) /tmp/cicero-BGQN/func.xml:7718(type) /tmp/cicero-BGQN/func.xml:7724(type) /tmp/cicero-BGQN/func.xml:9662(type) /tmp/cicero-BGQN/func.xml:12369(type) /tmp/cicero-BGQN/func.xml:12421(type) /tmp/cicero-BGQN/func.xml:12673(type) /tmp/cicero-BGQN/func.xml:12680(type) /tmp/cicero-BGQN/func.xml:12689(type) /tmp/cicero-BGQN/func.xml:12697(type) /tmp/cicero-BGQN/func.xml:12705(type) /tmp/cicero-BGQN/func.xml:12712(type) /tmp/cicero-BGQN/func.xml:12720(type) /tmp/cicero-BGQN/func.xml:12727(type) /tmp/cicero-BGQN/func.xml:12735(type) /tmp/cicero-BGQN/func.xml:12742(type) /tmp/cicero-BGQN/func.xml:12750(type) /tmp/cicero-BGQN/func.xml:12757(type) /tmp/cicero-BGQN/func.xml:12765(type) /tmp/cicero-BGQN/func.xml:12772(type) /tmp/cicero-BGQN/func.xml:12780(type) /tmp/cicero-BGQN/func.xml:12787(type) /tmp/cicero-BGQN/func.xml:12795(type) /tmp/cicero-BGQN/func.xml:12802(type) /tmp/cicero-BGQN/func.xml:12810(type) /tmp/cicero-BGQN/func.xml:12817(type) /tmp/cicero-BGQN/func.xml:12825(type) /tmp/cicero-BGQN/func.xml:12832(type) /tmp/cicero-BGQN/func.xml:12840(type) /tmp/cicero-BGQN/func.xml:12847(type) /tmp/cicero-BGQN/func.xml:13078(type) /tmp/cicero-BGQN/func.xml:13084(type) /tmp/cicero-BGQN/func.xml:13090(type) /tmp/cicero-BGQN/func.xml:13096(type) /tmp/cicero-BGQN/func.xml:13102(type) /tmp/cicero-BGQN/func.xml:13108(type) /tmp/cicero-BGQN/func.xml:13114(type) /tmp/cicero-BGQN/func.xml:13120(type) /tmp/cicero-BGQN/func.xml:13126(type) /tmp/cicero-BGQN/func.xml:13132(type) /tmp/cicero-BGQN/func.xml:13138(type) /tmp/cicero-BGQN/func.xml:13698(type) /tmp/cicero-BGQN/func.xml:13899(type) /tmp/cicero-BGQN/func.xml:13906(type) /tmp/cicero-BGQN/func.xml:13913(type) /tmp/cicero-BGQN/func.xml:13920(type) /tmp/cicero-BGQN/func.xml:14023(type) /tmp/cicero-BGQN/func.xml:14713(type) /tmp/cicero-BGQN/func.xml:14720(type) /tmp/cicero-BGQN/func.xml:14734(type) /tmp/cicero-BGQN/func.xml:14741(type) /tmp/cicero-BGQN/func.xml:14776(type) /tmp/cicero-BGQN/func.xml:14783(type) /tmp/cicero-BGQN/func.xml:14790(type) /tmp/cicero-BGQN/func.xml:14797(type) /tmp/cicero-BGQN/func.xml:14804(type) /tmp/cicero-BGQN/func.xml:14811(type) /tmp/cicero-BGQN/func.xml:14818(type) /tmp/cicero-BGQN/func.xml:14825(type) 
msgid "boolean"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6335(entry) 
msgid "Test for finite date (not +/-infinity)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6336(literal) 
msgid "isfinite(date '2001-02-16')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6337(literal) /tmp/cicero-BGQN/func.xml:6345(literal) /tmp/cicero-BGQN/func.xml:6353(literal) /tmp/cicero-BGQN/func.xml:6513(computeroutput) /tmp/cicero-BGQN/func.xml:6522(computeroutput) 
msgid "true"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6343(entry) 
msgid "Test for finite time stamp (not +/-infinity)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6344(literal) 
msgid "isfinite(timestamp '2001-02-16 21:28:30')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6351(entry) 
msgid "Test for finite interval"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6352(literal) 
msgid "isfinite(interval '4 hours')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6359(primary) /tmp/cicero-BGQN/func.xml:6390(function) 
msgid "justify_days"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6361(function) 
msgid "justify_days(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6364(entry) 
msgid "Adjust interval so 30-day time periods are represented as months"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6365(literal) 
msgid "justify_days(interval '35 days')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6366(literal) 
msgid "1 mon 5 days"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6372(primary) /tmp/cicero-BGQN/func.xml:6390(function) 
msgid "justify_hours"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6374(function) 
msgid "justify_hours(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6377(entry) 
msgid "Adjust interval so 24-hour time periods are represented as days"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6378(literal) 
msgid "justify_hours(interval '27 hours')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6379(literal) 
msgid "1 day 03:00:00"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6385(primary) 
msgid "justify_interval"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6387(function) 
msgid "justify_interval(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6390(entry) 
msgid "Adjust interval using <placeholder-1/> and <placeholder-2/>, with additional sign adjustments"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6391(literal) 
msgid "justify_interval(interval '1 mon -1 hour')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6392(literal) 
msgid "29 days 23:00:00"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6398(primary) /tmp/cicero-BGQN/func.xml:6400(function) 
msgid "localtime"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6402(type) /tmp/cicero-BGQN/func.xml:7153(primary) 
msgid "time"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6413(primary) /tmp/cicero-BGQN/func.xml:6415(function) 
msgid "localtimestamp"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6428(primary) 
msgid "now"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6430(function) 
msgid "now()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6443(primary) 
msgid "statement_timestamp"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6445(function) 
msgid "statement_timestamp()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6448(entry) 
msgid "Current date and time (start of current statement); see <xref linkend=\"functions-datetime-current\"/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6458(primary) 
msgid "timeofday"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6460(function) 
msgid "timeofday()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6463(entry) 
msgid "Current date and time (like <placeholder-1/>, but as a <placeholder-2/> string); see <xref linkend=\"functions-datetime-current\"/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6474(primary) 
msgid "transaction_timestamp"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6476(function) 
msgid "transaction_timestamp()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6489(para) 
msgid "In addition to these functions, the SQL <literal>OVERLAPS</literal> operator is supported: <synopsis>\n(<replaceable>start1</replaceable>, <replaceable>end1</replaceable>) OVERLAPS (<replaceable>start2</replaceable>, <replaceable>end2</replaceable>)\n(<replaceable>start1</replaceable>, <replaceable>length1</replaceable>) OVERLAPS (<replaceable>start2</replaceable>, <replaceable>length2</replaceable>)\n</synopsis> This expression yields true when two time periods (defined by their endpoints) overlap, false when they do not overlap. The endpoints can be specified as pairs of dates, times, or time stamps; or as a date, time, or time stamp followed by an interval. When a pair of values is provided, either the start or the end can be written first; <literal>OVERLAPS</literal> automatically takes the earlier value of the pair as the start. Each time period is considered to represent the half-open interval <replaceable>start</replaceable><literal>&lt;=</literal><replaceable>time</replaceable><literal>&lt;</literal><replaceable>end</replaceable>, unless <replaceable>start</replaceable> and <replaceable>end</replaceable> are equal in which case it represents that single time instant. This means for instance that two time periods with only an endpoint in common do not overlap."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6513(lineannotation) /tmp/cicero-BGQN/func.xml:6516(lineannotation) /tmp/cicero-BGQN/func.xml:6519(lineannotation) /tmp/cicero-BGQN/func.xml:6522(lineannotation) /tmp/cicero-BGQN/func.xml:6591(lineannotation) /tmp/cicero-BGQN/func.xml:6593(lineannotation) /tmp/cicero-BGQN/func.xml:6624(lineannotation) /tmp/cicero-BGQN/func.xml:6627(lineannotation) /tmp/cicero-BGQN/func.xml:6644(lineannotation) /tmp/cicero-BGQN/func.xml:6659(lineannotation) /tmp/cicero-BGQN/func.xml:6679(lineannotation) /tmp/cicero-BGQN/func.xml:6696(lineannotation) /tmp/cicero-BGQN/func.xml:6699(lineannotation) /tmp/cicero-BGQN/func.xml:6725(lineannotation) /tmp/cicero-BGQN/func.xml:6740(lineannotation) /tmp/cicero-BGQN/func.xml:6759(lineannotation) /tmp/cicero-BGQN/func.xml:6761(lineannotation) /tmp/cicero-BGQN/func.xml:6783(lineannotation) /tmp/cicero-BGQN/func.xml:6797(lineannotation) /tmp/cicero-BGQN/func.xml:6823(lineannotation) /tmp/cicero-BGQN/func.xml:6837(lineannotation) /tmp/cicero-BGQN/func.xml:6853(lineannotation) /tmp/cicero-BGQN/func.xml:6856(lineannotation) /tmp/cicero-BGQN/func.xml:6859(lineannotation) /tmp/cicero-BGQN/func.xml:6873(lineannotation) /tmp/cicero-BGQN/func.xml:6889(lineannotation) /tmp/cicero-BGQN/func.xml:6892(lineannotation) /tmp/cicero-BGQN/func.xml:6944(lineannotation) /tmp/cicero-BGQN/func.xml:6959(lineannotation) /tmp/cicero-BGQN/func.xml:6988(lineannotation) /tmp/cicero-BGQN/func.xml:6991(lineannotation) 
msgid "Result:"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6516(computeroutput) /tmp/cicero-BGQN/func.xml:6519(computeroutput) 
#, no-wrap
msgid "false"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6510(screen) 
#, no-wrap
msgid "\nSELECT (DATE '2001-02-16', DATE '2001-12-21') OVERLAPS\n       (DATE '2001-10-30', DATE '2002-10-30');\n<placeholder-1/><placeholder-2/>\nSELECT (DATE '2001-02-16', INTERVAL '100 days') OVERLAPS\n       (DATE '2001-10-30', DATE '2002-10-30');\n<placeholder-3/><placeholder-4/>\nSELECT (DATE '2001-10-29', DATE '2001-10-30') OVERLAPS\n       (DATE '2001-10-30', DATE '2001-10-31');\n<placeholder-5/><placeholder-6/>\nSELECT (DATE '2001-10-30', DATE '2001-10-30') OVERLAPS\n       (DATE '2001-10-30', DATE '2001-10-31');\n<placeholder-7/><placeholder-8/>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6525(para) 
msgid "When adding an <type>interval</type> value to (or subtracting an <type>interval</type> value from) a <type>timestamp with time zone</type> value, the days component advances (or decrements) the date of the <type>timestamp with time zone</type> by the indicated number of days. Across daylight saving time changes (with the session time zone set to a time zone that recognizes DST), this means <literal>interval '1 day'</literal> does not necessarily equal <literal>interval '24 hours'</literal>. For example, with the session time zone set to <literal>CST7CDT</literal>, <literal>timestamp with time zone '2005-04-02 12:00-07' + interval '1 day' </literal> will produce <literal>timestamp with time zone '2005-04-03 12:00-06'</literal>, while adding <literal>interval '24 hours'</literal> to the same initial <type>timestamp with time zone</type> produces <literal>timestamp with time zone '2005-04-03 13:00-06'</literal>, as there is a change in daylight saving time at <literal>2005-04-03 02:00</literal> in time zone <literal>CST7CDT</literal>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6543(para) 
msgid "Note there can be ambiguity in the <literal>months</literal> returned by <function>age</function> because different months have a different number of days. <productname>PostgreSQL</productname>'s approach uses the month from the earlier of the two dates when calculating partial months. For example, <literal>age('2004-06-01', '2004-04-30')</literal> uses April to yield <literal>1 mon 1 day</literal>, while using May would yield <literal>1 mon 2 days</literal> because May has 31 days, while April has only 30."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6554(title) 
msgid "<function>EXTRACT</function>, <function>date_part</function>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6564(replaceable) 
msgid "source"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6563(synopsis) 
#, no-wrap
msgid "\nEXTRACT(<placeholder-1/> FROM <placeholder-2/>)\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6583(literal) /tmp/cicero-BGQN/func.xml:7038(literal) 
msgid "century"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6585(para) 
msgid "The century"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6593(computeroutput) 
#, no-wrap
msgid "21"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6589(screen) 
#, no-wrap
msgid "\nSELECT EXTRACT(CENTURY FROM TIMESTAMP '2000-12-16 12:21:13');\n<placeholder-1/><placeholder-2/>\nSELECT EXTRACT(CENTURY FROM TIMESTAMP '2001-02-16 20:38:40');\n<placeholder-3/><placeholder-4/>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6596(para) 
msgid "The first century starts at 0001-01-01 00:00:00 AD, although they did not know it at the time. This definition applies to all Gregorian calendar countries. There is no century number 0, you go from -1 century to 1 century. If you disagree with this, please write your complaint to: Pope, Cathedral Saint-Peter of Roma, Vatican."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6606(para) 
msgid "<productname>PostgreSQL</productname> releases before 8.0 did not follow the conventional numbering of centuries, but just returned the year field divided by 100."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6617(para) 
msgid "For <type>timestamp</type> values, the day (of the month) field (1 - 31) ; for <type>interval</type> values, the number of days"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6627(computeroutput) /tmp/cicero-BGQN/func.xml:6889(computeroutput) 
#, no-wrap
msgid "40"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6622(screen) 
#, no-wrap
msgid "\nSELECT EXTRACT(DAY FROM TIMESTAMP '2001-02-16 20:38:40');\n<placeholder-1/><placeholder-2/>\n\nSELECT EXTRACT(DAY FROM INTERVAL '40 days 1 minute');\n<placeholder-3/><placeholder-4/>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6636(literal) /tmp/cicero-BGQN/func.xml:7037(literal) 
msgid "decade"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6638(para) 
msgid "The year field divided by 10"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6644(computeroutput) 
#, no-wrap
msgid "200"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6642(screen) 
#, no-wrap
msgid "\nSELECT EXTRACT(DECADE FROM TIMESTAMP '2001-02-16 20:38:40');\n<placeholder-1/><placeholder-2/>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6650(literal) 
msgid "dow"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6652(para) 
msgid "The day of the week as Sunday(<literal>0</literal>) to Saturday(<literal>6</literal>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6657(screen) 
#, no-wrap
msgid "\nSELECT EXTRACT(DOW FROM TIMESTAMP '2001-02-16 20:38:40');\n<placeholder-1/><placeholder-2/>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6661(para) 
msgid "Note that <function>extract</function>'s day of the week numbering differs from that of the <function>to_char(..., 'D')</function> function."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6671(literal) 
msgid "doy"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6673(para) 
msgid "The day of the year (1 - 365/366)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6679(computeroutput) 
#, no-wrap
msgid "47"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6677(screen) 
#, no-wrap
msgid "\nSELECT EXTRACT(DOY FROM TIMESTAMP '2001-02-16 20:38:40');\n<placeholder-1/><placeholder-2/>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6685(literal) 
msgid "epoch"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6687(para) 
msgid "For <type>date</type> and <type>timestamp</type> values, the number of seconds since 1970-01-01 00:00:00 UTC (can be negative); for <type>interval</type> values, the total number of seconds in the interval"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6696(computeroutput) 
#, no-wrap
msgid "982384720.12"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6699(computeroutput) 
#, no-wrap
msgid "442800"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6694(screen) 
#, no-wrap
msgid "\nSELECT EXTRACT(EPOCH FROM TIMESTAMP WITH TIME ZONE '2001-02-16 20:38:40.12-08');\n<placeholder-1/><placeholder-2/>\n\nSELECT EXTRACT(EPOCH FROM INTERVAL '5 days 3 hours');\n<placeholder-3/><placeholder-4/>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6702(para) 
msgid "Here is how you can convert an epoch value back to a time stamp:"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6706(screen) 
#, no-wrap
msgid "\nSELECT TIMESTAMP WITH TIME ZONE 'epoch' + 982384720.12 * INTERVAL '1 second';\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6709(para) 
msgid "(The <function>to_timestamp</function> function encapsulates the above conversion.)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6717(literal) /tmp/cicero-BGQN/func.xml:7031(literal) 
msgid "hour"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6719(para) 
msgid "The hour field (0 - 23)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6723(screen) 
#, no-wrap
msgid "\nSELECT EXTRACT(HOUR FROM TIMESTAMP '2001-02-16 20:38:40');\n<placeholder-1/><placeholder-2/>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6731(literal) 
msgid "isodow"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6733(para) 
msgid "The day of the week as Monday(<literal>1</literal>) to Sunday(<literal>7</literal>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6738(screen) 
#, no-wrap
msgid "\nSELECT EXTRACT(ISODOW FROM TIMESTAMP '2001-02-18 20:38:40');\n<placeholder-1/><placeholder-2/>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6742(para) 
msgid "This is identical to <literal>dow</literal> except for Sunday. This matches the <acronym>ISO</acronym> 8601 day of the week numbering."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6751(literal) 
msgid "isoyear"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6753(para) 
msgid "The <acronym>ISO</acronym> 8601 year that the date falls in (not applicable to intervals)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6759(computeroutput) 
#, no-wrap
msgid "2005"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6761(computeroutput) 
#, no-wrap
msgid "2006"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6757(screen) 
#, no-wrap
msgid "\nSELECT EXTRACT(ISOYEAR FROM DATE '2006-01-01');\n<placeholder-1/><placeholder-2/>\nSELECT EXTRACT(ISOYEAR FROM DATE '2006-01-02');\n<placeholder-3/><placeholder-4/>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6764(para) 
msgid "Each <acronym>ISO</acronym> year begins with the Monday of the week containing the 4th of January, so in early January or late December the <acronym>ISO</acronym> year may be different from the Gregorian year. See the <literal>week</literal> field for more information."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6767(para) 
msgid "This field is not available in PostgreSQL releases prior to 8.3."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6774(literal) /tmp/cicero-BGQN/func.xml:7027(literal) 
msgid "microseconds"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6776(para) 
msgid "The seconds field, including fractional parts, multiplied by 1 000 000; note that this includes full seconds"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6783(computeroutput) 
#, no-wrap
msgid "28500000"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6781(screen) 
#, no-wrap
msgid "\nSELECT EXTRACT(MICROSECONDS FROM TIME '17:12:28.5');\n<placeholder-1/><placeholder-2/>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6789(literal) /tmp/cicero-BGQN/func.xml:7039(literal) 
msgid "millennium"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6791(para) 
msgid "The millennium"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6795(screen) 
#, no-wrap
msgid "\nSELECT EXTRACT(MILLENNIUM FROM TIMESTAMP '2001-02-16 20:38:40');\n<placeholder-1/><placeholder-2/>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6800(para) 
msgid "Years in the 1900s are in the second millennium. The third millennium started January 1, 2001."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6805(para) 
msgid "<productname>PostgreSQL</productname> releases before 8.0 did not follow the conventional numbering of millennia, but just returned the year field divided by 1000."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6814(literal) /tmp/cicero-BGQN/func.xml:7028(literal) 
msgid "milliseconds"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6816(para) 
msgid "The seconds field, including fractional parts, multiplied by 1000. Note that this includes full seconds."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6823(computeroutput) 
#, no-wrap
msgid "28500"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6821(screen) 
#, no-wrap
msgid "\nSELECT EXTRACT(MILLISECONDS FROM TIME '17:12:28.5');\n<placeholder-1/><placeholder-2/>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6829(literal) /tmp/cicero-BGQN/func.xml:7030(literal) 
msgid "minute"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6831(para) 
msgid "The minutes field (0 - 59)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6837(computeroutput) 
#, no-wrap
msgid "38"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6835(screen) 
#, no-wrap
msgid "\nSELECT EXTRACT(MINUTE FROM TIMESTAMP '2001-02-16 20:38:40');\n<placeholder-1/><placeholder-2/>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6845(para) 
msgid "For <type>timestamp</type> values, the number of the month within the year (1 - 12) ; for <type>interval</type> values, the number of months, modulo 12 (0 - 11)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6851(screen) 
#, no-wrap
msgid "\nSELECT EXTRACT(MONTH FROM TIMESTAMP '2001-02-16 20:38:40');\n<placeholder-1/><placeholder-2/>\n\nSELECT EXTRACT(MONTH FROM INTERVAL '2 years 3 months');\n<placeholder-3/><placeholder-4/>\n\nSELECT EXTRACT(MONTH FROM INTERVAL '2 years 13 months');\n<placeholder-5/><placeholder-6/>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6865(literal) /tmp/cicero-BGQN/func.xml:7035(literal) 
msgid "quarter"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6867(para) 
msgid "The quarter of the year (1 - 4) that the date is in"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6871(screen) 
#, no-wrap
msgid "\nSELECT EXTRACT(QUARTER FROM TIMESTAMP '2001-02-16 20:38:40');\n<placeholder-1/><placeholder-2/>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6879(literal) /tmp/cicero-BGQN/func.xml:7029(literal) 
msgid "second"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6883(simpara) 
msgid "60 if leap seconds are implemented by the operating system"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6881(para) 
msgid "The seconds field, including fractional parts (0 - 59<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6892(computeroutput) 
#, no-wrap
msgid "28.5"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6887(screen) 
#, no-wrap
msgid "\nSELECT EXTRACT(SECOND FROM TIMESTAMP '2001-02-16 20:38:40');\n<placeholder-1/><placeholder-2/>\n\nSELECT EXTRACT(SECOND FROM TIME '17:12:28.5');\n<placeholder-3/><placeholder-4/>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6897(literal) 
msgid "timezone"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6899(para) 
msgid "The time zone offset from UTC, measured in seconds. Positive values correspond to time zones east of UTC, negative values to zones west of UTC."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6908(literal) 
msgid "timezone_hour"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6910(para) 
msgid "The hour component of the time zone offset"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6917(literal) 
msgid "timezone_minute"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6919(para) 
msgid "The minute component of the time zone offset"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6926(literal) /tmp/cicero-BGQN/func.xml:7033(literal) 
msgid "week"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6928(para) 
msgid "The number of the week of the year that the day is in. By definition (<acronym>ISO</acronym> 8601), the first week of a year contains January 4 of that year. (The <acronym>ISO</acronym>-8601 week starts on Monday.) In other words, the first Thursday of a year is in week 1 of that year."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6935(para) 
msgid "Because of this, it is possible for early January dates to be part of the 52nd or 53rd week of the previous year. For example, <literal>2005-01-01</literal> is part of the 53rd week of year 2004, and <literal>2006-01-01</literal> is part of the 52nd week of year 2005."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6942(screen) 
#, no-wrap
msgid "\nSELECT EXTRACT(WEEK FROM TIMESTAMP '2001-02-16 20:38:40');\n<placeholder-1/><placeholder-2/>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6950(literal) /tmp/cicero-BGQN/func.xml:7036(literal) 
msgid "year"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6952(para) 
msgid "The year field. Keep in mind there is no <literal>0 AD</literal>, so subtracting <literal>BC</literal> years from <literal>AD</literal> years should be done with care."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6959(computeroutput) 
#, no-wrap
msgid "2001"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6957(screen) 
#, no-wrap
msgid "\nSELECT EXTRACT(YEAR FROM TIMESTAMP '2001-02-16 20:38:40');\n<placeholder-1/><placeholder-2/>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6567(para) 
msgid "The <function>extract</function> function retrieves subfields such as year or hour from date/time values. <replaceable>source</replaceable> must be a value expression of type <type>timestamp</type>, <type>time</type>, or <type>interval</type>. (Expressions of type <type>date</type> are cast to <type>timestamp</type> and can therefore be used as well.) <replaceable>field</replaceable> is an identifier or string that selects what field to extract from the source value. The <function>extract</function> function returns values of type <type>double precision</type>. The following are valid field names: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6967(para) 
msgid "The <function>extract</function> function is primarily intended for computational processing. For formatting date/time values for display, see <xref linkend=\"functions-formatting\"/>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6973(para) 
msgid "The <function>date_part</function> function is modeled on the traditional <productname>Ingres</productname> equivalent to the <acronym>SQL</acronym>-standard function <function>extract</function>: <synopsis>\ndate_part('<replaceable>field</replaceable>', <replaceable>source</replaceable>)\n</synopsis> Note that here the <replaceable>field</replaceable> parameter needs to be a string value, not a name. The valid field names for <function>date_part</function> are the same as for <function>extract</function>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:6986(screen) 
#, no-wrap
msgid "\nSELECT date_part('day', TIMESTAMP '2001-02-16 20:38:40');\n<placeholder-1/><placeholder-2/>\n\nSELECT date_part('hour', INTERVAL '4 hours 3 minutes');\n<placeholder-3/><placeholder-4/>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7003(para) 
msgid "The function <function>date_trunc</function> is conceptually similar to the <function>trunc</function> function for numbers."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7008(para) 
msgid "<synopsis>\ndate_trunc('<replaceable>field</replaceable>', <replaceable>source</replaceable>)\n</synopsis><replaceable>source</replaceable> is a value expression of type <type>timestamp</type> or <type>interval</type>. (Values of type <type>date</type> and <type>time</type> are cast automatically to <type>timestamp</type> or <type>interval</type>, respectively.) <replaceable>field</replaceable> selects to which precision to truncate the input value. The return value is of type <type>timestamp</type> or <type>interval</type> with all fields that are less significant than the selected one set to zero (or one, for day and month)."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7024(para) 
msgid "Valid values for <replaceable>field</replaceable> are: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7043(para) 
msgid "Examples: <screen>\nSELECT date_trunc('hour', TIMESTAMP '2001-02-16 20:38:40');\n<lineannotation>Result: </lineannotation><computeroutput>2001-02-16 20:00:00</computeroutput>\n\nSELECT date_trunc('year', TIMESTAMP '2001-02-16 20:38:40');\n<lineannotation>Result: </lineannotation><computeroutput>2001-01-01 00:00:00</computeroutput>\n</screen>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7056(literal) /tmp/cicero-BGQN/func.xml:7064(primary) 
msgid "AT TIME ZONE"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7059(primary) 
msgid "time zone"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7060(secondary) 
msgid "conversion"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7067(para) 
msgid "The <literal>AT TIME ZONE</literal> construct allows conversions of time stamps to different time zones. <xref linkend=\"functions-datetime-zoneconvert-table\"/> shows its variants."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7075(title) 
msgid "<literal>AT TIME ZONE</literal> Variants"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7088(type) /tmp/cicero-BGQN/func.xml:7098(type) 
msgid "timestamp without time zone"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7088(replaceable) /tmp/cicero-BGQN/func.xml:7096(replaceable) /tmp/cicero-BGQN/func.xml:7105(replaceable) 
msgid "zone"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7088(literal) /tmp/cicero-BGQN/func.xml:7096(literal) /tmp/cicero-BGQN/func.xml:7105(literal) 
msgid "<placeholder-1/> AT TIME ZONE <placeholder-2/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7091(emphasis) 
msgid "without time zone"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7091(entry) 
msgid "Treat given time stamp <placeholder-1/> as located in the specified time zone"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7099(emphasis) /tmp/cicero-BGQN/func.xml:7108(emphasis) 
msgid "with time zone"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7099(entry) 
msgid "Convert given time stamp <placeholder-1/> to the new time zone, with no time zone designation"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7108(entry) 
msgid "Convert given time <placeholder-1/> to the new time zone"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7114(para) 
msgid "In these expressions, the desired time zone <replaceable>zone</replaceable> can be specified either as a text string (e.g., <literal>'PST'</literal>) or as an interval (e.g., <literal>INTERVAL '-08:00'</literal>). In the text case, a time zone name can be specified in any of the ways described in <xref linkend=\"datatype-timezones\"/>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7122(para) 
msgid "Examples (assuming the local time zone is <literal>PST8PDT</literal>): <screen>\nSELECT TIMESTAMP '2001-02-16 20:38:40' AT TIME ZONE 'MST';\n<lineannotation>Result: </lineannotation><computeroutput>2001-02-16 19:38:40-08</computeroutput>\n\nSELECT TIMESTAMP WITH TIME ZONE '2001-02-16 20:38:40-05' AT TIME ZONE 'MST';\n<lineannotation>Result: </lineannotation><computeroutput>2001-02-16 18:38:40</computeroutput>\n</screen> The first example takes a time stamp without time zone and interprets it as MST time (UTC-7), which is then converted to PST (UTC-8) for display. The second example takes a time stamp specified in EST (UTC-5) and converts it to local time in MST (UTC-7)."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7136(para) 
msgid "The function <literal><function>timezone</function>(<replaceable>zone</replaceable>, <replaceable>timestamp</replaceable>)</literal> is equivalent to the SQL-conforming construct <literal><replaceable>timestamp</replaceable> AT TIME ZONE <replaceable>zone</replaceable></literal>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7145(title) 
msgid "Current Date/Time"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7149(secondary) /tmp/cicero-BGQN/func.xml:7154(secondary) /tmp/cicero-BGQN/func.xml:12505(secondary) /tmp/cicero-BGQN/func.xml:12510(secondary) /tmp/cicero-BGQN/func.xml:12519(secondary) 
msgid "current"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7157(para) 
msgid "<productname>PostgreSQL</productname> provides a number of functions that return values related to the current date and time. These SQL-standard functions all return values based on the start time of the current transaction: <synopsis>\nCURRENT_DATE\nCURRENT_TIME\nCURRENT_TIMESTAMP\nCURRENT_TIME(<replaceable>precision</replaceable>)\nCURRENT_TIMESTAMP(<replaceable>precision</replaceable>)\nLOCALTIME\nLOCALTIMESTAMP\nLOCALTIME(<replaceable>precision</replaceable>)\nLOCALTIMESTAMP(<replaceable>precision</replaceable>)\n</synopsis>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7175(para) 
msgid "<function>CURRENT_TIME</function> and <function>CURRENT_TIMESTAMP</function> deliver values with time zone; <function>LOCALTIME</function> and <function>LOCALTIMESTAMP</function> deliver values without time zone."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7182(para) 
msgid "<function>CURRENT_TIME</function>, <function>CURRENT_TIMESTAMP</function>, <function>LOCALTIME</function>, and <function>LOCALTIMESTAMP</function> can optionally take a precision parameter, which causes the result to be rounded to that many fractional digits in the seconds field. Without a precision parameter, the result is given to the full available precision."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7193(para) 
msgid "Some examples: <screen>\nSELECT CURRENT_TIME;\n<lineannotation>Result: </lineannotation><computeroutput>14:39:53.662522-05</computeroutput>\n\nSELECT CURRENT_DATE;\n<lineannotation>Result: </lineannotation><computeroutput>2001-12-23</computeroutput>\n\nSELECT CURRENT_TIMESTAMP;\n<lineannotation>Result: </lineannotation><computeroutput>2001-12-23 14:39:53.662522-05</computeroutput>\n\nSELECT CURRENT_TIMESTAMP(2);\n<lineannotation>Result: </lineannotation><computeroutput>2001-12-23 14:39:53.66-05</computeroutput>\n\nSELECT LOCALTIMESTAMP;\n<lineannotation>Result: </lineannotation><computeroutput>2001-12-23 14:39:53.662522</computeroutput>\n</screen>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7213(para) 
msgid "Since these functions return the start time of the current transaction, their values do not change during the transaction. This is considered a feature: the intent is to allow a single transaction to have a consistent notion of the <quote>current</quote> time, so that multiple modifications within the same transaction bear the same time stamp."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7224(para) 
msgid "Other database systems might advance these values more frequently."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7230(para) 
msgid "<productname>PostgreSQL</productname> also provides functions that return the start time of the current statement, as well as the actual current time at the instant the function is called. The complete list of non-SQL-standard time functions is: <synopsis>\ntransaction_timestamp()\nstatement_timestamp()\nclock_timestamp()\ntimeofday()\nnow()\n</synopsis>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7244(para) 
msgid "<function>transaction_timestamp()</function> is equivalent to <function>CURRENT_TIMESTAMP</function>, but is named to clearly reflect what it returns. <function>statement_timestamp()</function> returns the start time of the current statement (more specifically, the time of receipt of the latest command message from the client). <function>statement_timestamp()</function> and <function>transaction_timestamp()</function> return the same value during the first command of a transaction, but might differ during subsequent commands. <function>clock_timestamp()</function> returns the actual current time, and therefore its value changes even within a single SQL command. <function>timeofday()</function> is a historical <productname>PostgreSQL</productname> function. Like <function>clock_timestamp()</function>, it returns the actual current time, but as a formatted <type>text</type> string rather than a <type>timestamp with time zone</type> value. <function>now()</function> is a traditional <productname>PostgreSQL</productname> equivalent to <function>transaction_timestamp()</function>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7270(programlisting) 
#, no-wrap
msgid "\nSELECT CURRENT_TIMESTAMP;\nSELECT now();\nSELECT TIMESTAMP 'now';  -- incorrect for use with DEFAULT\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7265(para) 
msgid "All the date/time data types also accept the special literal value <literal>now</literal> to specify the current date and time (again, interpreted as the transaction start time). Thus, the following three all return the same result: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7278(para) 
msgid "You do not want to use the third form when specifying a <literal>DEFAULT</literal> clause while creating a table. The system will convert <literal>now</literal> to a <type>timestamp</type> as soon as the constant is parsed, so that when the default value is needed, the time of the table creation would be used! The first two forms will not be evaluated until the default value is used, because they are function calls. Thus they will give the desired behavior of defaulting to the time of row insertion."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7292(title) 
msgid "Delaying Execution"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7295(primary) 
msgid "pg_sleep"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7298(primary) 
msgid "sleep"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7301(primary) 
msgid "delay"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7317(programlisting) 
#, no-wrap
msgid "\nSELECT pg_sleep(1.5);\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7304(para) 
msgid "The following function is available to delay execution of the server process: <synopsis>\npg_sleep(<replaceable>seconds</replaceable>)\n</synopsis><function>pg_sleep</function> makes the current session's process sleep until <replaceable>seconds</replaceable> seconds have elapsed. <replaceable>seconds</replaceable> is a value of type <type>double precision</type>, so fractional-second delays can be specified. For example: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7323(para) 
msgid "The effective resolution of the sleep interval is platform-specific; 0.01 seconds is a common value. The sleep delay will be at least as long as specified. It might be longer depending on factors such as server load."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7331(para) 
msgid "Make sure that your session does not hold more locks than necessary when calling <function>pg_sleep</function>. Otherwise other sessions might have to wait for your sleeping process, slowing down the entire system."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7344(title) /tmp/cicero-BGQN/func.xml:7360(title) 
msgid "Enum Support Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7353(programlisting) 
#, no-wrap
msgid "\nCREATE TYPE rainbow AS ENUM ('red', 'orange', 'yellow', 'green', 'blue', 'purple');\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7346(para) 
msgid "For enum types (described in <xref linkend=\"datatype-enum\"/>), there are several functions that allow cleaner programming without hard-coding particular values of an enum type. These are listed in <xref linkend=\"functions-enum-table\"/>. The examples assume an enum type created as: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7367(entry) 
msgid "Example Result"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7374(primary) 
msgid "enum_first"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7376(literal) 
msgid "enum_first(anyenum)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7378(entry) 
msgid "Returns the first value of the input enum type"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7379(literal) 
msgid "enum_first(null::rainbow)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7380(literal) 
msgid "red"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7385(primary) 
msgid "enum_last"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7387(literal) 
msgid "enum_last(anyenum)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7389(entry) 
msgid "Returns the last value of the input enum type"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7390(literal) 
msgid "enum_last(null::rainbow)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7391(literal) 
msgid "purple"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7396(primary) 
msgid "enum_range"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7398(literal) 
msgid "enum_range(anyenum)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7400(entry) 
msgid "Returns all values of the input enum type in an ordered array"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7401(literal) 
msgid "enum_range(null::rainbow)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7402(literal) 
msgid "{red,orange,yellow,green,blue,purple}"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7405(literal) 
msgid "enum_range(anyenum, anyenum)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7406(entry) 
msgid "Returns the range between the two given enum values, as an ordered array. The values must be from the same enum type. If the first parameter is null, the result will start with the first value of the enum type. If the second parameter is null, the result will end with the last value of the enum type."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7414(literal) 
msgid "enum_range('orange'::rainbow, 'green'::rainbow)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7415(literal) 
msgid "{orange,yellow,green}"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7418(literal) 
msgid "enum_range(NULL, 'green'::rainbow)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7419(literal) 
msgid "{red,orange,yellow,green}"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7422(literal) 
msgid "enum_range('orange'::rainbow, NULL)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7423(literal) 
msgid "{orange,yellow,green,blue,purple}"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7429(para) 
msgid "Notice that except for the two-argument form of <function>enum_range</function>, these functions disregard the specific value passed to them; they care only about its declared data type. Either null or a specific value of the type can be passed, with the same result. It is more common to apply these functions to a table column or function argument than to a hardwired type name as suggested by the examples."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7440(title) 
msgid "Geometric Functions and Operators"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7442(para) 
msgid "The geometric types <type>point</type>, <type>box</type>, <type>lseg</type>, <type>line</type>, <type>path</type>, <type>polygon</type>, and <type>circle</type> have a large set of native support functions and operators, shown in <xref linkend=\"functions-geometry-op-table\"/>, <xref linkend=\"functions-geometry-func-table\"/>, and <xref linkend=\"functions-geometry-conv-table\"/>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7453(para) 
msgid "Note that the <quote>same as</quote> operator, <literal>~=</literal>, represents the usual notion of equality for the <type>point</type>, <type>box</type>, <type>polygon</type>, and <type>circle</type> types. Some of these types also have an <literal>=</literal> operator, but <literal>=</literal> compares for equal <emphasis>areas</emphasis> only. The other scalar comparison operators (<literal>&lt;=</literal> and so on) likewise compare areas for these types."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7465(title) 
msgid "Geometric Operators"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7477(entry) /tmp/cicero-BGQN/func.xml:7482(entry) 
msgid "Translation"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7478(literal) 
msgid "box '((0,0),(1,1))' + point '(2.0,0)'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7483(literal) 
msgid "box '((0,0),(1,1))' - point '(2.0,0)'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7487(entry) /tmp/cicero-BGQN/func.xml:7492(entry) 
msgid "Scaling/rotation"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7488(literal) 
msgid "box '((0,0),(1,1))' * point '(2.0,0)'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7493(literal) 
msgid "box '((0,0),(2,2))' / point '(2.0,0)'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7497(entry) 
msgid "Point or box of intersection"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7498(literal) 
msgid "'((1,-1),(-1,1))' # '((1,1),(-1,-1))'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7502(entry) 
msgid "Number of points in path or polygon"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7503(literal) 
msgid "# '((1,0),(0,1),(-1,0))'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7506(literal) 
msgid "@-@"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7507(entry) 
msgid "Length or circumference"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7508(literal) 
msgid "@-@ path '((0,0),(1,0))'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7511(literal) /tmp/cicero-BGQN/func.xml:8327(literal) /tmp/cicero-BGQN/func.xml:8334(literal) 
msgid "@@"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7512(entry) 
msgid "Center"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7513(literal) 
msgid "@@ circle '((0,0),10)'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7516(literal) 
msgid "##"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7517(entry) 
msgid "Closest point to first operand on second operand"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7518(literal) 
msgid "point '(0,0)' ## lseg '((2,0),(0,2))'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7521(literal) 
msgid "&lt;-&gt;"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7522(entry) 
msgid "Distance between"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7523(literal) 
msgid "circle '((0,0),1)' &lt;-&gt; circle '((5,0),1)'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7526(literal) /tmp/cicero-BGQN/func.xml:8345(literal) /tmp/cicero-BGQN/func.xml:10152(literal) 
msgid "&amp;&amp;"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7527(entry) 
msgid "Overlaps? (One point in common makes this true.)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7528(literal) 
msgid "box '((0,0),(1,1))' &amp;&amp; box '((0,0),(2,2))'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7532(entry) 
msgid "Is strictly left of?"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7533(literal) 
msgid "circle '((0,0),1)' &lt;&lt; circle '((5,0),1)'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7537(entry) 
msgid "Is strictly right of?"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7538(literal) 
msgid "circle '((5,0),1)' &gt;&gt; circle '((0,0),1)'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7541(literal) 
msgid "&amp;&lt;"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7542(entry) 
msgid "Does not extend to the right of?"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7543(literal) 
msgid "box '((0,0),(1,1))' &amp;&lt; box '((0,0),(2,2))'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7546(literal) 
msgid "&amp;&gt;"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7547(entry) 
msgid "Does not extend to the left of?"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7548(literal) 
msgid "box '((0,0),(3,3))' &amp;&gt; box '((0,0),(2,2))'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7551(literal) 
msgid "&lt;&lt;|"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7552(entry) 
msgid "Is strictly below?"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7553(literal) 
msgid "box '((0,0),(3,3))' &lt;&lt;| box '((3,4),(5,5))'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7556(literal) 
msgid "|&gt;&gt;"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7557(entry) 
msgid "Is strictly above?"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7558(literal) 
msgid "box '((3,4),(5,5))' |&gt;&gt; box '((0,0),(3,3))'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7561(literal) 
msgid "&amp;&lt;|"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7562(entry) 
msgid "Does not extend above?"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7563(literal) 
msgid "box '((0,0),(1,1))' &amp;&lt;| box '((0,0),(2,2))'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7566(literal) 
msgid "|&amp;&gt;"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7567(entry) 
msgid "Does not extend below?"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7568(literal) 
msgid "box '((0,0),(3,3))' |&amp;&gt; box '((0,0),(2,2))'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7571(literal) 
msgid "&lt;^"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7572(entry) 
msgid "Is below (allows touching)?"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7573(literal) 
msgid "circle '((0,0),1)' &lt;^ circle '((0,5),1)'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7576(literal) 
msgid "&gt;^"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7577(entry) 
msgid "Is above (allows touching)?"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7578(literal) 
msgid "circle '((0,5),1)' &gt;^ circle '((0,0),1)'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7581(literal) 
msgid "?#"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7582(entry) 
msgid "Intersects?"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7583(literal) 
msgid "lseg '((-1,0),(1,0))' ?# box '((-2,-2),(2,2))'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7586(literal) /tmp/cicero-BGQN/func.xml:7591(literal) 
msgid "?-"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7587(entry) 
msgid "Is horizontal?"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7588(literal) 
msgid "?- lseg '((-1,0),(1,0))'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7592(entry) 
msgid "Are horizontally aligned?"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7593(literal) 
msgid "point '(1,0)' ?- point '(0,0)'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7596(literal) /tmp/cicero-BGQN/func.xml:7601(literal) 
msgid "?|"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7597(entry) 
msgid "Is vertical?"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7598(literal) 
msgid "?| lseg '((-1,0),(1,0))'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7602(entry) 
msgid "Are vertically aligned?"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7603(literal) 
msgid "point '(0,1)' ?| point '(0,0)'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7606(literal) 
msgid "?-|"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7607(entry) 
msgid "Is perpendicular?"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7608(literal) 
msgid "lseg '((0,0),(0,1))' ?-| lseg '((0,0),(1,0))'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7611(literal) 
msgid "?||"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7612(entry) 
msgid "Are parallel?"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7613(literal) 
msgid "lseg '((-1,0),(1,0))' ?|| lseg '((-1,2),(1,2))'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7616(literal) /tmp/cicero-BGQN/func.xml:8363(literal) /tmp/cicero-BGQN/func.xml:10138(literal) 
msgid "@&gt;"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7617(entry) 
msgid "Contains?"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7618(literal) 
msgid "circle '((0,0),2)' @&gt; point '(1,1)'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7621(literal) /tmp/cicero-BGQN/func.xml:8369(literal) /tmp/cicero-BGQN/func.xml:10145(literal) 
msgid "&lt;@"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7622(entry) 
msgid "Contained in or on?"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7623(literal) 
msgid "point '(1,1)' &lt;@ circle '((0,0),2)'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7626(literal) 
msgid "~="
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7627(entry) 
msgid "Same as?"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7628(literal) 
msgid "polygon '((0,0),(1,1))' ~= polygon '((1,1),(0,0))'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7635(para) 
msgid "Before <productname>PostgreSQL</productname> 8.2, the containment operators <literal>@&gt;</literal> and <literal>&lt;@</literal> were respectively called <literal>~</literal> and <literal>@</literal>. These names are still available, but are deprecated and will eventually be removed."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7644(primary) /tmp/cicero-BGQN/func.xml:7695(entry) 
msgid "area"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7647(primary) /tmp/cicero-BGQN/func.xml:7701(entry) 
msgid "center"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7650(primary) 
msgid "diameter"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7653(primary) 
msgid "height"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7656(primary) 
msgid "isclosed"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7659(primary) 
msgid "isopen"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7665(primary) 
msgid "npoints"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7668(primary) 
msgid "pclose"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7671(primary) 
msgid "popen"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7674(primary) 
msgid "radius"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7677(primary) 
msgid "width"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7681(title) 
msgid "Geometric Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7693(replaceable) /tmp/cicero-BGQN/func.xml:7699(replaceable) /tmp/cicero-BGQN/func.xml:7729(replaceable) 
msgid "object"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7693(function) 
msgid "area(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7696(literal) 
msgid "area(box '((0,0),(1,1))')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7699(function) 
msgid "center(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7700(type) /tmp/cicero-BGQN/func.xml:7799(type) /tmp/cicero-BGQN/func.xml:7799(type) /tmp/cicero-BGQN/func.xml:7822(type) /tmp/cicero-BGQN/func.xml:7845(type) /tmp/cicero-BGQN/func.xml:7845(type) /tmp/cicero-BGQN/func.xml:7857(type) /tmp/cicero-BGQN/func.xml:7864(primary) /tmp/cicero-BGQN/func.xml:7866(function) /tmp/cicero-BGQN/func.xml:7869(type) /tmp/cicero-BGQN/func.xml:7875(type) /tmp/cicero-BGQN/func.xml:7881(type) /tmp/cicero-BGQN/func.xml:7887(type) /tmp/cicero-BGQN/func.xml:7893(type) 
msgid "point"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7702(literal) 
msgid "center(box '((0,0),(1,2))')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7705(type) /tmp/cicero-BGQN/func.xml:7760(type) /tmp/cicero-BGQN/func.xml:7792(type) /tmp/cicero-BGQN/func.xml:7813(primary) /tmp/cicero-BGQN/func.xml:7817(type) /tmp/cicero-BGQN/func.xml:7823(type) /tmp/cicero-BGQN/func.xml:7829(type) /tmp/cicero-BGQN/func.xml:7880(type) /tmp/cicero-BGQN/func.xml:7909(type) /tmp/cicero-BGQN/func.xml:7915(type) 
msgid "circle"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7705(function) 
msgid "diameter(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7707(entry) 
msgid "diameter of circle"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7708(literal) 
msgid "diameter(circle '((0,0),2.0)')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7711(type) /tmp/cicero-BGQN/func.xml:7766(type) /tmp/cicero-BGQN/func.xml:7790(primary) /tmp/cicero-BGQN/func.xml:7794(type) /tmp/cicero-BGQN/func.xml:7800(type) /tmp/cicero-BGQN/func.xml:7806(type) /tmp/cicero-BGQN/func.xml:7815(type) /tmp/cicero-BGQN/func.xml:7838(type) /tmp/cicero-BGQN/func.xml:7874(type) /tmp/cicero-BGQN/func.xml:7902(type) 
msgid "box"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7711(function) 
msgid "height(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7713(entry) 
msgid "vertical size of box"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7714(literal) 
msgid "height(box '((0,0),(1,1))')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7717(type) /tmp/cicero-BGQN/func.xml:7723(type) /tmp/cicero-BGQN/func.xml:7735(type) /tmp/cicero-BGQN/func.xml:7747(type) /tmp/cicero-BGQN/func.xml:7748(type) /tmp/cicero-BGQN/func.xml:7754(type) /tmp/cicero-BGQN/func.xml:7755(type) /tmp/cicero-BGQN/func.xml:7853(primary) /tmp/cicero-BGQN/func.xml:7921(type) 
msgid "path"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7717(function) 
msgid "isclosed(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7719(entry) 
msgid "a closed path?"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7720(literal) 
msgid "isclosed(path '((0,0),(1,1),(2,0))')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7723(function) 
msgid "isopen(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7725(entry) 
msgid "an open path?"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7726(literal) 
msgid "isopen(path '[(0,0),(1,1),(2,0)]')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7732(literal) 
msgid "length(path '((-1,0),(1,0))')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7735(function) /tmp/cicero-BGQN/func.xml:7741(function) 
msgid "npoints(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7737(entry) /tmp/cicero-BGQN/func.xml:7743(entry) 
msgid "number of points"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7738(literal) 
msgid "npoints(path '[(0,0),(1,1),(2,0)]')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7741(type) /tmp/cicero-BGQN/func.xml:7805(type) /tmp/cicero-BGQN/func.xml:7828(type) /tmp/cicero-BGQN/func.xml:7855(type) /tmp/cicero-BGQN/func.xml:7892(type) /tmp/cicero-BGQN/func.xml:7900(primary) /tmp/cicero-BGQN/func.xml:7904(type) /tmp/cicero-BGQN/func.xml:7910(type) /tmp/cicero-BGQN/func.xml:7916(type) /tmp/cicero-BGQN/func.xml:7922(type) 
msgid "polygon"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7744(literal) 
msgid "npoints(polygon '((1,1),(0,0))')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7747(function) 
msgid "pclose(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7749(entry) 
msgid "convert path to closed"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7750(literal) 
msgid "pclose(path '[(0,0),(1,1),(2,0)]')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7754(function) 
msgid "popen(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7756(entry) 
msgid "convert path to open"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7757(literal) 
msgid "popen(path '((0,0),(1,1),(2,0))')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7760(function) 
msgid "radius(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7762(entry) 
msgid "radius of circle"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7763(literal) 
msgid "radius(circle '((0,0),2.0)')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7766(function) 
msgid "width(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7768(entry) 
msgid "horizontal size of box"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7769(literal) 
msgid "width(box '((0,0),(1,1))')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7776(title) 
msgid "Geometric Type Conversion Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7792(function) /tmp/cicero-BGQN/func.xml:7805(function) 
msgid "box(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7795(entry) 
msgid "circle to box"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7796(literal) 
msgid "box(circle '((0,0),2.0)')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7799(function) 
msgid "box(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7801(entry) 
msgid "points to box"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7802(literal) 
msgid "box(point '(0,0)', point '(1,1)')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7807(entry) 
msgid "polygon to box"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7808(literal) 
msgid "box(polygon '((0,0),(1,1),(2,0))')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7815(function) /tmp/cicero-BGQN/func.xml:7828(function) 
msgid "circle(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7818(entry) 
msgid "box to circle"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7819(literal) 
msgid "circle(box '((0,0),(1,1))')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7822(function) 
msgid "circle(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7824(entry) 
msgid "center and radius to circle"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7825(literal) 
msgid "circle(point '(0,0)', 2.0)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7830(entry) 
msgid "polygon to circle"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7831(literal) 
msgid "circle(polygon '((0,0),(1,1),(2,0))')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7836(primary) /tmp/cicero-BGQN/func.xml:7840(type) /tmp/cicero-BGQN/func.xml:7846(type) /tmp/cicero-BGQN/func.xml:7886(type) 
msgid "lseg"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7838(function) 
msgid "lseg(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7841(entry) 
msgid "box diagonal to line segment"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7842(literal) 
msgid "lseg(box '((-1,0),(1,0))')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7845(function) 
msgid "lseg(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7847(entry) 
msgid "points to line segment"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7848(literal) 
msgid "lseg(point '(-1,0)', point '(1,0)')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7855(function) 
msgid "path(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7858(entry) 
msgid "polygon to path"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7859(literal) 
msgid "path(polygon '((0,0),(1,1),(2,0))')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7870(entry) 
msgid "construct point"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7871(literal) 
msgid "point(23.4, -44.5)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7874(function) /tmp/cicero-BGQN/func.xml:7880(function) /tmp/cicero-BGQN/func.xml:7886(function) /tmp/cicero-BGQN/func.xml:7892(function) 
msgid "point(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7876(entry) 
msgid "center of box"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7877(literal) 
msgid "point(box '((-1,0),(1,0))')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7882(entry) 
msgid "center of circle"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7883(literal) 
msgid "point(circle '((0,0),2.0)')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7888(entry) 
msgid "center of line segment"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7889(literal) 
msgid "point(lseg '((-1,0),(1,0))')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7894(entry) 
msgid "center of polygon"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7895(literal) 
msgid "point(polygon '((0,0),(1,1),(2,0))')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7902(function) /tmp/cicero-BGQN/func.xml:7909(function) /tmp/cicero-BGQN/func.xml:7921(function) 
msgid "polygon(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7905(entry) 
msgid "box to 4-point polygon"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7906(literal) 
msgid "polygon(box '((0,0),(1,1))')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7911(entry) 
msgid "circle to 12-point polygon"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7912(literal) 
msgid "polygon(circle '((0,0),2.0)')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7915(replaceable) /tmp/cicero-BGQN/func.xml:7917(replaceable) 
msgid "npts"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7915(function) 
msgid "polygon(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7917(entry) 
msgid "circle to <placeholder-1/>-point polygon"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7918(literal) 
msgid "polygon(12, circle '((0,0),2.0)')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7923(entry) 
msgid "path to polygon"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7924(literal) 
msgid "polygon(path '((0,0),(1,1),(2,0))')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7930(para) 
msgid "It is possible to access the two component numbers of a <type>point</type> as though the point were an array with indexes 0 and 1. For example, if <literal>t.p</literal> is a <type>point</type> column then <literal>SELECT p[0] FROM t</literal> retrieves the X coordinate and <literal>UPDATE t SET p[1] = ...</literal> changes the Y coordinate. In the same way, a value of type <type>box</type> or <type>lseg</type> can be treated as an array of two <type>point</type> values."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7940(para) 
msgid "The <function>area</function> function works for the types <type>box</type>, <type>circle</type>, and <type>path</type>. The <function>area</function> function only works on the <type>path</type> data type if the points in the <type>path</type> are non-intersecting. For example, the <type>path</type><literal>'((0,0),(0,1),(2,1),(2,2),(1,2),(1,0),(0,0))'::PATH</literal> will not work; however, the following visually identical <type>path</type><literal>'((0,0),(0,1),(1,1),(1,2),(2,2),(2,1),(1,1),(1,0),(0,0))'::PATH</literal> will work. If the concept of an intersecting versus non-intersecting <type>path</type> is confusing, draw both of the above <type>path</type>s side by side on a piece of graph paper."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7960(title) 
msgid "Network Address Functions and Operators"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7962(para) 
msgid "<xref linkend=\"cidr-inet-operators-table\"/> shows the operators available for the <type>cidr</type> and <type>inet</type> types. The operators <literal>&lt;&lt;</literal>, <literal>&lt;&lt;=</literal>, <literal>&gt;&gt;</literal>, and <literal>&gt;&gt;=</literal> test for subnet inclusion. They consider only the network parts of the two addresses (ignoring any host part) and determine whether one network is identical to or a subnet of the other."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7974(title) 
msgid "<type>cidr</type> and <type>inet</type> Operators"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7986(entry) 
msgid "is less than"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7987(literal) 
msgid "inet '192.168.1.5' &lt; inet '192.168.1.6'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7991(entry) 
msgid "is less than or equal"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7992(literal) 
msgid "inet '192.168.1.5' &lt;= inet '192.168.1.5'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7996(entry) 
msgid "equals"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:7997(literal) 
msgid "inet '192.168.1.5' = inet '192.168.1.5'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8001(entry) 
msgid "is greater or equal"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8002(literal) 
msgid "inet '192.168.1.5' &gt;= inet '192.168.1.5'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8006(entry) 
msgid "is greater than"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8007(literal) 
msgid "inet '192.168.1.5' &gt; inet '192.168.1.4'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8011(entry) 
msgid "is not equal"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8012(literal) 
msgid "inet '192.168.1.5' &lt;&gt; inet '192.168.1.4'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8016(entry) 
msgid "is contained within"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8017(literal) 
msgid "inet '192.168.1.5' &lt;&lt; inet '192.168.1/24'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8020(literal) 
msgid "&lt;&lt;="
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8021(entry) 
msgid "is contained within or equals"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8022(literal) 
msgid "inet '192.168.1/24' &lt;&lt;= inet '192.168.1/24'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8026(entry) /tmp/cicero-BGQN/func.xml:10139(entry) 
msgid "contains"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8027(literal) 
msgid "inet '192.168.1/24' &gt;&gt; inet '192.168.1.5'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8030(literal) 
msgid "&gt;&gt;="
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8031(entry) 
msgid "contains or equals"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8032(literal) 
msgid "inet '192.168.1/24' &gt;&gt;= inet '192.168.1/24'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8037(literal) 
msgid "~ inet '192.168.1.6'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8042(literal) 
msgid "inet '192.168.1.6' &amp; inet '0.0.0.255'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8047(literal) 
msgid "inet '192.168.1.6' | inet '0.0.0.255'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8052(literal) 
msgid "inet '192.168.1.6' + 25"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8057(literal) 
msgid "inet '192.168.1.43' - 36"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8062(literal) 
msgid "inet '192.168.1.43' - inet '192.168.1.19'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8068(para) 
msgid "<xref linkend=\"cidr-inet-functions-table\"/> shows the functions available for use with the <type>cidr</type> and <type>inet</type> types. The <function>abbrev</function>, <function>host</function>, and <function>text</function> functions are primarily intended to offer alternative display formats."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8078(title) 
msgid "<type>cidr</type> and <type>inet</type> Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8093(primary) 
msgid "abbrev"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8095(type) /tmp/cicero-BGQN/func.xml:8114(type) /tmp/cicero-BGQN/func.xml:8116(type) /tmp/cicero-BGQN/func.xml:8126(type) /tmp/cicero-BGQN/func.xml:8139(type) /tmp/cicero-BGQN/func.xml:8151(type) /tmp/cicero-BGQN/func.xml:8153(type) /tmp/cicero-BGQN/func.xml:8163(type) /tmp/cicero-BGQN/func.xml:8175(type) /tmp/cicero-BGQN/func.xml:8177(type) /tmp/cicero-BGQN/func.xml:8187(type) /tmp/cicero-BGQN/func.xml:8199(type) /tmp/cicero-BGQN/func.xml:8201(type) /tmp/cicero-BGQN/func.xml:8202(type) /tmp/cicero-BGQN/func.xml:8218(type) /tmp/cicero-BGQN/func.xml:12382(type) /tmp/cicero-BGQN/func.xml:12394(type) 
msgid "inet"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8095(function) /tmp/cicero-BGQN/func.xml:8103(function) 
msgid "abbrev(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8098(entry) /tmp/cicero-BGQN/func.xml:8105(entry) 
msgid "abbreviated display format as text"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8099(literal) 
msgid "abbrev(inet '10.1.0.0/16')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8100(literal) 
msgid "10.1.0.0/16"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8103(type) /tmp/cicero-BGQN/func.xml:8189(type) /tmp/cicero-BGQN/func.xml:8207(type) /tmp/cicero-BGQN/func.xml:8208(type) /tmp/cicero-BGQN/func.xml:8209(type) 
msgid "cidr"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8106(literal) 
msgid "abbrev(cidr '10.1.0.0/16')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8107(literal) 
msgid "10.1/16"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8112(primary) 
msgid "broadcast"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8114(function) 
msgid "broadcast(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8117(entry) 
msgid "broadcast address for network"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8118(literal) 
msgid "broadcast('192.168.1.5/24')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8119(literal) 
msgid "192.168.1.255/24"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8124(primary) 
msgid "family"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8126(function) 
msgid "family(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8129(entry) 
msgid "extract family of address; <placeholder-1/> for IPv4, <placeholder-2/> for IPv6"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8131(literal) 
msgid "family('::1')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8137(primary) 
msgid "host"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8139(function) 
msgid "host(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8142(entry) 
msgid "extract IP address as text"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8143(literal) 
msgid "host('192.168.1.5/24')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8144(literal) 
msgid "192.168.1.5"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8149(primary) 
msgid "hostmask"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8151(function) 
msgid "hostmask(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8154(entry) 
msgid "construct host mask for network"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8155(literal) 
msgid "hostmask('192.168.23.20/30')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8156(literal) 
msgid "0.0.0.3"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8161(primary) 
msgid "masklen"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8163(function) 
msgid "masklen(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8166(entry) 
msgid "extract netmask length"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8167(literal) 
msgid "masklen('192.168.1.5/24')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8168(literal) 
msgid "24"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8173(primary) 
msgid "netmask"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8175(function) 
msgid "netmask(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8178(entry) 
msgid "construct netmask for network"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8179(literal) 
msgid "netmask('192.168.1.5/24')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8180(literal) 
msgid "255.255.255.0"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8185(primary) 
msgid "network"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8187(function) 
msgid "network(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8190(entry) 
msgid "extract network part of address"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8191(literal) 
msgid "network('192.168.1.5/24')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8192(literal) 
msgid "192.168.1.0/24"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8197(primary) 
msgid "set_masklen"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8199(function) /tmp/cicero-BGQN/func.xml:8207(function) 
msgid "set_masklen(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8202(entry) /tmp/cicero-BGQN/func.xml:8209(entry) 
msgid "set netmask length for <placeholder-1/> value"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8203(literal) 
msgid "set_masklen('192.168.1.5/24', 16)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8204(literal) 
msgid "192.168.1.5/16"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8210(literal) 
msgid "set_masklen('192.168.1.0/24'::cidr, 16)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8211(literal) 
msgid "192.168.0.0/16"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8218(function) 
msgid "text(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8221(entry) 
msgid "extract IP address and netmask length as text"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8222(literal) 
msgid "text(inet '192.168.1.5')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8223(literal) 
msgid "192.168.1.5/32"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8229(para) 
msgid "Any <type>cidr</type> value can be cast to <type>inet</type> implicitly or explicitly; therefore, the functions shown above as operating on <type>inet</type> also work on <type>cidr</type> values. (Where there are separate functions for <type>inet</type> and <type>cidr</type>, it is because the behavior should be different for the two cases.) Also, it is permitted to cast an <type>inet</type> value to <type>cidr</type>. When this is done, any bits to the right of the netmask are silently zeroed to create a valid <type>cidr</type> value. In addition, you can cast a text value to <type>inet</type> or <type>cidr</type> using normal casting syntax: for example, <literal>inet(<replaceable>expression</replaceable>)</literal> or <literal><replaceable>colname</replaceable>::cidr</literal>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8245(para) 
msgid "<xref linkend=\"macaddr-functions-table\"/> shows the functions available for use with the <type>macaddr</type> type. The function <literal><function>trunc(<type>macaddr</type>)</function></literal> returns a MAC address with the last 3 bytes set to zero. This can be used to associate the remaining prefix with a manufacturer."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8254(title) 
msgid "<type>macaddr</type> Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8271(type) /tmp/cicero-BGQN/func.xml:8273(type) 
msgid "macaddr"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8271(function) 
msgid "trunc(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8274(entry) 
msgid "set last 3 bytes to zero"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8275(literal) 
msgid "trunc(macaddr '12:34:56:78:90:ab')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8276(literal) 
msgid "12:34:56:00:00:00"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8282(para) 
msgid "The <type>macaddr</type> type also supports the standard relational operators (<literal>&gt;</literal>, <literal>&lt;=</literal>, etc.) for lexicographical ordering."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8292(title) 
msgid "Text Search Functions and Operators"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8295(primary) 
msgid "full text search"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8296(secondary) /tmp/cicero-BGQN/func.xml:8301(secondary) 
msgid "functions and operators"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8300(primary) 
msgid "text search"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8304(para) 
msgid "<xref linkend=\"textsearch-operators-table\"/>, <xref linkend=\"textsearch-functions-table\"/> and <xref linkend=\"textsearch-functions-debug-table\"/> summarize the functions and operators that are provided for full text searching. See <xref linkend=\"textsearch\"/> for a detailed explanation of <productname>PostgreSQL</productname>'s text search facility."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8315(title) 
msgid "Text Search Operators"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8328(type) /tmp/cicero-BGQN/func.xml:8340(type) /tmp/cicero-BGQN/func.xml:8423(type) /tmp/cicero-BGQN/func.xml:8426(type) /tmp/cicero-BGQN/func.xml:8471(type) /tmp/cicero-BGQN/func.xml:8473(type) /tmp/cicero-BGQN/func.xml:8474(type) /tmp/cicero-BGQN/func.xml:8483(type) /tmp/cicero-BGQN/func.xml:8485(type) /tmp/cicero-BGQN/func.xml:8486(type) /tmp/cicero-BGQN/func.xml:8509(type) /tmp/cicero-BGQN/func.xml:8510(type) /tmp/cicero-BGQN/func.xml:8531(type) /tmp/cicero-BGQN/func.xml:8543(type) /tmp/cicero-BGQN/func.xml:8577(type) /tmp/cicero-BGQN/func.xml:8589(type) /tmp/cicero-BGQN/func.xml:8697(type) 
msgid "tsvector"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8328(type) /tmp/cicero-BGQN/func.xml:8346(type) /tmp/cicero-BGQN/func.xml:8352(type) /tmp/cicero-BGQN/func.xml:8358(type) /tmp/cicero-BGQN/func.xml:8364(type) /tmp/cicero-BGQN/func.xml:8370(type) /tmp/cicero-BGQN/func.xml:8435(type) /tmp/cicero-BGQN/func.xml:8438(type) /tmp/cicero-BGQN/func.xml:8449(type) /tmp/cicero-BGQN/func.xml:8450(type) /tmp/cicero-BGQN/func.xml:8459(type) /tmp/cicero-BGQN/func.xml:8462(type) /tmp/cicero-BGQN/func.xml:8497(type) /tmp/cicero-BGQN/func.xml:8498(type) /tmp/cicero-BGQN/func.xml:8519(type) /tmp/cicero-BGQN/func.xml:8531(type) /tmp/cicero-BGQN/func.xml:8543(type) /tmp/cicero-BGQN/func.xml:8555(type) /tmp/cicero-BGQN/func.xml:8555(type) /tmp/cicero-BGQN/func.xml:8555(type) /tmp/cicero-BGQN/func.xml:8557(type) /tmp/cicero-BGQN/func.xml:8563(type) /tmp/cicero-BGQN/func.xml:8564(type) 
msgid "tsquery"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8328(entry) 
msgid "<placeholder-1/> matches <placeholder-2/> ?"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8329(literal) 
msgid "to_tsvector('fat cats ate rats') @@ to_tsquery('cat &amp; rat')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8333(literal) 
msgid "@@@"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8334(entry) 
msgid "deprecated synonym for <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8335(literal) 
msgid "to_tsvector('fat cats ate rats') @@@ to_tsquery('cat &amp; rat')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8340(entry) 
msgid "concatenate <placeholder-1/>s"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8341(literal) 
msgid "'a:1 b:2'::tsvector || 'c:1 d:2 b:3'::tsvector"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8342(literal) 
msgid "'a':1 'b':2,5 'c':3 'd':4"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8346(entry) 
msgid "AND <placeholder-1/>s together"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8347(literal) 
msgid "'fat | rat'::tsquery &amp;&amp; 'cat'::tsquery"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8348(literal) 
msgid "( 'fat' | 'rat' ) &amp; 'cat'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8352(entry) 
msgid "OR <placeholder-1/>s together"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8353(literal) 
msgid "'fat | rat'::tsquery || 'cat'::tsquery"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8354(literal) 
msgid "( 'fat' | 'rat' ) | 'cat'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8358(entry) 
msgid "negate a <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8359(literal) 
msgid "!! 'cat'::tsquery"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8360(literal) 
msgid "!'cat'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8364(entry) 
msgid "<placeholder-1/> contains another ?"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8365(literal) 
msgid "'cat'::tsquery @&gt; 'cat &amp; rat'::tsquery"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8366(literal) 
msgid "f"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8370(entry) 
msgid "<placeholder-1/> is contained in ?"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8371(literal) 
msgid "'cat'::tsquery &lt;@ 'cat &amp; rat'::tsquery"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8379(para) 
msgid "The <type>tsquery</type> containment operators consider only the lexemes listed in the two queries, ignoring the combining operators."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8385(para) 
msgid "In addition to the operators shown in the table, the ordinary B-tree comparison operators (<literal>=</literal>, <literal>&lt;</literal>, etc) are defined for types <type>tsvector</type> and <type>tsquery</type>. These are not very useful for text searching but allow, for example, unique indexes to be built on columns of these types."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8394(title) 
msgid "Text Search Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8409(primary) 
msgid "get_current_ts_config"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8411(function) /tmp/cicero-BGQN/func.xml:8415(literal) 
msgid "get_current_ts_config()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8413(type) /tmp/cicero-BGQN/func.xml:8447(type) /tmp/cicero-BGQN/func.xml:8495(type) /tmp/cicero-BGQN/func.xml:8507(type) /tmp/cicero-BGQN/func.xml:8519(type) /tmp/cicero-BGQN/func.xml:8632(type) 
msgid "regconfig"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8414(entry) 
msgid "get default text search configuration"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8416(literal) 
msgid "english"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8425(type) /tmp/cicero-BGQN/func.xml:8437(type) /tmp/cicero-BGQN/func.xml:8531(type) /tmp/cicero-BGQN/func.xml:8543(type) /tmp/cicero-BGQN/func.xml:8656(type) /tmp/cicero-BGQN/func.xml:8664(type) /tmp/cicero-BGQN/func.xml:8675(type) /tmp/cicero-BGQN/func.xml:8683(type) /tmp/cicero-BGQN/func.xml:8694(type) /tmp/cicero-BGQN/func.xml:8694(type) /tmp/cicero-BGQN/func.xml:11291(type) /tmp/cicero-BGQN/func.xml:11294(type) /tmp/cicero-BGQN/func.xml:11307(type) /tmp/cicero-BGQN/func.xml:11334(type) /tmp/cicero-BGQN/func.xml:11392(type) /tmp/cicero-BGQN/func.xml:14053(type) 
msgid "integer"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8426(entry) 
msgid "number of lexemes in <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8427(literal) 
msgid "length('fat:2,4 cat:3 rat:5A'::tsvector)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8433(primary) 
msgid "numnode"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8435(function) 
msgid "numnode(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8438(entry) 
msgid "number of lexemes plus operators in <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8439(literal) 
msgid "numnode('(fat &amp; rat) | cat'::tsquery)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8445(primary) 
msgid "plainto_tsquery"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8447(replaceable) /tmp/cicero-BGQN/func.xml:8495(replaceable) /tmp/cicero-BGQN/func.xml:8507(replaceable) /tmp/cicero-BGQN/func.xml:8519(replaceable) /tmp/cicero-BGQN/func.xml:8632(replaceable) 
msgid "config"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8447(optional) /tmp/cicero-BGQN/func.xml:8495(optional) /tmp/cicero-BGQN/func.xml:8507(optional) 
msgid "<placeholder-1/><placeholder-2/> ,"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8447(replaceable) /tmp/cicero-BGQN/func.xml:8459(replaceable) /tmp/cicero-BGQN/func.xml:8495(replaceable) /tmp/cicero-BGQN/func.xml:8519(replaceable) /tmp/cicero-BGQN/func.xml:8531(replaceable) /tmp/cicero-BGQN/func.xml:8543(replaceable) /tmp/cicero-BGQN/func.xml:8555(replaceable) /tmp/cicero-BGQN/func.xml:8563(replaceable) 
msgid "query"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8447(function) 
msgid "plainto_tsquery(<placeholder-1/><placeholder-2/><placeholder-3/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8450(entry) 
msgid "produce <placeholder-1/> ignoring punctuation"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8451(literal) 
msgid "plainto_tsquery('english', 'The Fat Rats')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8452(literal) /tmp/cicero-BGQN/func.xml:8500(literal) 
msgid "'fat' &amp; 'rat'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8457(primary) 
msgid "querytree"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8459(function) 
msgid "querytree(<placeholder-1/><placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8462(entry) 
msgid "get indexable part of a <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8463(literal) 
msgid "querytree('foo &amp; ! bar'::tsquery)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8464(literal) 
msgid "'foo'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8469(primary) 
msgid "setweight"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8471(type) 
msgid "\"char\""
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8471(function) 
msgid "setweight(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8474(entry) 
msgid "assign weight to each element of <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8475(literal) 
msgid "setweight('fat:2,4 cat:3 rat:5B'::tsvector, 'A')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8476(literal) 
msgid "'cat':3A 'fat':2A,4A 'rat':5A"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8481(primary) 
msgid "strip"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8483(function) 
msgid "strip(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8486(entry) 
msgid "remove positions and weights from <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8487(literal) 
msgid "strip('fat:2,4 cat:3 rat:5A'::tsvector)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8488(literal) 
msgid "'cat' 'fat' 'rat'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8493(primary) 
msgid "to_tsquery"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8495(function) 
msgid "to_tsquery(<placeholder-1/><placeholder-2/><placeholder-3/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8498(entry) 
msgid "normalize words and convert to <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8499(literal) 
msgid "to_tsquery('english', 'The &amp; Fat &amp; Rats')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8505(primary) 
msgid "to_tsvector"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8507(replaceable) /tmp/cicero-BGQN/func.xml:8519(replaceable) /tmp/cicero-BGQN/func.xml:8632(replaceable) /tmp/cicero-BGQN/func.xml:8656(replaceable) /tmp/cicero-BGQN/func.xml:8664(replaceable) 
msgid "document"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8507(function) 
msgid "to_tsvector(<placeholder-1/><placeholder-2/><placeholder-3/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8510(entry) 
msgid "reduce document text to <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8511(literal) 
msgid "to_tsvector('english', 'The Fat Rats')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8512(literal) 
msgid "'fat':2 'rat':3"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8517(primary) 
msgid "ts_headline"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8519(optional) /tmp/cicero-BGQN/func.xml:8531(optional) /tmp/cicero-BGQN/func.xml:8543(optional) /tmp/cicero-BGQN/func.xml:8632(optional) /tmp/cicero-BGQN/func.xml:8694(optional) 
msgid "<placeholder-1/><placeholder-2/>,"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8519(replaceable) 
msgid "options"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8519(function) 
msgid "ts_headline(<placeholder-1/><placeholder-2/><placeholder-3/>, <placeholder-4/><placeholder-5/><placeholder-6/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8522(entry) 
msgid "display a query match"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8523(literal) 
msgid "ts_headline('x y z', 'z'::tsquery)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8524(literal) 
msgid "x y &lt;b&gt;z&lt;/b&gt;"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8529(primary) 
msgid "ts_rank"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8531(replaceable) /tmp/cicero-BGQN/func.xml:8543(replaceable) /tmp/cicero-BGQN/func.xml:8694(replaceable) 
msgid "weights"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8531(type) /tmp/cicero-BGQN/func.xml:8543(type) 
msgid "float4[]"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8531(replaceable) /tmp/cicero-BGQN/func.xml:8543(replaceable) 
msgid "vector"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8531(replaceable) /tmp/cicero-BGQN/func.xml:8543(replaceable) 
msgid "normalization"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8531(function) 
msgid "ts_rank(<placeholder-1/><placeholder-2/><placeholder-3/>, <placeholder-4/><placeholder-5/><placeholder-6/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8533(type) /tmp/cicero-BGQN/func.xml:8545(type) 
msgid "float4"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8534(entry) 
msgid "rank document for query"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8535(literal) 
msgid "ts_rank(textsearch, query)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8536(literal) 
msgid "0.818"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8541(primary) 
msgid "ts_rank_cd"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8543(function) 
msgid "ts_rank_cd(<placeholder-1/><placeholder-2/><placeholder-3/>, <placeholder-4/><placeholder-5/><placeholder-6/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8546(entry) 
msgid "rank document for query using cover density"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8547(literal) 
msgid "ts_rank_cd('{0.1, 0.2, 0.4, 1.0}', textsearch, query)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8548(literal) 
msgid "2.01317"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8553(primary) 
msgid "ts_rewrite"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8555(replaceable) /tmp/cicero-BGQN/func.xml:8983(replaceable) 
msgid "target"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8555(replaceable) 
msgid "substitute"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8555(function) 
msgid "ts_rewrite(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/>, <placeholder-5/><placeholder-6/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8558(entry) 
msgid "replace target with substitute within query"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8559(literal) 
msgid "ts_rewrite('a &amp; b'::tsquery, 'a'::tsquery, 'foo|bar'::tsquery)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8560(literal) /tmp/cicero-BGQN/func.xml:8567(literal) 
msgid "'b' &amp; ( 'foo' | 'bar' )"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8563(replaceable) 
msgid "select"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8563(function) 
msgid "ts_rewrite(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8565(command) /tmp/cicero-BGQN/func.xml:13391(command) /tmp/cicero-BGQN/func.xml:13396(command) /tmp/cicero-BGQN/func.xml:13401(command) /tmp/cicero-BGQN/func.xml:13406(command) 
msgid "SELECT"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8565(entry) 
msgid "replace using targets and substitutes from a <placeholder-1/> command"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8566(literal) 
msgid "SELECT ts_rewrite('a &amp; b'::tsquery, 'SELECT t,s FROM aliases')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8572(primary) 
msgid "tsvector_update_trigger"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8574(function) 
msgid "tsvector_update_trigger()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8576(type) /tmp/cicero-BGQN/func.xml:8588(type) 
msgid "trigger"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8577(entry) /tmp/cicero-BGQN/func.xml:8589(entry) 
msgid "trigger function for automatic <placeholder-1/> column update"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8578(literal) 
msgid "CREATE TRIGGER ... tsvector_update_trigger(tsvcol, 'pg_catalog.swedish', title, body)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8584(primary) 
msgid "tsvector_update_trigger_column"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8586(function) 
msgid "tsvector_update_trigger_column()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8590(literal) 
msgid "CREATE TRIGGER ... tsvector_update_trigger_column(tsvcol, configcol, title, body)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8598(para) 
msgid "All the text search functions that accept an optional <type>regconfig</type> argument will use the configuration specified by <xref linkend=\"guc-default-text-search-config\"/> when that argument is omitted."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8606(para) 
msgid "The functions in <xref linkend=\"textsearch-functions-debug-table\"/> are listed separately because they are not usually used in everyday text searching operations. They are helpful for development and debugging of new text search configurations."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8615(title) 
msgid "Text Search Debugging Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8630(primary) 
msgid "ts_debug"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8632(replaceable) /tmp/cicero-BGQN/func.xml:8675(replaceable) /tmp/cicero-BGQN/func.xml:8683(replaceable) 
msgid "alias"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8632(replaceable) /tmp/cicero-BGQN/func.xml:8675(replaceable) /tmp/cicero-BGQN/func.xml:8683(replaceable) 
msgid "description"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8632(replaceable) /tmp/cicero-BGQN/func.xml:8644(replaceable) /tmp/cicero-BGQN/func.xml:8656(replaceable) /tmp/cicero-BGQN/func.xml:8664(replaceable) 
msgid "token"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8632(replaceable) 
msgid "dictionaries"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8632(type) 
msgid "regdictionary[]"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8632(replaceable) 
msgid "dictionary"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8632(type) /tmp/cicero-BGQN/func.xml:8644(type) 
msgid "regdictionary"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8632(replaceable) 
msgid "lexemes"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8632(function) 
msgid "ts_debug(<placeholder-1/><placeholder-2/><placeholder-3/>, OUT <placeholder-4/><placeholder-5/>, OUT <placeholder-6/><placeholder-7/>, OUT <placeholder-8/><placeholder-9/>, OUT <placeholder-10/><placeholder-11/>, OUT <placeholder-12/><placeholder-13/>, OUT <placeholder-14/><placeholder-15/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8634(type) /tmp/cicero-BGQN/func.xml:8658(type) /tmp/cicero-BGQN/func.xml:8665(type) /tmp/cicero-BGQN/func.xml:8677(type) /tmp/cicero-BGQN/func.xml:8684(type) /tmp/cicero-BGQN/func.xml:8696(type) /tmp/cicero-BGQN/func.xml:13354(type) /tmp/cicero-BGQN/func.xml:13410(type) 
msgid "setof record"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8635(entry) 
msgid "test a configuration"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8636(literal) 
msgid "ts_debug('english', 'The Brightest supernovaes')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8637(literal) 
msgid "(asciiword,\"Word, all ASCII\",The,{english_stem},english_stem,{}) ..."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8642(primary) 
msgid "ts_lexize"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8644(replaceable) 
msgid "dict"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8644(function) 
msgid "ts_lexize(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8647(entry) 
msgid "test a dictionary"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8648(literal) 
msgid "ts_lexize('english_stem', 'stars')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8649(literal) 
msgid "{star}"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8654(primary) 
msgid "ts_parse"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8656(replaceable) /tmp/cicero-BGQN/func.xml:8675(replaceable) 
msgid "parser_name"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8656(replaceable) /tmp/cicero-BGQN/func.xml:8664(replaceable) /tmp/cicero-BGQN/func.xml:8675(replaceable) /tmp/cicero-BGQN/func.xml:8683(replaceable) 
msgid "tokid"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8656(function) /tmp/cicero-BGQN/func.xml:8664(function) 
msgid "ts_parse(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/>, OUT <placeholder-5/><placeholder-6/>, OUT <placeholder-7/><placeholder-8/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8659(entry) /tmp/cicero-BGQN/func.xml:8666(entry) 
msgid "test a parser"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8660(literal) 
msgid "ts_parse('default', 'foo - bar')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8661(literal) /tmp/cicero-BGQN/func.xml:8668(literal) 
msgid "(1,foo) ..."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8664(replaceable) /tmp/cicero-BGQN/func.xml:8683(replaceable) /tmp/cicero-BGQN/func.xml:13124(parameter) 
msgid "parser_oid"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8664(type) /tmp/cicero-BGQN/func.xml:8683(type) /tmp/cicero-BGQN/func.xml:12420(type) /tmp/cicero-BGQN/func.xml:12433(type) /tmp/cicero-BGQN/func.xml:14351(type) /tmp/cicero-BGQN/func.xml:14411(type) /tmp/cicero-BGQN/func.xml:14526(type) 
msgid "oid"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8667(literal) 
msgid "ts_parse(3722, 'foo - bar')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8673(primary) 
msgid "ts_token_type"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8675(function) /tmp/cicero-BGQN/func.xml:8683(function) 
msgid "ts_token_type(<placeholder-1/><placeholder-2/>, OUT <placeholder-3/><placeholder-4/>, OUT <placeholder-5/><placeholder-6/>, OUT <placeholder-7/><placeholder-8/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8678(entry) /tmp/cicero-BGQN/func.xml:8685(entry) 
msgid "get token types defined by parser"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8679(literal) 
msgid "ts_token_type('default')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8680(literal) /tmp/cicero-BGQN/func.xml:8687(literal) 
msgid "(1,asciiword,\"Word, all ASCII\") ..."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8686(literal) 
msgid "ts_token_type(3722)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8692(primary) 
msgid "ts_stat"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8694(replaceable) 
msgid "sqlquery"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8694(replaceable) 
msgid "word"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8694(replaceable) 
msgid "ndoc"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8694(replaceable) 
msgid "nentry"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8694(function) 
msgid "ts_stat(<placeholder-1/><placeholder-2/>, <placeholder-3/> OUT <placeholder-4/><placeholder-5/>, OUT <placeholder-6/><placeholder-7/>, OUT <placeholder-8/><placeholder-9/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8697(entry) 
msgid "get statistics of a <placeholder-1/> column"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8698(literal) 
msgid "ts_stat('SELECT vector from apod')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8699(literal) 
msgid "(foo,10,15) ..."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8709(title) 
msgid "XML Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8711(para) 
msgid "The functions and function-like expressions described in this section operate on values of type <type>xml</type>. Check <xref linkend=\"datatype-xml\"/> for information about the <type>xml</type> type. The function-like expressions <function>xmlparse</function> and <function>xmlserialize</function> for converting to and from type <type>xml</type> are not repeated here. Use of most of these functions requires the installation to have been built with <command>configure --with-libxml</command>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8723(title) 
msgid "Producing XML Content"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8725(para) 
msgid "A set of functions and function-like expressions are available for producing XML content from SQL data. As such, they are particularly suitable for formatting query results into XML documents for processing in client applications."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8733(literal) /tmp/cicero-BGQN/func.xml:8736(primary) /tmp/cicero-BGQN/func.xml:8740(function) 
msgid "xmlcomment"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8739(synopsis) /tmp/cicero-BGQN/func.xml:9043(synopsis) 
#, no-wrap
msgid "\n<placeholder-1/>(<placeholder-2/>)\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8743(para) 
msgid "The function <function>xmlcomment</function> creates an XML value containing an XML comment with the specified text as content. The text cannot contain <quote><literal>--</literal></quote> or end with a <quote><literal>-</literal></quote> so that the resulting construct is a valid XML comment. If the argument is null, the result is null."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8751(para) 
msgid "Example: <screen><![CDATA[\nSELECT xmlcomment('hello');\n\n  xmlcomment\n--------------\n <!--hello-->\n]]></screen>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8764(literal) /tmp/cicero-BGQN/func.xml:8767(primary) /tmp/cicero-BGQN/func.xml:8771(function) 
msgid "xmlconcat"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8771(replaceable) /tmp/cicero-BGQN/func.xml:9012(replaceable) /tmp/cicero-BGQN/func.xml:9044(replaceable) /tmp/cicero-BGQN/func.xml:9114(replaceable) /tmp/cicero-BGQN/func.xml:9134(replaceable) /tmp/cicero-BGQN/func.xml:9262(replaceable) /tmp/cicero-BGQN/func.xml:9321(replaceable) /tmp/cicero-BGQN/func.xml:10697(type) /tmp/cicero-BGQN/func.xml:10700(type) 
msgid "xml"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8771(optional) /tmp/cicero-BGQN/func.xml:8828(optional) /tmp/cicero-BGQN/func.xml:8926(optional) /tmp/cicero-BGQN/func.xml:9987(optional) /tmp/cicero-BGQN/func.xml:10050(optional) /tmp/cicero-BGQN/func.xml:10053(optional) /tmp/cicero-BGQN/func.xml:11866(optional) /tmp/cicero-BGQN/func.xml:11897(optional) 
msgid ", ..."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8770(synopsis) 
#, no-wrap
msgid "\n<placeholder-1/>(<placeholder-2/><placeholder-3/>)\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8774(para) 
msgid "The function <function>xmlconcat</function> concatenates a list of individual XML values to create a single value containing an XML content fragment. Null values are omitted; the result is only null if there are no nonnull arguments."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8781(para) 
msgid "Example: <screen><![CDATA[\nSELECT xmlconcat('<abc/>', '<bar>foo</bar>');\n\n      xmlconcat\n----------------------\n <abc/><bar>foo</bar>\n]]></screen>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8792(para) 
msgid "XML declarations, if present, are combined as follows. If all argument values have the same XML version declaration, that version is used in the result, else no version is used. If all argument values have the standalone declaration value <quote>yes</quote>, then that value is used in the result. If all argument values have a standalone declaration value and at least one is <quote>no</quote>, then that is used in the result. Else the result will have no standalone declaration. If the result is determined to require a standalone declaration but no version declaration, a version declaration with version 1.0 will be used because XML requires an XML declaration to contain a version declaration. Encoding declarations are ignored and removed in all cases."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8808(para) 
msgid "Example: <screen><![CDATA[\nSELECT xmlconcat('<?xml version=\"1.1\"?><foo/>', '<?xml version=\"1.1\" standalone=\"no\"?><bar/>');\n\n             xmlconcat\n-----------------------------------\n <?xml version=\"1.1\"?><foo/><bar/>\n]]></screen>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8821(literal) /tmp/cicero-BGQN/func.xml:8824(primary) /tmp/cicero-BGQN/func.xml:8828(function) 
msgid "xmlelement"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8828(replaceable) 
msgid "attname"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8828(optional) /tmp/cicero-BGQN/func.xml:8926(optional) 
msgid "AS <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8828(optional) 
msgid ", xmlattributes(<placeholder-1/><placeholder-2/><placeholder-3/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8828(replaceable) 
msgid ", content, ..."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8827(synopsis) 
#, no-wrap
msgid "\n<placeholder-1/>(name <placeholder-2/> <placeholder-3/> <optional><placeholder-4/></optional>)\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8831(para) 
msgid "The <function>xmlelement</function> expression produces an XML element with the given name, attributes, and content."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8836(para) 
msgid "Examples: <screen><![CDATA[\nSELECT xmlelement(name foo);\n\n xmlelement\n------------\n <foo/>\n\nSELECT xmlelement(name foo, xmlattributes('xyz' as bar));\n\n    xmlelement\n------------------\n <foo bar=\"xyz\"/>\n\nSELECT xmlelement(name foo, xmlattributes(current_date as bar), 'cont', 'ent');\n\n             xmlelement\n-------------------------------------\n <foo bar=\"2007-01-26\">content</foo>\n]]></screen>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8859(para) 
msgid "Element and attribute names that are not valid XML names are escaped by replacing the offending characters by the sequence <literal>_x<replaceable>HHHH</replaceable>_</literal>, where <replaceable>HHHH</replaceable> is the character's Unicode codepoint in hexadecimal notation. For example: <screen><![CDATA[\nSELECT xmlelement(name \"foo$bar\", xmlattributes('xyz' as \"a&b\"));\n\n            xmlelement\n----------------------------------\n <foo_x0024_bar a_x0026_b=\"xyz\"/>\n]]></screen>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8874(para) 
msgid "An explicit attribute name need not be specified if the attribute value is a column reference, in which case the column's name will be used as the attribute name by default. In other cases, the attribute must be given an explicit name. So this example is valid: <screen>\nCREATE TABLE test (a xml, b xml);\nSELECT xmlelement(name test, xmlattributes(a, b)) FROM test;\n</screen> But these are not: <screen>\nSELECT xmlelement(name test, xmlattributes('constant'), a, b) FROM test;\nSELECT xmlelement(name test, xmlattributes(func(a, b))) FROM test;\n</screen>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8891(para) 
msgid "Element content, if specified, will be formatted according to its data type. If the content is itself of type <type>xml</type>, complex XML documents can be constructed. For example: <screen><![CDATA[\nSELECT xmlelement(name foo, xmlattributes('xyz' as bar),\n                            xmlelement(name abc),\n                            xmlcomment('test'),\n                            xmlelement(name xyz));\n\n                  xmlelement\n----------------------------------------------\n <foo bar=\"xyz\"><abc/><!--test--><xyz/></foo>\n]]></screen> Content of other types will be formatted into valid XML character data. This means in particular that the characters &lt;, &gt;, and &amp; will be converted to entities. Binary data (data type <type>bytea</type>) will be represented in base64 or hex encoding, depending on the setting of the configuration parameter <xref linkend=\"guc-xmlbinary\"/>. The particular behavior for individual data types is expected to evolve in order to align the SQL and PostgreSQL data types with the XML Schema specification, at which point a more precise description will appear."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8919(literal) /tmp/cicero-BGQN/func.xml:8922(primary) /tmp/cicero-BGQN/func.xml:8926(function) 
msgid "xmlforest"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8926(replaceable) /tmp/cicero-BGQN/func.xml:8983(replaceable) 
msgid "content"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8925(synopsis) 
#, no-wrap
msgid "\n<placeholder-1/>(<placeholder-2/> <placeholder-3/> <placeholder-4/>)\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8929(para) 
msgid "The <function>xmlforest</function> expression produces an XML forest (sequence) of elements using the given names and content."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8934(para) 
msgid "Examples: <screen><![CDATA[\nSELECT xmlforest('abc' AS foo, 123 AS bar);\n\n          xmlforest\n------------------------------\n <foo>abc</foo><bar>123</bar>\n\n\nSELECT xmlforest(table_name, column_name)\nFROM information_schema.columns\nWHERE table_schema = 'pg_catalog';\n\n                                         xmlforest\n-------------------------------------------------------------------------------------------\n <table_name>pg_authid</table_name><column_name>rolname</column_name>\n <table_name>pg_authid</table_name><column_name>rolsuper</column_name>\n ...\n]]></screen> As seen in the second example, the element name can be omitted if the content value is a column reference, in which case the column name is used by default. Otherwise, a name must be specified."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8960(para) 
msgid "Element names that are not valid XML names are escaped as shown for <function>xmlelement</function> above. Similarly, content data is escaped to make valid XML content, unless it is already of type <type>xml</type>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8967(para) 
msgid "Note that XML forests are not valid XML documents if they consist of more than one element, so it might be useful to wrap <function>xmlforest</function> expressions in <function>xmlelement</function>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8976(literal) /tmp/cicero-BGQN/func.xml:8979(primary) /tmp/cicero-BGQN/func.xml:8983(function) 
msgid "xmlpi"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8982(synopsis) 
#, no-wrap
msgid "\n<placeholder-1/>(name <placeholder-2/> <placeholder-3/>)\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8986(para) 
msgid "The <function>xmlpi</function> expression creates an XML processing instruction. The content, if present, must not contain the character sequence <literal>?&gt;</literal>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:8992(para) 
msgid "Example: <screen><![CDATA[\nSELECT xmlpi(name php, 'echo \"hello world\";');\n\n            xmlpi\n-----------------------------\n <?php echo \"hello world\";?>\n]]></screen>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9005(literal) /tmp/cicero-BGQN/func.xml:9008(primary) /tmp/cicero-BGQN/func.xml:9012(function) 
msgid "xmlroot"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9012(optional) 
msgid ", standalone yes|no|no value"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9011(synopsis) 
#, no-wrap
msgid "\n<placeholder-1/>(<placeholder-2/>, version <placeholder-3/> | no value <placeholder-4/>)\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9015(para) 
msgid "The <function>xmlroot</function> expression alters the properties of the root node of an XML value. If a version is specified, it replaces the value in the root node's version declaration; if a standalone setting is specified, it replaces the value in the root node's standalone declaration."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9037(literal) /tmp/cicero-BGQN/func.xml:9040(primary) /tmp/cicero-BGQN/func.xml:9044(function) /tmp/cicero-BGQN/func.xml:10692(primary) 
msgid "xmlagg"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9047(para) 
msgid "The function <function>xmlagg</function> is, unlike the other functions described here, an aggregate function. It concatenates the input values to the aggregate function call, much like <function>xmlconcat</function> does, except that concatenation occurs across rows rather than across expressions in a single row. See <xref linkend=\"functions-aggregate\"/> for additional information about aggregate functions."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9057(para) 
msgid "Example: <screen><![CDATA[\nCREATE TABLE test (y int, x xml);\nINSERT INTO test VALUES (1, '<foo>abc</foo>');\nINSERT INTO test VALUES (2, '<bar/>');\nSELECT xmlagg(x) FROM test;\n        xmlagg\n----------------------\n <foo>abc</foo><bar/>\n]]></screen>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9070(para) 
msgid "To determine the order of the concatenation, an <literal>ORDER BY</literal> clause may be added to the aggregate call as described in <xref linkend=\"syntax-aggregates\"/>. For example: <screen><![CDATA[\nSELECT xmlagg(x ORDER BY y DESC) FROM test;\n        xmlagg\n----------------------\n <bar/><foo>abc</foo>\n]]></screen>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9083(para) 
msgid "The following non-standard approach used to be recommended in previous versions, and may still be useful in specific cases: <screen><![CDATA[\nSELECT xmlagg(x) FROM (SELECT * FROM test ORDER BY y DESC) AS tab;\n        xmlagg\n----------------------\n <bar/><foo>abc</foo>\n]]></screen>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9099(title) 
msgid "XML Predicates"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9101(para) 
msgid "The expressions described in this section check properties of <type>xml</type> values."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9107(literal) /tmp/cicero-BGQN/func.xml:9110(primary) 
msgid "IS DOCUMENT"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9113(synopsis) 
#, no-wrap
msgid "\n<placeholder-1/> IS DOCUMENT\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9117(para) 
msgid "The expression <literal>IS DOCUMENT</literal> returns true if the argument XML value is a proper XML document, false if it is not (that is, it is a content fragment), or null if the argument is null. See <xref linkend=\"datatype-xml\"/> about the difference between documents and content fragments."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9127(literal) /tmp/cicero-BGQN/func.xml:9130(primary) /tmp/cicero-BGQN/func.xml:9134(function) 
msgid "XMLEXISTS"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9134(optional) /tmp/cicero-BGQN/func.xml:9134(optional) 
msgid "BY REF"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9133(synopsis) 
#, no-wrap
msgid "\n<placeholder-1/>(<placeholder-2/> PASSING <placeholder-3/> <placeholder-4/> <placeholder-5/>)\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9137(para) 
msgid "The function <function>xmlexists</function> returns true if the XPath expression in the first argument returns any nodes, and false otherwise. (If either argument is null, the result is null.)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9144(para) 
msgid "Example: <screen><![CDATA[\nSELECT xmlexists('//town[text() = ''Toronto''PASSING BY REF '<towns><town>Toronto</town><town>Ottawa</town></towns>');\n\n xmlexists\n------------\n t\n(1 row)\n]]></screen>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9156(para) 
msgid "The <literal>BY REF</literal> clauses have no effect in PostgreSQL, but are allowed for SQL conformance and compatibility with other implementations. Per SQL standard, the first <literal>BY REF</literal> is required, the second is optional. Also note that the SQL standard specifies the <function>xmlexists</function> construct to take an XQuery expression as first argument, but PostgreSQL currently only supports XPath, which is a subset of XQuery."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9169(literal) /tmp/cicero-BGQN/func.xml:9172(primary) /tmp/cicero-BGQN/func.xml:9184(function) 
msgid "xml_is_well_formed"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9176(primary) /tmp/cicero-BGQN/func.xml:9185(function) 
msgid "xml_is_well_formed_document"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9180(primary) /tmp/cicero-BGQN/func.xml:9186(function) 
msgid "xml_is_well_formed_content"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9183(synopsis) 
#, no-wrap
msgid "\n<placeholder-1/>(<placeholder-2/>)\n<placeholder-3/>(<placeholder-4/>)\n<placeholder-5/>(<placeholder-6/>)\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9189(para) 
msgid "These functions check whether a <type>text</type> string is well-formed XML, returning a Boolean result. <function>xml_is_well_formed_document</function> checks for a well-formed document, while <function>xml_is_well_formed_content</function> checks for well-formed content. <function>xml_is_well_formed</function> does the former if the <xref linkend=\"guc-xmloption\"/> configuration parameter is set to <literal>DOCUMENT</literal>, or the latter if it is set to <literal>CONTENT</literal>. This means that <function>xml_is_well_formed</function> is useful for seeing whether a simple cast to type <type>xml</type> will succeed, whereas the other two functions are useful for seeing whether the corresponding variants of <function>XMLPARSE</function> will succeed."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9204(para) 
msgid "Examples: <screen><![CDATA[\nSET xmloption TO DOCUMENT;\nSELECT xml_is_well_formed('<>');\n xml_is_well_formed \n--------------------\n f\n(1 row)\n\nSELECT xml_is_well_formed('<abc/>');\n xml_is_well_formed \n--------------------\n t\n(1 row)\n\nSET xmloption TO CONTENT;\nSELECT xml_is_well_formed('abc');\n xml_is_well_formed \n--------------------\n t\n(1 row)\n\nSELECT xml_is_well_formed_document('<pg:foo xmlns:pg=\"http://postgresql.org/stuff\">bar</pg:foo>');\n xml_is_well_formed_document \n-----------------------------\n t\n(1 row)\n\nSELECT xml_is_well_formed_document('<pg:foo xmlns:pg=\"http://postgresql.org/stuff\">bar</my:foo>');\n xml_is_well_formed_document \n-----------------------------\n f\n(1 row)\n]]></screen> The last example shows that the checks include whether namespaces are correctly matched."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9248(title) 
msgid "Processing XML"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9251(primary) 
msgid "XPath"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9254(para) 
msgid "To process values of data type <type>xml</type>, PostgreSQL offers the functions <function>xpath</function> and <function>xpath_exists</function>, which evaluate XPath 1.0 expressions."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9262(function) /tmp/cicero-BGQN/func.xml:9262(replaceable) /tmp/cicero-BGQN/func.xml:9321(replaceable) 
msgid "xpath"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9262(replaceable) /tmp/cicero-BGQN/func.xml:9321(replaceable) 
msgid "nsarray"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9261(synopsis) /tmp/cicero-BGQN/func.xml:9320(synopsis) 
#, no-wrap
msgid "\n<placeholder-1/>(<placeholder-2/>, <placeholder-3/> <placeholder-4/>)\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9265(para) 
msgid "The function <function>xpath</function> evaluates the XPath expression <replaceable>xpath</replaceable> (a <type>text</type> value) against the XML value <replaceable>xml</replaceable>. It returns an array of XML values corresponding to the node set produced by the XPath expression."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9273(para) 
msgid "The second argument must be a well formed XML document. In particular, it must have a single root node element."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9278(para) 
msgid "The optional third argument of the function is an array of namespace mappings. This array should be a two-dimensional <type>text</type> array with the length of the second axis being equal to 2 (i.e., it should be an array of arrays, each of which consists of exactly 2 elements). The first element of each array entry is the namespace name (alias), the second the namespace URI. It is not required that aliases provided in this array be the same as those being used in the XML document itself (in other words, both in the XML document and in the <function>xpath</function> function context, aliases are <emphasis>local</emphasis>)."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9290(para) 
msgid "Example: <screen><![CDATA[\nSELECT xpath('/my:a/text()', '<my:a xmlns:my=\"http://example.com\">test</my:a>',\n             ARRAY[ARRAY['my', 'http://example.com';\n\n xpath  \n--------\n {test}\n(1 row)\n]]></screen>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9303(para) 
msgid "To deal with default (anonymous) namespaces, do something like this: <screen><![CDATA[\nSELECT xpath('//mydefns:b/text()', '<a xmlns=\"http://example.com\"><b>test</b></a>',\n             ARRAY[ARRAY['mydefns', 'http://example.com';\n\n xpath\n--------\n {test}\n(1 row)\n]]></screen>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9317(primary) /tmp/cicero-BGQN/func.xml:9321(function) 
msgid "xpath_exists"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9324(para) 
msgid "The function <function>xpath_exists</function> is a specialized form of the <function>xpath</function> function. Instead of returning the individual XML values that satisfy the XPath, this function returns a Boolean indicating whether the query was satisfied or not. This function is equivalent to the standard <literal>XMLEXISTS</literal> predicate, except that it also offers support for a namespace mapping argument."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9333(para) 
msgid "Example: <screen><![CDATA[\nSELECT xpath_exists('/my:a/text()', '<my:a xmlns:my=\"http://example.com\">test</my:a>',\n                     ARRAY[ARRAY['my', 'http://example.com';\n\n xpath_exists  \n--------------\n t\n(1 row)\n]]></screen>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9348(title) 
msgid "Mapping Tables to XML"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9351(primary) 
msgid "XML export"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9354(para) 
msgid "The following functions map the contents of relational tables to XML values. They can be thought of as XML export functionality: <synopsis>\ntable_to_xml(tbl regclass, nulls boolean, tableforest boolean, targetns text)\nquery_to_xml(query text, nulls boolean, tableforest boolean, targetns text)\ncursor_to_xml(cursor refcursor, count int, nulls boolean,\n              tableforest boolean, targetns text)\n</synopsis> The return type of each function is <type>xml</type>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9366(para) 
msgid "<function>table_to_xml</function> maps the content of the named table, passed as parameter <parameter>tbl</parameter>. The <type>regclass</type> type accepts strings identifying tables using the usual notation, including optional schema qualifications and double quotes. <function>query_to_xml</function> executes the query whose text is passed as parameter <parameter>query</parameter> and maps the result set. <function>cursor_to_xml</function> fetches the indicated number of rows from the cursor specified by the parameter <parameter>cursor</parameter>. This variant is recommended if large tables have to be mapped, because the result value is built up in memory by each function."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9381(para) 
msgid "If <parameter>tableforest</parameter> is false, then the resulting XML document looks like this: <screen><![CDATA[\n<tablename>\n  <row>\n    <columnname1>data</columnname1>\n    <columnname2>data</columnname2>\n  </row>\n\n  <row>\n    ...\n  </row>\n\n  ...\n</tablename>\n]]></screen> If <parameter>tableforest</parameter> is true, the result is an XML content fragment that looks like this: <screen><![CDATA[\n<tablename>\n  <columnname1>data</columnname1>\n  <columnname2>data</columnname2>\n</tablename>\n\n<tablename>\n  ...\n</tablename>\n\n...\n]]></screen> If no table name is available, that is, when mapping a query or a cursor, the string <literal>table</literal> is used in the first format, <literal>row</literal> in the second format."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9419(para) 
msgid "The choice between these formats is up to the user. The first format is a proper XML document, which will be important in many applications. The second format tends to be more useful in the <function>cursor_to_xml</function> function if the result values are to be reassembled into one document later on. The functions for producing XML content discussed above, in particular <function>xmlelement</function>, can be used to alter the results to taste."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9430(para) 
msgid "The data values are mapped in the same way as described for the function <function>xmlelement</function> above."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9435(para) 
msgid "The parameter <parameter>nulls</parameter> determines whether null values should be included in the output. If true, null values in columns are represented as: <screen><![CDATA[\n<columnname xsi:nil=\"true\"/>\n]]></screen> where <literal>xsi</literal> is the XML namespace prefix for XML Schema Instance. An appropriate namespace declaration will be added to the result value. If false, columns containing null values are simply omitted from the output."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9448(para) 
msgid "The parameter <parameter>targetns</parameter> specifies the desired XML namespace of the result. If no particular namespace is wanted, an empty string should be passed."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9454(para) 
msgid "The following functions return XML Schema documents describing the mappings performed by the corresponding functions above: <synopsis>\ntable_to_xmlschema(tbl regclass, nulls boolean, tableforest boolean, targetns text)\nquery_to_xmlschema(query text, nulls boolean, tableforest boolean, targetns text)\ncursor_to_xmlschema(cursor refcursor, nulls boolean, tableforest boolean, targetns text)\n</synopsis> It is essential that the same parameters are passed in order to obtain matching XML data mappings and XML Schema documents."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9466(para) 
msgid "The following functions produce XML data mappings and the corresponding XML Schema in one document (or forest), linked together. They can be useful where self-contained and self-describing results are wanted: <synopsis>\ntable_to_xml_and_xmlschema(tbl regclass, nulls boolean, tableforest boolean, targetns text)\nquery_to_xml_and_xmlschema(query text, nulls boolean, tableforest boolean, targetns text)\n</synopsis>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9477(para) 
msgid "In addition, the following functions are available to produce analogous mappings of entire schemas or the entire current database: <synopsis>\nschema_to_xml(schema name, nulls boolean, tableforest boolean, targetns text)\nschema_to_xmlschema(schema name, nulls boolean, tableforest boolean, targetns text)\nschema_to_xml_and_xmlschema(schema name, nulls boolean, tableforest boolean, targetns text)\n\ndatabase_to_xml(nulls boolean, tableforest boolean, targetns text)\ndatabase_to_xmlschema(nulls boolean, tableforest boolean, targetns text)\ndatabase_to_xml_and_xmlschema(nulls boolean, tableforest boolean, targetns text)\n</synopsis> Note that these potentially produce a lot of data, which needs to be built up in memory. When requesting content mappings of large schemas or databases, it might be worthwhile to consider mapping the tables separately instead, possibly even through a cursor."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9497(para) 
msgid "The result of a schema content mapping looks like this: <screen><![CDATA[\n<schemaname>\n\ntable1-mapping\n\ntable2-mapping\n\n...\n\n</schemaname>]]></screen> where the format of a table mapping depends on the <parameter>tableforest</parameter> parameter as explained above."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9515(para) 
msgid "The result of a database content mapping looks like this: <screen><![CDATA[\n<dbname>\n\n<schema1name>\n  ...\n</schema1name>\n\n<schema2name>\n  ...\n</schema2name>\n\n...\n\n</dbname>]]></screen> where the schema mapping is as above."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9536(para) 
msgid "As an example of using the output produced by these functions, <xref linkend=\"xslt-xml-html\"/> shows an XSLT stylesheet that converts the output of <function>table_to_xml_and_xmlschema</function> to an HTML document containing a tabular rendition of the table data. In a similar manner, the results from these functions can be converted into other XML-based formats."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9547(title) 
msgid "XSLT Stylesheet for Converting SQL/XML Output to HTML"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9600(title) 
msgid "Sequence Manipulation Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9603(primary) /tmp/cicero-BGQN/func.xml:12777(parameter) /tmp/cicero-BGQN/func.xml:12784(parameter) 
msgid "sequence"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9606(primary) /tmp/cicero-BGQN/func.xml:9643(function) /tmp/cicero-BGQN/func.xml:9649(function) /tmp/cicero-BGQN/func.xml:9736(function) 
msgid "nextval"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9609(primary) /tmp/cicero-BGQN/func.xml:9748(function) 
msgid "currval"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9612(primary) /tmp/cicero-BGQN/func.xml:9763(function) 
msgid "lastval"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9615(primary) /tmp/cicero-BGQN/func.xml:9779(function) 
msgid "setval"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9618(para) 
msgid "This section describes <productname>PostgreSQL</productname>'s functions for operating on <firstterm>sequence objects</firstterm>. Sequence objects (also called sequence generators or just sequences) are special single-row tables created with <xref linkend=\"sql-createsequence\"/>. A sequence object is usually used to generate unique identifiers for rows of a table. The sequence functions, listed in <xref linkend=\"functions-sequence-table\"/>, provide simple, multiuser-safe methods for obtaining successive sequence values from sequence objects."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9632(title) 
msgid "Sequence Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9640(type) /tmp/cicero-BGQN/func.xml:9652(type) /tmp/cicero-BGQN/func.xml:9657(type) /tmp/cicero-BGQN/func.xml:9662(type) /tmp/cicero-BGQN/func.xml:14365(type) /tmp/cicero-BGQN/func.xml:14374(type) /tmp/cicero-BGQN/func.xml:14385(type) /tmp/cicero-BGQN/func.xml:14401(type) /tmp/cicero-BGQN/func.xml:14425(type) /tmp/cicero-BGQN/func.xml:14524(type) /tmp/cicero-BGQN/func.xml:14533(type) 
msgid "regclass"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9640(function) 
msgid "currval(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9642(entry) 
msgid "Return value most recently obtained with <placeholder-1/> for specified sequence"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9646(function) 
msgid "lastval()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9648(entry) 
msgid "Return value most recently obtained with <placeholder-1/> for any sequence"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9652(function) 
msgid "nextval(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9654(entry) 
msgid "Advance sequence and return new value"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9657(function) 
msgid "setval(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9659(entry) 
msgid "Set sequence's current value"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9662(function) 
msgid "setval(<placeholder-1/>, <placeholder-2/>, <placeholder-3/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9664(literal) 
msgid "is_called"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9664(entry) 
msgid "Set sequence's current value and <placeholder-1/> flag"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9680(programlisting) 
#, no-wrap
msgid "\nnextval('foo')      <lineannotation>operates on sequence <literal>foo</literal></lineannotation>\nnextval('FOO')      <lineannotation>operates on sequence <literal>foo</literal></lineannotation>\nnextval('\"Foo\"')    <lineannotation>operates on sequence <literal>Foo</literal></lineannotation>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9686(programlisting) 
#, no-wrap
msgid "\nnextval('myschema.foo')     <lineannotation>operates on <literal>myschema.foo</literal></lineannotation>\nnextval('\"myschema\".foo')   <lineannotation>same as above</lineannotation>\nnextval('foo')              <lineannotation>searches search path for <literal>foo</literal></lineannotation>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9670(para) 
msgid "The sequence to be operated on by a sequence function is specified by a <type>regclass</type> argument, which is simply the OID of the sequence in the <structname>pg_class</structname> system catalog. You do not have to look up the OID by hand, however, since the <type>regclass</type> data type's input converter will do the work for you. Just write the sequence name enclosed in single quotes so that it looks like a literal constant. For compatibility with the handling of ordinary <acronym>SQL</acronym> names, the string will be converted to lower case unless it contains double quotes around the sequence name. Thus: <placeholder-1/> The sequence name can be schema-qualified if necessary: <placeholder-2/> See <xref linkend=\"datatype-oid\"/> for more information about <type>regclass</type>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9696(para) 
msgid "Before <productname>PostgreSQL</productname> 8.1, the arguments of the sequence functions were of type <type>text</type>, not <type>regclass</type>, and the above-described conversion from a text string to an OID value would happen at run time during each call. For backward compatibility, this facility still exists, but internally it is now handled as an implicit coercion from <type>text</type> to <type>regclass</type> before the function is invoked."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9716(programlisting) 
#, no-wrap
msgid "\nnextval('foo'::text)      <lineannotation><literal>foo</literal> is looked up at runtime</lineannotation>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9706(para) 
msgid "When you write the argument of a sequence function as an unadorned literal string, it becomes a constant of type <type>regclass</type>. Since this is really just an OID, it will track the originally identified sequence despite later renaming, schema reassignment, etc. This <quote>early binding</quote> behavior is usually desirable for sequence references in column defaults and views. But sometimes you might want <quote>late binding</quote> where the sequence reference is resolved at run time. To get late-binding behavior, force the constant to be stored as a <type>text</type> constant instead of <type>regclass</type>: <placeholder-1/> Note that late binding was the only behavior supported in <productname>PostgreSQL</productname> releases before 8.1, so you might need to do this to preserve the semantics of old applications."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9724(para) 
msgid "Of course, the argument of a sequence function can be an expression as well as a constant. If it is a text expression then the implicit coercion will result in a run-time lookup."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9738(para) 
msgid "Advance the sequence object to its next value and return that value. This is done atomically: even if multiple sessions execute <function>nextval</function> concurrently, each will safely receive a distinct sequence value."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9750(para) 
msgid "Return the value most recently obtained by <function>nextval</function> for this sequence in the current session. (An error is reported if <function>nextval</function> has never been called for this sequence in this session.) Because this is returning a session-local value, it gives a predictable answer whether or not other sessions have executed <function>nextval</function> since the current session did."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9765(para) 
msgid "Return the value most recently returned by <function>nextval</function> in the current session. This function is identical to <function>currval</function>, except that instead of taking the sequence name as an argument it fetches the value of the last sequence used by <function>nextval</function> in the current session. It is an error to call <function>lastval</function> if <function>nextval</function> has not yet been called in the current session."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9781(para) 
msgid "Reset the sequence object's counter value. The two-parameter form sets the sequence's <literal>last_value</literal> field to the specified value and sets its <literal>is_called</literal> field to <literal>true</literal>, meaning that the next <function>nextval</function> will advance the sequence before returning a value. The value reported by <function>currval</function> is also set to the specified value. In the three-parameter form, <literal>is_called</literal> can be set to either <literal>true</literal> or <literal>false</literal>. <literal>true</literal> has the same effect as the two-parameter form. If it is set to <literal>false</literal>, the next <function>nextval</function> will return exactly the specified value, and sequence advancement commences with the following <function>nextval</function>. Furthermore, the value reported by <function>currval</function> is not changed in this case (this is a change from pre-8.3 behavior). For example, <screen>\nSELECT setval('foo', 42);           <lineannotation>Next <function>nextval</function> will return 43</lineannotation>\nSELECT setval('foo', 42, true);     <lineannotation>Same as above</lineannotation>\nSELECT setval('foo', 42, false);    <lineannotation>Next <function>nextval</function> will return 42</lineannotation>\n</screen> The result returned by <function>setval</function> is just the value of its second argument."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9731(para) 
msgid "The available sequence functions are: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9812(para) 
msgid "If a sequence object has been created with default parameters, successive <function>nextval</function> calls will return successive values beginning with 1. Other behaviors can be obtained by using special parameters in the <xref linkend=\"sql-createsequence\"/> command; see its command reference page for more information."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9821(para) 
msgid "To avoid blocking concurrent transactions that obtain numbers from the same sequence, a <function>nextval</function> operation is never rolled back; that is, once a value has been fetched it is considered used, even if the transaction that did the <function>nextval</function> later aborts. This means that aborted transactions might leave unused <quote>holes</quote> in the sequence of assigned values. <function>setval</function> operations are never rolled back, either."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9836(title) 
msgid "Conditional Expressions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9839(primary) /tmp/cicero-BGQN/func.xml:9860(literal) 
msgid "CASE"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9843(primary) 
msgid "conditional expression"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9846(para) 
msgid "This section describes the <acronym>SQL</acronym>-compliant conditional expressions available in <productname>PostgreSQL</productname>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9852(para) 
msgid "If your needs go beyond the capabilities of these conditional expressions, you might want to consider writing a stored procedure in a more expressive programming language."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9862(para) 
msgid "The <acronym>SQL</acronym><token>CASE</token> expression is a generic conditional expression, similar to if/else statements in other programming languages: <synopsis>\nCASE WHEN <replaceable>condition</replaceable> THEN <replaceable>result</replaceable>\n     <optional>WHEN ...</optional>\n     <optional>ELSE <replaceable>result</replaceable></optional>\nEND\n</synopsis><token>CASE</token> clauses can be used wherever an expression is valid. Each <replaceable>condition</replaceable> is an expression that returns a <type>boolean</type> result. If the condition's result is true, the value of the <token>CASE</token> expression is the <replaceable>result</replaceable> that follows the condition, and the remainder of the <token>CASE</token> expression is not processed. If the condition's result is not true, any subsequent <token>WHEN</token> clauses are examined in the same manner. If no <token>WHEN</token><replaceable>condition</replaceable> yields true, the value of the <token>CASE</token> expression is the <replaceable>result</replaceable> of the <token>ELSE</token> clause. If the <token>ELSE</token> clause is omitted and no condition is true, the result is null."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9888(para) 
msgid "An example: <screen>\nSELECT * FROM test;\n\n a\n---\n 1\n 2\n 3\n\n\nSELECT a,\n       CASE WHEN a=1 THEN 'one'\n            WHEN a=2 THEN 'two'\n            ELSE 'other'\n       END\n    FROM test;\n\n a | case\n---+-------\n 1 | one\n 2 | two\n 3 | other\n</screen>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9915(para) 
msgid "The data types of all the <replaceable>result</replaceable> expressions must be convertible to a single output type. See <xref linkend=\"typeconv-union-case\"/> for more details."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9921(para) 
msgid "There is a <quote>simple</quote> form of <token>CASE</token> expression that is a variant of the general form above: <synopsis>\nCASE <replaceable>expression</replaceable>\n    WHEN <replaceable>value</replaceable> THEN <replaceable>result</replaceable>\n    <optional>WHEN ...</optional>\n    <optional>ELSE <replaceable>result</replaceable></optional>\nEND\n</synopsis> The first <replaceable>expression</replaceable> is computed, then compared to each of the <replaceable>value</replaceable> expressions in the <token>WHEN</token> clauses until one is found that is equal to it. If no match is found, the <replaceable>result</replaceable> of the <token>ELSE</token> clause (or a null value) is returned. This is similar to the <function>switch</function> statement in C."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9942(para) 
msgid "The example above can be written using the simple <token>CASE</token> syntax: <screen>\nSELECT a,\n       CASE a WHEN 1 THEN 'one'\n              WHEN 2 THEN 'two'\n              ELSE 'other'\n       END\n    FROM test;\n\n a | case\n---+-------\n 1 | one\n 2 | two\n 3 | other\n</screen>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9965(programlisting) 
#, no-wrap
msgid "\nSELECT ... WHERE CASE WHEN x &lt;&gt; 0 THEN y/x &gt; 1.5 ELSE false END;\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9961(para) 
msgid "A <token>CASE</token> expression does not evaluate any subexpressions that are not needed to determine the result. For example, this is a possible way of avoiding a division-by-zero failure: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9972(literal) /tmp/cicero-BGQN/func.xml:9975(primary) /tmp/cicero-BGQN/func.xml:9987(function) 
msgid "COALESCE"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9979(primary) 
msgid "NVL"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9983(primary) 
msgid "IFNULL"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9986(synopsis) /tmp/cicero-BGQN/func.xml:10049(synopsis) /tmp/cicero-BGQN/func.xml:10052(synopsis) 
#, no-wrap
msgid "\n<placeholder-1/>(<placeholder-2/> <placeholder-3/>)\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9995(programlisting) 
#, no-wrap
msgid "\nSELECT COALESCE(description, short_description, '(none)') ...\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:9990(para) 
msgid "The <function>COALESCE</function> function returns the first of its arguments that is not null. Null is returned only if all arguments are null. It is often used to substitute a default value for null values when data is retrieved for display, for example: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10000(para) 
msgid "Like a <token>CASE</token> expression, <function>COALESCE</function> only evaluates the arguments that are needed to determine the result; that is, arguments to the right of the first non-null argument are not evaluated. This SQL-standard function provides capabilities similar to <function>NVL</function> and <function>IFNULL</function>, which are used in some other database systems."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10011(literal) /tmp/cicero-BGQN/func.xml:10014(primary) /tmp/cicero-BGQN/func.xml:10018(function) 
msgid "NULLIF"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10018(replaceable) 
msgid "value1"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10018(replaceable) 
msgid "value2"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10017(synopsis) 
#, no-wrap
msgid "\n<placeholder-1/>(<placeholder-2/>, <placeholder-3/>)\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10027(programlisting) 
#, no-wrap
msgid "\nSELECT NULLIF(value, '(none)') ...\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10021(para) 
msgid "The <function>NULLIF</function> function returns a null value if <replaceable>value1</replaceable> equals <replaceable>value2</replaceable>; otherwise it returns <replaceable>value1</replaceable>. This can be used to perform the inverse operation of the <function>COALESCE</function> example given above: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10031(para) 
msgid "In this example, if <literal>value</literal> is <literal>(none)</literal>, null is returned, otherwise the value of <literal>value</literal> is returned."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10040(title) 
msgid "<literal>GREATEST</literal> and <literal>LEAST</literal>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10043(primary) /tmp/cicero-BGQN/func.xml:10050(function) 
msgid "GREATEST"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10046(primary) /tmp/cicero-BGQN/func.xml:10053(function) 
msgid "LEAST"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10056(para) 
msgid "The <function>GREATEST</function> and <function>LEAST</function> functions select the largest or smallest value from a list of any number of expressions. The expressions must all be convertible to a common data type, which will be the type of the result (see <xref linkend=\"typeconv-union-case\"/> for details). NULL values in the list are ignored. The result will be NULL only if all the expressions evaluate to NULL."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10066(para) 
msgid "Note that <function>GREATEST</function> and <function>LEAST</function> are not in the SQL standard, but are a common extension. Some other databases make them return NULL if any argument is NULL, rather than only when all are NULL."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10076(title) 
msgid "Array Functions and Operators"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10078(para) 
msgid "<xref linkend=\"array-operators-table\"/> shows the operators available for array types."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10084(title) 
msgid "Array Operators"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10098(literal) 
msgid "ARRAY[1.1,2.1,3.1]::int[] = ARRAY[1,2,3]"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10105(literal) 
msgid "ARRAY[1,2,3] &lt;&gt; ARRAY[1,2,4]"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10112(literal) 
msgid "ARRAY[1,2,3] &lt; ARRAY[1,2,4]"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10119(literal) 
msgid "ARRAY[1,4,3] &gt; ARRAY[1,2,4]"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10125(entry) 
msgid "less than or equal"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10126(literal) 
msgid "ARRAY[1,2,3] &lt;= ARRAY[1,2,3]"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10132(entry) 
msgid "greater than or equal"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10133(literal) 
msgid "ARRAY[1,4,3] &gt;= ARRAY[1,4,3]"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10140(literal) 
msgid "ARRAY[1,4,3] @&gt; ARRAY[3,1]"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10146(entry) 
msgid "is contained by"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10147(literal) 
msgid "ARRAY[2,7] &lt;@ ARRAY[1,7,4,2,6]"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10153(entry) 
msgid "overlap (have elements in common)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10154(literal) 
msgid "ARRAY[1,4,3] &amp;&amp; ARRAY[2,1]"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10160(entry) /tmp/cicero-BGQN/func.xml:10167(entry) 
msgid "array-to-array concatenation"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10161(literal) 
msgid "ARRAY[1,2,3] || ARRAY[4,5,6]"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10162(literal) 
msgid "{1,2,3,4,5,6}"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10168(literal) 
msgid "ARRAY[1,2,3] || ARRAY[[4,5,6],[7,8,9]]"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10169(literal) 
msgid "{{1,2,3},{4,5,6},{7,8,9}}"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10174(entry) 
msgid "element-to-array concatenation"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10175(literal) 
msgid "3 || ARRAY[4,5,6]"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10176(literal) 
msgid "{3,4,5,6}"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10181(entry) 
msgid "array-to-element concatenation"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10182(literal) 
msgid "ARRAY[4,5,6] || 7"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10183(literal) 
msgid "{4,5,6,7}"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10189(para) 
msgid "Array comparisons compare the array contents element-by-element, using the default B-tree comparison function for the element data type. In multidimensional arrays the elements are visited in row-major order (last subscript varies most rapidly). If the contents of two arrays are equal but the dimensionality is different, the first difference in the dimensionality information determines the sort order. (This is a change from versions of <productname>PostgreSQL</productname> prior to 8.2: older versions would claim that two arrays with the same contents were equal, even if the number of dimensions or subscript ranges were different.)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10202(para) 
msgid "See <xref linkend=\"arrays\"/> for more details about array operator behavior."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10207(para) 
msgid "<xref linkend=\"array-functions-table\"/> shows the functions available for use with array types. See <xref linkend=\"arrays\"/> for more information and examples of the use of these functions."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10214(primary) /tmp/cicero-BGQN/func.xml:10266(function) 
msgid "array_append"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10217(primary) /tmp/cicero-BGQN/func.xml:10277(function) 
msgid "array_cat"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10220(primary) /tmp/cicero-BGQN/func.xml:10288(function) 
msgid "array_ndims"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10223(primary) /tmp/cicero-BGQN/func.xml:10299(function) 
msgid "array_dims"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10226(primary) /tmp/cicero-BGQN/func.xml:10310(function) 
msgid "array_fill"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10229(primary) /tmp/cicero-BGQN/func.xml:10323(function) 
msgid "array_length"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10232(primary) /tmp/cicero-BGQN/func.xml:10334(function) 
msgid "array_lower"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10235(primary) /tmp/cicero-BGQN/func.xml:10345(function) 
msgid "array_prepend"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10238(primary) /tmp/cicero-BGQN/func.xml:10356(function) 
msgid "array_to_string"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10241(primary) /tmp/cicero-BGQN/func.xml:10368(function) 
msgid "array_upper"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10244(primary) /tmp/cicero-BGQN/func.xml:10379(function) 
msgid "string_to_array"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10247(primary) /tmp/cicero-BGQN/func.xml:10391(function) 
msgid "unnest"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10251(title) 
msgid "Array Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10266(type) /tmp/cicero-BGQN/func.xml:10269(type) /tmp/cicero-BGQN/func.xml:10277(type) /tmp/cicero-BGQN/func.xml:10277(type) /tmp/cicero-BGQN/func.xml:10280(type) /tmp/cicero-BGQN/func.xml:10288(type) /tmp/cicero-BGQN/func.xml:10299(type) /tmp/cicero-BGQN/func.xml:10314(type) /tmp/cicero-BGQN/func.xml:10323(type) /tmp/cicero-BGQN/func.xml:10334(type) /tmp/cicero-BGQN/func.xml:10345(type) /tmp/cicero-BGQN/func.xml:10348(type) /tmp/cicero-BGQN/func.xml:10356(type) /tmp/cicero-BGQN/func.xml:10368(type) /tmp/cicero-BGQN/func.xml:10391(type) 
msgid "anyarray"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10270(entry) 
msgid "append an element to the end of an array"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10271(literal) 
msgid "array_append(ARRAY[1,2], 3)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10272(literal) /tmp/cicero-BGQN/func.xml:10351(literal) 
msgid "{1,2,3}"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10281(entry) 
msgid "concatenate two arrays"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10282(literal) 
msgid "array_cat(ARRAY[1,2,3], ARRAY[4,5])"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10283(literal) 
msgid "{1,2,3,4,5}"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10287(literal) /tmp/cicero-BGQN/func.xml:10298(literal) /tmp/cicero-BGQN/func.xml:10390(literal) /tmp/cicero-BGQN/func.xml:13374(entry) 
msgid "<placeholder-1/>(<placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10292(entry) 
msgid "returns the number of dimensions of the array"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10293(literal) 
msgid "array_ndims(ARRAY[[1,2,3], [4,5,6]])"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10303(entry) 
msgid "returns a text representation of array's dimensions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10304(literal) 
msgid "array_dims(ARRAY[[1,2,3], [4,5,6]])"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10305(literal) 
msgid "[1:2][1:3]"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10310(type) /tmp/cicero-BGQN/func.xml:10311(type) 
msgid "int[]"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10309(literal) /tmp/cicero-BGQN/func.xml:12669(literal) /tmp/cicero-BGQN/func.xml:12693(literal) /tmp/cicero-BGQN/func.xml:12701(literal) /tmp/cicero-BGQN/func.xml:12716(literal) /tmp/cicero-BGQN/func.xml:12731(literal) /tmp/cicero-BGQN/func.xml:12746(literal) /tmp/cicero-BGQN/func.xml:12761(literal) /tmp/cicero-BGQN/func.xml:12776(literal) /tmp/cicero-BGQN/func.xml:12791(literal) /tmp/cicero-BGQN/func.xml:12806(literal) /tmp/cicero-BGQN/func.xml:12821(literal) /tmp/cicero-BGQN/func.xml:12836(literal) 
msgid "<placeholder-1/>(<placeholder-2/>, <placeholder-3/>, <placeholder-4/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10315(entry) 
msgid "returns an array initialized with supplied value and dimensions, optionally with lower bounds other than 1"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10317(literal) 
msgid "array_fill(7, ARRAY[3], ARRAY[2])"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10318(literal) 
msgid "[2:4]={7,7,7}"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10327(entry) 
msgid "returns the length of the requested array dimension"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10328(literal) 
msgid "array_length(array[1,2,3], 1)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10338(entry) 
msgid "returns lower bound of the requested array dimension"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10339(literal) 
msgid "array_lower('[0:2]={1,2,3}'::int[], 1)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10349(entry) 
msgid "append an element to the beginning of an array"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10350(literal) 
msgid "array_prepend(1, ARRAY[2,3])"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10355(literal) /tmp/cicero-BGQN/func.xml:10378(literal) 
msgid "<placeholder-1/>(<placeholder-2/>, <placeholder-3/><placeholder-4/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10360(entry) 
msgid "concatenates array elements using supplied delimiter and optional null string"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10362(literal) 
msgid "array_to_string(ARRAY[1, 2, 3, NULL, 5], ',', '*')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10363(literal) 
msgid "1,2,3,*,5"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10372(entry) 
msgid "returns upper bound of the requested array dimension"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10373(literal) 
msgid "array_upper(ARRAY[1,8,3,7], 1)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10383(entry) 
msgid "splits string into array elements using supplied delimiter and optional null string"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10385(literal) 
msgid "string_to_array('xx~^~yy~^~zz', '~^~', 'yy')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10386(literal) 
msgid "{xx,NULL,zz}"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10394(type) 
msgid "setof anyelement"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10395(entry) 
msgid "expand an array to a set of rows"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10396(literal) 
msgid "unnest(ARRAY[1,2])"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10397(literallayout) 
#, no-wrap
msgid "1\n2"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10397(entry) 
msgid "<placeholder-1/>(2 rows)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10404(para) 
msgid "In <function>string_to_array</function>, if the delimiter parameter is NULL, each character in the input string will become a separate element in the resulting array. If the delimiter is an empty string, then the entire input string is returned as a one-element array. Otherwise the input string is split at each occurrence of the delimiter string."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10412(para) 
msgid "In <function>string_to_array</function>, if the null-string parameter is omitted or NULL, none of the substrings of the input will be replaced by NULL. In <function>array_to_string</function>, if the null-string parameter is omitted or NULL, any null elements in the array are simply skipped and not represented in the output string."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10422(para) 
msgid "There are two differences in the behavior of <function>string_to_array</function> from pre-9.1 versions of <productname>PostgreSQL</productname>. First, it will return an empty (zero-element) array rather than NULL when the input string is of zero length. Second, if the delimiter string is NULL, the function splits the input into individual characters, rather than returning NULL as before."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10432(para) 
msgid "See also <xref linkend=\"functions-aggregate\"/> about the aggregate function <function>array_agg</function> for use with arrays."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10439(title) 
msgid "Aggregate Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10442(primary) 
msgid "aggregate function"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10443(secondary) /tmp/cicero-BGQN/func.xml:11183(secondary) 
msgid "built-in"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10446(para) 
msgid "<firstterm>Aggregate functions</firstterm> compute a single result from a set of input values. The built-in aggregate functions are listed in <xref linkend=\"functions-aggregate-table\"/> and <xref linkend=\"functions-aggregate-statistics-table\"/>. The special syntax considerations for aggregate functions are explained in <xref linkend=\"syntax-aggregates\"/>. Consult <xref linkend=\"tutorial-agg\"/> for additional introductory information."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10459(title) 
msgid "General-Purpose Aggregate Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10465(entry) 
msgid "Argument Type(s)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10475(primary) 
msgid "array_agg"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10477(replaceable) /tmp/cicero-BGQN/func.xml:10496(replaceable) /tmp/cicero-BGQN/func.xml:10516(replaceable) /tmp/cicero-BGQN/func.xml:10533(replaceable) /tmp/cicero-BGQN/func.xml:10550(replaceable) /tmp/cicero-BGQN/func.xml:10566(replaceable) /tmp/cicero-BGQN/func.xml:10590(replaceable) /tmp/cicero-BGQN/func.xml:10595(replaceable) /tmp/cicero-BGQN/func.xml:10604(replaceable) /tmp/cicero-BGQN/func.xml:10620(replaceable) /tmp/cicero-BGQN/func.xml:10626(replaceable) /tmp/cicero-BGQN/func.xml:10636(replaceable) /tmp/cicero-BGQN/func.xml:10642(replaceable) /tmp/cicero-BGQN/func.xml:10653(replaceable) /tmp/cicero-BGQN/func.xml:10671(replaceable) /tmp/cicero-BGQN/func.xml:10686(replaceable) /tmp/cicero-BGQN/func.xml:10694(replaceable) /tmp/cicero-BGQN/func.xml:11048(replaceable) /tmp/cicero-BGQN/func.xml:11071(replaceable) /tmp/cicero-BGQN/func.xml:11094(replaceable) /tmp/cicero-BGQN/func.xml:11113(replaceable) /tmp/cicero-BGQN/func.xml:11136(replaceable) /tmp/cicero-BGQN/func.xml:11159(replaceable) /tmp/cicero-BGQN/func.xml:11551(replaceable) /tmp/cicero-BGQN/func.xml:11607(replaceable) /tmp/cicero-BGQN/func.xml:11663(replaceable) /tmp/cicero-BGQN/func.xml:11664(replaceable) /tmp/cicero-BGQN/func.xml:11728(replaceable) /tmp/cicero-BGQN/func.xml:11866(replaceable) /tmp/cicero-BGQN/func.xml:11897(replaceable) /tmp/cicero-BGQN/func.xml:11938(replaceable) /tmp/cicero-BGQN/func.xml:11939(replaceable) /tmp/cicero-BGQN/func.xml:11975(replaceable) 
msgid "expression"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10477(function) 
msgid "array_agg(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10479(entry) /tmp/cicero-BGQN/func.xml:10591(entry) /tmp/cicero-BGQN/func.xml:11306(type) /tmp/cicero-BGQN/func.xml:11308(type) /tmp/cicero-BGQN/func.xml:11333(type) /tmp/cicero-BGQN/func.xml:11335(type) /tmp/cicero-BGQN/func.xml:11359(type) /tmp/cicero-BGQN/func.xml:11375(type) /tmp/cicero-BGQN/func.xml:11392(type) /tmp/cicero-BGQN/func.xml:13419(parameter) /tmp/cicero-BGQN/func.xml:14345(type) 
msgid "any"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10482(entry) 
msgid "array of the argument type"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10485(entry) 
msgid "input values, including nulls, concatenated into an array"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10491(primary) 
msgid "average"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10494(primary) 
msgid "avg"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10496(function) 
msgid "avg(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10499(type) /tmp/cicero-BGQN/func.xml:10519(type) /tmp/cicero-BGQN/func.xml:10536(type) /tmp/cicero-BGQN/func.xml:10674(type) /tmp/cicero-BGQN/func.xml:10680(type) /tmp/cicero-BGQN/func.xml:11051(type) /tmp/cicero-BGQN/func.xml:11074(type) /tmp/cicero-BGQN/func.xml:11097(type) /tmp/cicero-BGQN/func.xml:11116(type) /tmp/cicero-BGQN/func.xml:11139(type) /tmp/cicero-BGQN/func.xml:11162(type) 
msgid "smallint"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10500(type) /tmp/cicero-BGQN/func.xml:10675(type) /tmp/cicero-BGQN/func.xml:11052(type) /tmp/cicero-BGQN/func.xml:11075(type) /tmp/cicero-BGQN/func.xml:11098(type) /tmp/cicero-BGQN/func.xml:11117(type) /tmp/cicero-BGQN/func.xml:11140(type) /tmp/cicero-BGQN/func.xml:11163(type) 
msgid "real"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10498(entry) /tmp/cicero-BGQN/func.xml:10673(entry) 
msgid "<placeholder-1/>, <placeholder-2/>, <placeholder-3/>, <placeholder-4/>, <placeholder-5/>, <placeholder-6/>, or <placeholder-7/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10503(entry) 
msgid "<placeholder-1/> for any integer-type argument, <placeholder-2/> for a floating-point argument, otherwise the same as the argument data type"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10508(entry) 
msgid "the average (arithmetic mean) of all input values"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10514(primary) 
msgid "bit_and"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10516(function) 
msgid "bit_and(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10520(type) /tmp/cicero-BGQN/func.xml:10537(type) 
msgid "bit"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10518(entry) /tmp/cicero-BGQN/func.xml:10535(entry) 
msgid "<placeholder-1/>, <placeholder-2/>, <placeholder-3/>, or <placeholder-4/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10522(entry) /tmp/cicero-BGQN/func.xml:10539(entry) 
msgid "same as argument data type"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10525(entry) 
msgid "the bitwise AND of all non-null input values, or null if none"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10531(primary) 
msgid "bit_or"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10533(function) 
msgid "bit_or(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10542(entry) 
msgid "the bitwise OR of all non-null input values, or null if none"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10548(primary) /tmp/cicero-BGQN/func.xml:10612(function) 
msgid "bool_and"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10550(function) 
msgid "bool_and(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10553(type) /tmp/cicero-BGQN/func.xml:10556(type) /tmp/cicero-BGQN/func.xml:10569(type) /tmp/cicero-BGQN/func.xml:10572(type) /tmp/cicero-BGQN/func.xml:10607(type) /tmp/cicero-BGQN/func.xml:10610(type) /tmp/cicero-BGQN/func.xml:14186(type) /tmp/cicero-BGQN/func.xml:14266(type) 
msgid "bool"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10558(entry) 
msgid "true if all input values are true, otherwise false"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10564(primary) 
msgid "bool_or"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10566(function) 
msgid "bool_or(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10574(entry) 
msgid "true if at least one input value is true, otherwise false"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10582(function) 
msgid "count(*)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10586(entry) 
msgid "number of input rows"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10590(function) 
msgid "count(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10593(entry) 
msgid "number of input rows for which the value of <placeholder-1/> is not null"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10602(primary) 
msgid "every"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10604(function) 
msgid "every(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10612(entry) /tmp/cicero-BGQN/func.xml:12452(entry) 
msgid "equivalent to <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10618(primary) 
msgid "max"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10620(function) 
msgid "max(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10622(entry) /tmp/cicero-BGQN/func.xml:10638(entry) 
msgid "any array, numeric, string, or date/time type"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10623(entry) /tmp/cicero-BGQN/func.xml:10639(entry) 
msgid "same as argument type"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10624(entry) 
msgid "maximum value of <placeholder-1/> across all input values"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10634(primary) 
msgid "min"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10636(function) 
msgid "min(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10640(entry) 
msgid "minimum value of <placeholder-1/> across all input values"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10650(primary) 
msgid "string_agg"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10652(function) 
msgid "string_agg(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10657(entry) /tmp/cicero-BGQN/func.xml:14053(entry) 
msgid "<placeholder-1/>, <placeholder-2/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10663(entry) 
msgid "input values concatenated into a string, separated by delimiter"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10669(primary) 
msgid "sum"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10671(function) 
msgid "sum(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10679(entry) 
msgid "<placeholder-1/> for <placeholder-2/> or <placeholder-3/> arguments, <placeholder-4/> for <placeholder-5/> arguments, <placeholder-6/> for floating-point arguments, otherwise the same as the argument data type"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10686(entry) 
msgid "sum of <placeholder-1/> across all input values"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10694(function) 
msgid "xmlagg(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10702(entry) 
msgid "concatenation of XML values (see also <xref linkend=\"functions-xml-xmlagg\"/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10708(para) 
msgid "It should be noted that except for <function>count</function>, these functions return a null value when no rows are selected. In particular, <function>sum</function> of no rows returns null, not zero as one might expect, and <function>array_agg</function> returns null rather than an empty array when there are no input rows. The <function>coalesce</function> function can be used to substitute zero or an empty array for null when necessary."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10720(primary) /tmp/cicero-BGQN/func.xml:11475(primary) /tmp/cicero-BGQN/func.xml:11822(primary) 
msgid "ANY"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10723(primary) /tmp/cicero-BGQN/func.xml:11483(primary) /tmp/cicero-BGQN/func.xml:11830(primary) 
msgid "SOME"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10732(programlisting) 
#, no-wrap
msgid "\nSELECT b1 = ANY((SELECT b2 FROM t2 ...)) FROM t1 ...;\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10725(para) 
msgid "Boolean aggregates <function>bool_and</function> and <function>bool_or</function> correspond to standard SQL aggregates <function>every</function> and <function>any</function> or <function>some</function>. As for <function>any</function> and <function>some</function>, it seems that there is an ambiguity built into the standard syntax: <placeholder-1/> Here <function>ANY</function> can be considered either as introducing a subquery, or as being an aggregate function, if the subquery returns one row with a Boolean value. Thus the standard name cannot be given to these aggregates."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10748(programlisting) 
#, no-wrap
msgid "\nSELECT count(*) FROM sometable;\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10743(para) 
msgid "Users accustomed to working with other SQL database management systems might be disappointed by the performance of the <function>count</function> aggregate when it is applied to the entire table. A query like: <placeholder-1/> will be executed by <productname>PostgreSQL</productname> using a sequential scan of the entire table."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10756(para) 
msgid "The aggregate functions <function>array_agg</function>, <function>string_agg</function>, and <function>xmlagg</function>, as well as similar user-defined aggregate functions, produce meaningfully different result values depending on the order of the input values. This ordering is unspecified by default, but can be controlled by writing an <literal>ORDER BY</literal> clause within the aggregate call, as shown in <xref linkend=\"syntax-aggregates\"/>. Alternatively, supplying the input values from a sorted subquery will usually work. For example: <screen><![CDATA[\nSELECT xmlagg(x) FROM (SELECT x FROM test ORDER BY y DESC) AS tab;\n]]></screen> But this syntax is not allowed in the SQL standard, and is not portable to other database systems."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10776(para) 
msgid "<xref linkend=\"functions-aggregate-statistics-table\"/> shows aggregate functions typically used in statistical analysis. (These are separated out merely to avoid cluttering the listing of more-commonly-used aggregates.) Where the description mentions <replaceable class=\"parameter\">N</replaceable>, it means the number of input rows for which all the input expressions are non-null. In all cases, null is returned if the computation is meaningless, for example when <replaceable class=\"parameter\">N</replaceable> is zero."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10788(primary) 
msgid "statistics"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10791(primary) 
msgid "linear regression"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10795(title) 
msgid "Aggregate Functions for Statistics"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10801(entry) /tmp/cicero-BGQN/func.xml:12127(entry) 
msgid "Argument Type"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10812(primary) 
msgid "correlation"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10815(primary) 
msgid "corr"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10817(function) 
msgid "corr(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10825(entry) 
msgid "correlation coefficient"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10831(primary) /tmp/cicero-BGQN/func.xml:10851(primary) 
msgid "covariance"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10832(secondary) /tmp/cicero-BGQN/func.xml:11066(secondary) /tmp/cicero-BGQN/func.xml:11131(secondary) 
msgid "population"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10835(primary) 
msgid "covar_pop"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10837(function) 
msgid "covar_pop(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10845(entry) 
msgid "population covariance"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10852(secondary) /tmp/cicero-BGQN/func.xml:11089(secondary) /tmp/cicero-BGQN/func.xml:11154(secondary) 
msgid "sample"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10855(primary) 
msgid "covar_samp"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10857(function) 
msgid "covar_samp(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10865(entry) 
msgid "sample covariance"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10871(primary) 
msgid "regr_avgx"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10873(function) 
msgid "regr_avgx(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10882(replaceable) /tmp/cicero-BGQN/func.xml:10899(replaceable) /tmp/cicero-BGQN/func.xml:10993(replaceable) /tmp/cicero-BGQN/func.xml:11015(replaceable) /tmp/cicero-BGQN/func.xml:11036(replaceable) 
msgid "N"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10882(literal) /tmp/cicero-BGQN/func.xml:10899(literal) 
msgid "sum(<placeholder-1/>)/<placeholder-2/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10881(entry) 
msgid "average of the independent variable (<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10888(primary) 
msgid "regr_avgy"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10890(function) 
msgid "regr_avgy(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10898(entry) 
msgid "average of the dependent variable (<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10905(primary) 
msgid "regr_count"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10907(function) 
msgid "regr_count(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10915(entry) 
msgid "number of input rows in which both expressions are nonnull"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10921(primary) 
msgid "regression intercept"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10924(primary) 
msgid "regr_intercept"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10926(function) 
msgid "regr_intercept(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10934(entry) 
msgid "y-intercept of the least-squares-fit linear equation determined by the (<placeholder-1/>, <placeholder-2/>) pairs"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10943(primary) 
msgid "regr_r2"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10945(function) 
msgid "regr_r2(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10953(entry) 
msgid "square of the correlation coefficient"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10959(primary) 
msgid "regression slope"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10962(primary) 
msgid "regr_slope"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10964(function) 
msgid "regr_slope(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10972(entry) 
msgid "slope of the least-squares-fit linear equation determined by the (<placeholder-1/>, <placeholder-2/>) pairs"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10980(primary) 
msgid "regr_sxx"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10982(function) 
msgid "regr_sxx(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10990(literal) /tmp/cicero-BGQN/func.xml:11033(literal) 
msgid "sum(<placeholder-1/>^2) - sum(<placeholder-2/>)^2/<placeholder-3/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10993(quote) /tmp/cicero-BGQN/func.xml:11036(quote) 
msgid "sum of squares"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:10990(entry) 
msgid "<placeholder-1/> (<placeholder-2/> of the independent variable)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11000(primary) 
msgid "regr_sxy"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11002(function) 
msgid "regr_sxy(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11010(literal) 
msgid "sum(<placeholder-1/>*<placeholder-2/>) - sum(<placeholder-3/>) * sum(<placeholder-4/>)/<placeholder-5/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11015(quote) 
msgid "sum of products"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11010(entry) 
msgid "<placeholder-1/> (<placeholder-2/> of independent times dependent variable)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11023(primary) 
msgid "regr_syy"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11025(function) 
msgid "regr_syy(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11033(entry) 
msgid "<placeholder-1/> (<placeholder-2/> of the dependent variable)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11043(primary) /tmp/cicero-BGQN/func.xml:11065(primary) /tmp/cicero-BGQN/func.xml:11088(primary) 
msgid "standard deviation"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11046(primary) 
msgid "stddev"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11048(function) 
msgid "stddev(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11050(entry) /tmp/cicero-BGQN/func.xml:11073(entry) /tmp/cicero-BGQN/func.xml:11096(entry) /tmp/cicero-BGQN/func.xml:11115(entry) /tmp/cicero-BGQN/func.xml:11138(entry) /tmp/cicero-BGQN/func.xml:11161(entry) 
msgid "<placeholder-1/>, <placeholder-2/>, <placeholder-3/>, <placeholder-4/>, <placeholder-5/>, or <placeholder-6/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11055(entry) /tmp/cicero-BGQN/func.xml:11078(entry) /tmp/cicero-BGQN/func.xml:11101(entry) /tmp/cicero-BGQN/func.xml:11120(entry) /tmp/cicero-BGQN/func.xml:11143(entry) /tmp/cicero-BGQN/func.xml:11166(entry) 
msgid "<placeholder-1/> for floating-point arguments, otherwise <placeholder-2/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11059(function) /tmp/cicero-BGQN/func.xml:11092(primary) 
msgid "stddev_samp"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11059(entry) /tmp/cicero-BGQN/func.xml:11124(entry) 
msgid "historical alias for <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11069(primary) 
msgid "stddev_pop"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11071(function) 
msgid "stddev_pop(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11082(entry) 
msgid "population standard deviation of the input values"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11094(function) 
msgid "stddev_samp(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11105(entry) 
msgid "sample standard deviation of the input values"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11111(primary) /tmp/cicero-BGQN/func.xml:11113(function) /tmp/cicero-BGQN/func.xml:11130(primary) /tmp/cicero-BGQN/func.xml:11153(primary) 
msgid "variance"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11109(entry) 
msgid "<indexterm><placeholder-1/></indexterm><placeholder-2/>(<placeholder-3/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11124(function) /tmp/cicero-BGQN/func.xml:11157(primary) /tmp/cicero-BGQN/func.xml:11159(function) 
msgid "var_samp"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11134(primary) /tmp/cicero-BGQN/func.xml:11136(function) 
msgid "var_pop"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11128(entry) /tmp/cicero-BGQN/func.xml:11151(entry) 
msgid "<indexterm><placeholder-1/><placeholder-2/></indexterm><indexterm><placeholder-3/></indexterm><placeholder-4/>(<placeholder-5/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11147(entry) 
msgid "population variance of the input values (square of the population standard deviation)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11170(entry) 
msgid "sample variance of the input values (square of the sample standard deviation)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11179(title) 
msgid "Window Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11182(primary) 
msgid "window function"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11186(para) 
msgid "<firstterm>Window functions</firstterm> provide the ability to perform calculations across sets of rows that are related to the current query row. See <xref linkend=\"tutorial-window\"/> for an introduction to this feature."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11193(para) 
msgid "The built-in window functions are listed in <xref linkend=\"functions-window-table\"/>. Note that these functions <emphasis>must</emphasis> be invoked using window function syntax; that is an <literal>OVER</literal> clause is required."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11200(para) 
msgid "In addition to these functions, any built-in or user-defined aggregate function can be used as a window function (see <xref linkend=\"functions-aggregate\"/> for a list of the built-in aggregates). Aggregate functions act as window functions only when an <literal>OVER</literal> clause follows the call; otherwise they act as regular aggregates."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11209(title) 
msgid "General-Purpose Window Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11224(primary) /tmp/cicero-BGQN/func.xml:11244(function) 
msgid "row_number"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11226(function) 
msgid "row_number()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11231(entry) 
msgid "number of the current row within its partition, counting from 1"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11237(primary) /tmp/cicero-BGQN/func.xml:11270(function) 
msgid "rank"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11239(function) 
msgid "rank()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11244(entry) 
msgid "rank of the current row with gaps; same as <placeholder-1/> of its first peer"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11250(primary) 
msgid "dense_rank"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11252(function) 
msgid "dense_rank()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11257(entry) 
msgid "rank of the current row without gaps; this function counts peer groups"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11263(primary) 
msgid "percent_rank"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11265(function) 
msgid "percent_rank()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11270(entry) 
msgid "relative rank of the current row: (<placeholder-1/> - 1) / (total rows - 1)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11276(primary) 
msgid "cume_dist"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11278(function) 
msgid "cume_dist()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11283(entry) 
msgid "relative rank of the current row: (number of rows preceding or peer with current row) / (total rows)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11289(primary) 
msgid "ntile"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11291(replaceable) 
msgid "num_buckets"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11291(function) 
msgid "ntile(<placeholder-1/><placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11296(entry) 
msgid "integer ranging from 1 to the argument value, dividing the partition as equally as possible"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11303(primary) 
msgid "lag"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11308(replaceable) /tmp/cicero-BGQN/func.xml:11318(replaceable) /tmp/cicero-BGQN/func.xml:11320(replaceable) /tmp/cicero-BGQN/func.xml:11323(replaceable) /tmp/cicero-BGQN/func.xml:11335(replaceable) /tmp/cicero-BGQN/func.xml:11345(replaceable) /tmp/cicero-BGQN/func.xml:11347(replaceable) /tmp/cicero-BGQN/func.xml:11350(replaceable) 
msgid "default"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11305(function) 
msgid "lag(<placeholder-1/><placeholder-2/> [, <placeholder-3/><placeholder-4/> [, <placeholder-5/><placeholder-6/> ]])"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11312(type) /tmp/cicero-BGQN/func.xml:11339(type) /tmp/cicero-BGQN/func.xml:11362(type) /tmp/cicero-BGQN/func.xml:11378(type) /tmp/cicero-BGQN/func.xml:11396(type) 
msgid "same type as <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11314(entry) 
msgid "returns <placeholder-1/> evaluated at the row that is <placeholder-2/> rows before the current row within the partition; if there is no such row, instead return <placeholder-3/>. Both <placeholder-4/> and <placeholder-5/> are evaluated with respect to the current row. If omitted, <placeholder-6/> defaults to 1 and <placeholder-7/> to null"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11330(primary) 
msgid "lead"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11332(function) 
msgid "lead(<placeholder-1/><placeholder-2/> [, <placeholder-3/><placeholder-4/> [, <placeholder-5/><placeholder-6/> ]])"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11341(entry) 
msgid "returns <placeholder-1/> evaluated at the row that is <placeholder-2/> rows after the current row within the partition; if there is no such row, instead return <placeholder-3/>. Both <placeholder-4/> and <placeholder-5/> are evaluated with respect to the current row. If omitted, <placeholder-6/> defaults to 1 and <placeholder-7/> to null"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11357(primary) 
msgid "first_value"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11359(function) 
msgid "first_value(<placeholder-1/><placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11364(entry) 
msgid "returns <placeholder-1/> evaluated at the row that is the first row of the window frame"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11373(primary) 
msgid "last_value"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11375(function) 
msgid "last_value(<placeholder-1/><placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11380(entry) 
msgid "returns <placeholder-1/> evaluated at the row that is the last row of the window frame"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11389(primary) 
msgid "nth_value"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11392(replaceable) /tmp/cicero-BGQN/func.xml:11400(replaceable) 
msgid "nth"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11391(function) 
msgid "nth_value(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11398(entry) 
msgid "returns <placeholder-1/> evaluated at the row that is the <placeholder-2/> row of the window frame (counting from 1); null if no such row"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11408(para) 
msgid "All of the functions listed in <xref linkend=\"functions-window-table\"/> depend on the sort ordering specified by the <literal>ORDER BY</literal> clause of the associated window definition. Rows that are not distinct in the <literal>ORDER BY</literal> ordering are said to be <firstterm>peers</firstterm>; the four ranking functions are defined so that they give the same answer for any two peer rows."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11417(para) 
msgid "Note that <function>first_value</function>, <function>last_value</function>, and <function>nth_value</function> consider only the rows within the <quote>window frame</quote>, which by default contains the rows from the start of the partition through the last peer of the current row. This is likely to give unhelpful results for <function>last_value</function> and sometimes also <function>nth_value</function>. You can redefine the frame by adding a suitable frame specification (<literal>RANGE</literal> or <literal>ROWS</literal>) to the <literal>OVER</literal> clause. See <xref linkend=\"syntax-window-functions\"/> for more information about frame specifications."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11430(para) 
msgid "When an aggregate function is used as a window function, it aggregates over the rows within the current row's window frame. An aggregate used with <literal>ORDER BY</literal> and the default window frame definition produces a <quote>running sum</quote> type of behavior, which may or may not be what's wanted. To obtain aggregation over the whole partition, omit <literal>ORDER BY</literal> or use <literal>ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING</literal>. Other frame specifications can be used to obtain other effects."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11442(para) 
msgid "The SQL standard defines a <literal>RESPECT NULLS</literal> or <literal>IGNORE NULLS</literal> option for <function>lead</function>, <function>lag</function>, <function>first_value</function>, <function>last_value</function>, and <function>nth_value</function>. This is not implemented in <productname>PostgreSQL</productname>: the behavior is always the same as the standard's default, namely <literal>RESPECT NULLS</literal>. Likewise, the standard's <literal>FROM FIRST</literal> or <literal>FROM LAST</literal> option for <function>nth_value</function> is not implemented: only the default <literal>FROM FIRST</literal> behavior is supported. (You can achieve the result of <literal>FROM LAST</literal> by reversing the <literal>ORDER BY</literal> ordering.)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11460(title) 
msgid "Subquery Expressions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11463(primary) /tmp/cicero-BGQN/func.xml:11498(literal) 
msgid "EXISTS"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11467(primary) /tmp/cicero-BGQN/func.xml:11548(literal) /tmp/cicero-BGQN/func.xml:11814(primary) /tmp/cicero-BGQN/func.xml:11863(literal) 
msgid "IN"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11471(primary) /tmp/cicero-BGQN/func.xml:11604(literal) /tmp/cicero-BGQN/func.xml:11818(primary) /tmp/cicero-BGQN/func.xml:11894(literal) 
msgid "NOT IN"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11479(primary) /tmp/cicero-BGQN/func.xml:11725(literal) /tmp/cicero-BGQN/func.xml:11826(primary) 
msgid "ALL"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11487(primary) /tmp/cicero-BGQN/func.xml:11501(replaceable) /tmp/cicero-BGQN/func.xml:11551(replaceable) /tmp/cicero-BGQN/func.xml:11577(replaceable) /tmp/cicero-BGQN/func.xml:11607(replaceable) /tmp/cicero-BGQN/func.xml:11633(replaceable) /tmp/cicero-BGQN/func.xml:11663(replaceable) /tmp/cicero-BGQN/func.xml:11664(replaceable) /tmp/cicero-BGQN/func.xml:11697(replaceable) /tmp/cicero-BGQN/func.xml:11698(replaceable) /tmp/cicero-BGQN/func.xml:11728(replaceable) /tmp/cicero-BGQN/func.xml:11754(replaceable) /tmp/cicero-BGQN/func.xml:11789(replaceable) 
msgid "subquery"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11490(para) 
msgid "This section describes the <acronym>SQL</acronym>-compliant subquery expressions available in <productname>PostgreSQL</productname>. All of the expression forms documented in this section return Boolean (true/false) results."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11500(synopsis) 
#, no-wrap
msgid "\nEXISTS (<placeholder-1/>)\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11504(para) 
msgid "The argument of <token>EXISTS</token> is an arbitrary <command>SELECT</command> statement, or <firstterm>subquery</firstterm>. The subquery is evaluated to determine whether it returns any rows. If it returns at least one row, the result of <token>EXISTS</token> is <quote>true</quote>; if the subquery returns no rows, the result of <token>EXISTS</token> is <quote>false</quote>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11513(para) 
msgid "The subquery can refer to variables from the surrounding query, which will act as constants during any one evaluation of the subquery."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11518(para) 
msgid "The subquery will generally only be executed long enough to determine whether at least one row is returned, not all the way to completion. It is unwise to write a subquery that has side effects (such as calling sequence functions); whether the side effects occur might be unpredictable."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11526(para) 
msgid "Since the result depends only on whether any rows are returned, and not on the contents of those rows, the output list of the subquery is normally unimportant. A common coding convention is to write all <literal>EXISTS</literal> tests in the form <literal>EXISTS(SELECT 1 WHERE ...)</literal>. There are exceptions to this rule however, such as subqueries that use <token>INTERSECT</token>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11535(para) 
msgid "This simple example is like an inner join on <literal>col2</literal>, but it produces at most one output row for each <literal>tab1</literal> row, even if there are several matching <literal>tab2</literal> rows: <screen>\nSELECT col1\nFROM tab1\nWHERE EXISTS (SELECT 1 FROM tab2 WHERE col2 = tab1.col2);\n</screen>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11550(synopsis) /tmp/cicero-BGQN/func.xml:11576(synopsis) 
#, no-wrap
msgid "\n<placeholder-1/> IN (<placeholder-2/>)\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11554(para) 
msgid "The right-hand side is a parenthesized subquery, which must return exactly one column. The left-hand expression is evaluated and compared to each row of the subquery result. The result of <token>IN</token> is <quote>true</quote> if any equal subquery row is found. The result is <quote>false</quote> if no equal row is found (including the case where the subquery returns no rows)."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11563(para) 
msgid "Note that if the left-hand expression yields null, or if there are no equal right-hand values and at least one right-hand row yields null, the result of the <token>IN</token> construct will be null, not false. This is in accordance with SQL's normal rules for Boolean combinations of null values."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11571(para) /tmp/cicero-BGQN/func.xml:11627(para) /tmp/cicero-BGQN/func.xml:11691(para) /tmp/cicero-BGQN/func.xml:11748(para) 
msgid "As with <token>EXISTS</token>, it's unwise to assume that the subquery will be evaluated completely."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11577(replaceable) /tmp/cicero-BGQN/func.xml:11633(replaceable) /tmp/cicero-BGQN/func.xml:11697(replaceable) /tmp/cicero-BGQN/func.xml:11698(replaceable) /tmp/cicero-BGQN/func.xml:11754(replaceable) /tmp/cicero-BGQN/func.xml:11789(replaceable) /tmp/cicero-BGQN/func.xml:12007(replaceable) /tmp/cicero-BGQN/func.xml:12007(replaceable) /tmp/cicero-BGQN/func.xml:12062(replaceable) /tmp/cicero-BGQN/func.xml:12062(replaceable) /tmp/cicero-BGQN/func.xml:12074(replaceable) /tmp/cicero-BGQN/func.xml:12074(replaceable) 
msgid "row_constructor"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11580(para) 
msgid "The left-hand side of this form of <token>IN</token> is a row constructor, as described in <xref linkend=\"sql-syntax-row-constructors\"/>. The right-hand side is a parenthesized subquery, which must return exactly as many columns as there are expressions in the left-hand row. The left-hand expressions are evaluated and compared row-wise to each row of the subquery result. The result of <token>IN</token> is <quote>true</quote> if any equal subquery row is found. The result is <quote>false</quote> if no equal row is found (including the case where the subquery returns no rows)."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11592(para) 
msgid "As usual, null values in the rows are combined per the normal rules of SQL Boolean expressions. Two rows are considered equal if all their corresponding members are non-null and equal; the rows are unequal if any corresponding members are non-null and unequal; otherwise the result of that row comparison is unknown (null). If all the per-row results are either unequal or null, with at least one null, then the result of <token>IN</token> is null."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11606(synopsis) /tmp/cicero-BGQN/func.xml:11632(synopsis) 
#, no-wrap
msgid "\n<placeholder-1/> NOT IN (<placeholder-2/>)\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11610(para) 
msgid "The right-hand side is a parenthesized subquery, which must return exactly one column. The left-hand expression is evaluated and compared to each row of the subquery result. The result of <token>NOT IN</token> is <quote>true</quote> if only unequal subquery rows are found (including the case where the subquery returns no rows). The result is <quote>false</quote> if any equal row is found."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11619(para) 
msgid "Note that if the left-hand expression yields null, or if there are no equal right-hand values and at least one right-hand row yields null, the result of the <token>NOT IN</token> construct will be null, not true. This is in accordance with SQL's normal rules for Boolean combinations of null values."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11636(para) 
msgid "The left-hand side of this form of <token>NOT IN</token> is a row constructor, as described in <xref linkend=\"sql-syntax-row-constructors\"/>. The right-hand side is a parenthesized subquery, which must return exactly as many columns as there are expressions in the left-hand row. The left-hand expressions are evaluated and compared row-wise to each row of the subquery result. The result of <token>NOT IN</token> is <quote>true</quote> if only unequal subquery rows are found (including the case where the subquery returns no rows). The result is <quote>false</quote> if any equal row is found."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11648(para) 
msgid "As usual, null values in the rows are combined per the normal rules of SQL Boolean expressions. Two rows are considered equal if all their corresponding members are non-null and equal; the rows are unequal if any corresponding members are non-null and unequal; otherwise the result of that row comparison is unknown (null). If all the per-row results are either unequal or null, with at least one null, then the result of <token>NOT IN</token> is null."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11660(title) 
msgid "<literal>ANY</literal>/<literal>SOME</literal>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11662(synopsis) /tmp/cicero-BGQN/func.xml:11696(synopsis) /tmp/cicero-BGQN/func.xml:11937(synopsis) 
#, no-wrap
msgid "\n<placeholder-1/> <placeholder-2/> ANY (<placeholder-3/>)\n<placeholder-4/> <placeholder-5/> SOME (<placeholder-6/>)\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11667(para) 
msgid "The right-hand side is a parenthesized subquery, which must return exactly one column. The left-hand expression is evaluated and compared to each row of the subquery result using the given <replaceable>operator</replaceable>, which must yield a Boolean result. The result of <token>ANY</token> is <quote>true</quote> if any true result is obtained. The result is <quote>false</quote> if no true result is found (including the case where the subquery returns no rows)."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11678(para) 
msgid "<token>SOME</token> is a synonym for <token>ANY</token>. <token>IN</token> is equivalent to <literal>= ANY</literal>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11683(para) 
msgid "Note that if there are no successes and at least one right-hand row yields null for the operator's result, the result of the <token>ANY</token> construct will be null, not false. This is in accordance with SQL's normal rules for Boolean combinations of null values."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11701(para) 
msgid "The left-hand side of this form of <token>ANY</token> is a row constructor, as described in <xref linkend=\"sql-syntax-row-constructors\"/>. The right-hand side is a parenthesized subquery, which must return exactly as many columns as there are expressions in the left-hand row. The left-hand expressions are evaluated and compared row-wise to each row of the subquery result, using the given <replaceable>operator</replaceable>. The result of <token>ANY</token> is <quote>true</quote> if the comparison returns true for any subquery row. The result is <quote>false</quote> if the comparison returns false for every subquery row (including the case where the subquery returns no rows). The result is NULL if the comparison does not return true for any row, and it returns NULL for at least one row."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11718(para) /tmp/cicero-BGQN/func.xml:11774(para) /tmp/cicero-BGQN/func.xml:11802(para) 
msgid "See <xref linkend=\"row-wise-comparison\"/> for details about the meaning of a row-wise comparison."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11727(synopsis) /tmp/cicero-BGQN/func.xml:11753(synopsis) /tmp/cicero-BGQN/func.xml:11974(synopsis) 
#, no-wrap
msgid "\n<placeholder-1/> <placeholder-2/> ALL (<placeholder-3/>)\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11731(para) 
msgid "The right-hand side is a parenthesized subquery, which must return exactly one column. The left-hand expression is evaluated and compared to each row of the subquery result using the given <replaceable>operator</replaceable>, which must yield a Boolean result. The result of <token>ALL</token> is <quote>true</quote> if all rows yield true (including the case where the subquery returns no rows). The result is <quote>false</quote> if any false result is found. The result is NULL if the comparison does not return false for any row, and it returns NULL for at least one row."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11744(para) 
msgid "<token>NOT IN</token> is equivalent to <literal>&lt;&gt; ALL</literal>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11757(para) 
msgid "The left-hand side of this form of <token>ALL</token> is a row constructor, as described in <xref linkend=\"sql-syntax-row-constructors\"/>. The right-hand side is a parenthesized subquery, which must return exactly as many columns as there are expressions in the left-hand row. The left-hand expressions are evaluated and compared row-wise to each row of the subquery result, using the given <replaceable>operator</replaceable>. The result of <token>ALL</token> is <quote>true</quote> if the comparison returns true for all subquery rows (including the case where the subquery returns no rows). The result is <quote>false</quote> if the comparison returns false for any subquery row. The result is NULL if the comparison does not return false for any subquery row, and it returns NULL for at least one row."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11781(title) /tmp/cicero-BGQN/func.xml:12004(title) 
msgid "Row-wise Comparison"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11785(secondary) 
msgid "subquery result row"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11788(synopsis) 
#, no-wrap
msgid "\n<placeholder-1/> <placeholder-2/> (<placeholder-3/>)\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11792(para) 
msgid "The left-hand side is a row constructor, as described in <xref linkend=\"sql-syntax-row-constructors\"/>. The right-hand side is a parenthesized subquery, which must return exactly as many columns as there are expressions in the left-hand row. Furthermore, the subquery cannot return more than one row. (If it returns zero rows, the result is taken to be null.) The left-hand side is evaluated and compared row-wise to the single subquery result row."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11811(title) 
msgid "Row and Array Comparisons"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11834(primary) 
msgid "row-wise comparison"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11839(secondary) 
msgid "row-wise"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11843(primary) 
msgid "IS DISTINCT FROM"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11847(primary) 
msgid "IS NOT DISTINCT FROM"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11850(para) 
msgid "This section describes several specialized constructs for making multiple comparisons between groups of values. These forms are syntactically related to the subquery forms of the previous section, but do not involve subqueries. The forms involving array subexpressions are <productname>PostgreSQL</productname> extensions; the rest are <acronym>SQL</acronym>-compliant. All of the expression forms documented in this section return Boolean (true/false) results."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11865(synopsis) 
#, no-wrap
msgid "\n<placeholder-1/> IN (<placeholder-2/> <placeholder-3/>)\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11869(para) 
msgid "The right-hand side is a parenthesized list of scalar expressions. The result is <quote>true</quote> if the left-hand expression's result is equal to any of the right-hand expressions. This is a shorthand notation for <synopsis>\n<replaceable>expression</replaceable> = <replaceable>value1</replaceable>\nOR\n<replaceable>expression</replaceable> = <replaceable>value2</replaceable>\nOR\n...\n</synopsis>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11884(para) 
msgid "Note that if the left-hand expression yields null, or if there are no equal right-hand values and at least one right-hand expression yields null, the result of the <token>IN</token> construct will be null, not false. This is in accordance with SQL's normal rules for Boolean combinations of null values."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11896(synopsis) 
#, no-wrap
msgid "\n<placeholder-1/> NOT IN (<placeholder-2/> <placeholder-3/>)\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11900(para) 
msgid "The right-hand side is a parenthesized list of scalar expressions. The result is <quote>true</quote> if the left-hand expression's result is unequal to all of the right-hand expressions. This is a shorthand notation for <synopsis>\n<replaceable>expression</replaceable> &lt;&gt; <replaceable>value1</replaceable>\nAND\n<replaceable>expression</replaceable> &lt;&gt; <replaceable>value2</replaceable>\nAND\n...\n</synopsis>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11915(para) 
msgid "Note that if the left-hand expression yields null, or if there are no equal right-hand values and at least one right-hand expression yields null, the result of the <token>NOT IN</token> construct will be null, not true as one might naively expect. This is in accordance with SQL's normal rules for Boolean combinations of null values."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11925(para) 
msgid "<literal>x NOT IN y</literal> is equivalent to <literal>NOT (x IN y)</literal> in all cases. However, null values are much more likely to trip up the novice when working with <token>NOT IN</token> than when working with <token>IN</token>. It is best to express your condition positively if possible."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11935(title) 
msgid "<literal>ANY</literal>/<literal>SOME</literal> (array)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11938(replaceable) /tmp/cicero-BGQN/func.xml:11939(replaceable) /tmp/cicero-BGQN/func.xml:11975(replaceable) 
msgid "array expression"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11942(para) 
msgid "The right-hand side is a parenthesized expression, which must yield an array value. The left-hand expression is evaluated and compared to each element of the array using the given <replaceable>operator</replaceable>, which must yield a Boolean result. The result of <token>ANY</token> is <quote>true</quote> if any true result is obtained. The result is <quote>false</quote> if no true result is found (including the case where the array has zero elements)."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11954(para) 
msgid "If the array expression yields a null array, the result of <token>ANY</token> will be null. If the left-hand expression yields null, the result of <token>ANY</token> is ordinarily null (though a non-strict comparison operator could possibly yield a different result). Also, if the right-hand array contains any null elements and no true comparison result is obtained, the result of <token>ANY</token> will be null, not false (again, assuming a strict comparison operator). This is in accordance with SQL's normal rules for Boolean combinations of null values."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11966(para) 
msgid "<token>SOME</token> is a synonym for <token>ANY</token>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11972(title) 
msgid "<literal>ALL</literal> (array)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11978(para) 
msgid "The right-hand side is a parenthesized expression, which must yield an array value. The left-hand expression is evaluated and compared to each element of the array using the given <replaceable>operator</replaceable>, which must yield a Boolean result. The result of <token>ALL</token> is <quote>true</quote> if all comparisons yield true (including the case where the array has zero elements). The result is <quote>false</quote> if any false result is found."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:11990(para) 
msgid "If the array expression yields a null array, the result of <token>ALL</token> will be null. If the left-hand expression yields null, the result of <token>ALL</token> is ordinarily null (though a non-strict comparison operator could possibly yield a different result). Also, if the right-hand array contains any null elements and no false comparison result is obtained, the result of <token>ALL</token> will be null, not true (again, assuming a strict comparison operator). This is in accordance with SQL's normal rules for Boolean combinations of null values."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12010(para) 
msgid "Each side is a row constructor, as described in <xref linkend=\"sql-syntax-row-constructors\"/>. The two row values must have the same number of fields. Each side is evaluated and they are compared row-wise. Row comparisons are allowed when the <replaceable>operator</replaceable> is <literal>=</literal>, <literal>&lt;&gt;</literal>, <literal>&lt;</literal>, <literal>&lt;=</literal>, <literal>&gt;</literal> or <literal>&gt;=</literal>, or has semantics similar to one of these. (To be specific, an operator can be a row comparison operator if it is a member of a B-tree operator class, or is the negator of the <literal>=</literal> member of a B-tree operator class.)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12028(para) 
msgid "The <literal>=</literal> and <literal>&lt;&gt;</literal> cases work slightly differently from the others. Two rows are considered equal if all their corresponding members are non-null and equal; the rows are unequal if any corresponding members are non-null and unequal; otherwise the result of the row comparison is unknown (null)."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12036(para) 
msgid "For the <literal>&lt;</literal>, <literal>&lt;=</literal>, <literal>&gt;</literal> and <literal>&gt;=</literal> cases, the row elements are compared left-to-right, stopping as soon as an unequal or null pair of elements is found. If either of this pair of elements is null, the result of the row comparison is unknown (null); otherwise comparison of this pair of elements determines the result. For example, <literal>ROW(1,2,NULL) &lt; ROW(1,3,0)</literal> yields true, not null, because the third pair of elements are not considered."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12049(para) 
msgid "Prior to <productname>PostgreSQL</productname> 8.2, the <literal>&lt;</literal>, <literal>&lt;=</literal>, <literal>&gt;</literal> and <literal>&gt;=</literal> cases were not handled per SQL specification. A comparison like <literal>ROW(a,b) &lt; ROW(c,d)</literal> was implemented as <literal>a &lt; c AND b &lt; d</literal> whereas the correct behavior is equivalent to <literal>a &lt; c OR (a = c AND b &lt; d)</literal>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12061(synopsis) 
#, no-wrap
msgid "\n<placeholder-1/> IS DISTINCT FROM <placeholder-2/>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12065(para) 
msgid "This construct is similar to a <literal>&lt;&gt;</literal> row comparison, but it does not yield null for null inputs. Instead, any null value is considered unequal to (distinct from) any non-null value, and any two nulls are considered equal (not distinct). Thus the result will either be true or false, never null."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12073(synopsis) 
#, no-wrap
msgid "\n<placeholder-1/> IS NOT DISTINCT FROM <placeholder-2/>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12077(para) 
msgid "This construct is similar to a <literal>=</literal> row comparison, but it does not yield null for null inputs. Instead, any null value is considered unequal to (distinct from) any non-null value, and any two nulls are considered equal (not distinct). Thus the result will always be either true or false, never null."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12086(para) 
msgid "The SQL specification requires row-wise comparison to return NULL if the result depends on comparing two NULL values or a NULL and a non-NULL. <productname>PostgreSQL</productname> does this only when comparing the results of two row constructors or comparing a row constructor to the output of a subquery (as in <xref linkend=\"functions-subquery\"/>). In other contexts where two composite-type values are compared, two NULL field values are considered equal, and a NULL is considered larger than a non-NULL. This is necessary in order to have consistent sorting and indexing behavior for composite types."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12103(title) 
msgid "Set Returning Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12106(primary) 
msgid "set returning functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12111(primary) 
msgid "generate_series"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12114(para) 
msgid "This section describes functions that possibly return more than one row. Currently the only functions in this class are series generating functions, as detailed in <xref linkend=\"functions-srf-series\"/> and <xref linkend=\"functions-srf-subscripts\"/>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12122(title) 
msgid "Series Generating Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12135(parameter) /tmp/cicero-BGQN/func.xml:12139(parameter) /tmp/cicero-BGQN/func.xml:12145(parameter) /tmp/cicero-BGQN/func.xml:12149(parameter) /tmp/cicero-BGQN/func.xml:12155(parameter) /tmp/cicero-BGQN/func.xml:12159(parameter) 
msgid "start"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12135(parameter) /tmp/cicero-BGQN/func.xml:12139(parameter) /tmp/cicero-BGQN/func.xml:12145(parameter) /tmp/cicero-BGQN/func.xml:12149(parameter) /tmp/cicero-BGQN/func.xml:12155(parameter) /tmp/cicero-BGQN/func.xml:12159(parameter) 
msgid "stop"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12135(function) 
msgid "generate_series(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12137(type) /tmp/cicero-BGQN/func.xml:12147(type) /tmp/cicero-BGQN/func.xml:12237(type) /tmp/cicero-BGQN/func.xml:12245(type) 
msgid "setof int"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12137(type) /tmp/cicero-BGQN/func.xml:12147(type) /tmp/cicero-BGQN/func.xml:13683(type) 
msgid "setof bigint"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12137(entry) /tmp/cicero-BGQN/func.xml:12147(entry) /tmp/cicero-BGQN/func.xml:12157(entry) 
msgid "<placeholder-1/> or <placeholder-2/> (same as argument type)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12138(entry) 
msgid "Generate a series of values, from <placeholder-1/> to <placeholder-2/> with a step size of one"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12145(parameter) /tmp/cicero-BGQN/func.xml:12150(parameter) /tmp/cicero-BGQN/func.xml:12155(parameter) /tmp/cicero-BGQN/func.xml:12160(parameter) 
msgid "step"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12145(function) 
msgid "generate_series(<placeholder-1/>, <placeholder-2/>, <placeholder-3/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12148(entry) /tmp/cicero-BGQN/func.xml:12158(entry) 
msgid "Generate a series of values, from <placeholder-1/> to <placeholder-2/> with a step size of <placeholder-3/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12155(function) 
msgid "generate_series(<placeholder-1/>, <placeholder-2/>, <placeholder-3/><placeholder-4/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12157(type) 
msgid "setof timestamp"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12157(type) 
msgid "setof timestamp with time zone"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12175(programlisting) 
#, no-wrap
msgid "\nSELECT * FROM generate_series(2,4);\n generate_series\n-----------------\n               2\n               3\n               4\n(3 rows)\n\nSELECT * FROM generate_series(5,1,-2);\n generate_series\n-----------------\n               5\n               3\n               1\n(3 rows)\n\nSELECT * FROM generate_series(4,3);\n generate_series\n-----------------\n(0 rows)\n\n-- this example relies on the date-plus-integer operator\nSELECT current_date + s.a AS dates FROM generate_series(0,14,7) AS s(a);\n   dates\n------------\n 2004-02-05\n 2004-02-12\n 2004-02-19\n(3 rows)\n\nSELECT * FROM generate_series('2008-03-01 00:00'::timestamp,\n                              '2008-03-04 12:00', '10 hours');\n   generate_series   \n---------------------\n 2008-03-01 00:00:00\n 2008-03-01 10:00:00\n 2008-03-01 20:00:00\n 2008-03-02 06:00:00\n 2008-03-02 16:00:00\n 2008-03-03 02:00:00\n 2008-03-03 12:00:00\n 2008-03-03 22:00:00\n 2008-03-04 08:00:00\n(9 rows)\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12168(para) 
msgid "When <parameter>step</parameter> is positive, zero rows are returned if <parameter>start</parameter> is greater than <parameter>stop</parameter>. Conversely, when <parameter>step</parameter> is negative, zero rows are returned if <parameter>start</parameter> is less than <parameter>stop</parameter>. Zero rows are also returned for <literal>NULL</literal> inputs. It is an error for <parameter>step</parameter> to be zero. Some examples follow: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12224(title) 
msgid "Subscript Generating Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12236(parameter) /tmp/cicero-BGQN/func.xml:12244(parameter) 
msgid "array anyarray"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12236(parameter) /tmp/cicero-BGQN/func.xml:12244(parameter) 
msgid "dim int"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12236(function) 
msgid "generate_subscripts(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12238(entry) 
msgid "Generate a series comprising the given array's subscripts."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12244(parameter) 
msgid "reverse boolean"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12244(function) 
msgid "generate_subscripts(<placeholder-1/>, <placeholder-2/>, <placeholder-3/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12246(entry) 
msgid "Generate a series comprising the given array's subscripts. When <placeholder-1/> is true, the series is returned in reverse order."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12258(primary) 
msgid "generate_subscripts"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12268(programlisting) 
#, no-wrap
msgid "\n-- basic usage\nSELECT generate_subscripts('{NULL,1,NULL,2}'::int[], 1) AS s;\n s \n---\n 1\n 2\n 3\n 4\n(4 rows)\n\n-- presenting an array, the subscript and the subscripted\n-- value requires a subquery\nSELECT * FROM arrays;\n         a          \n--------------------\n {-1,-2}\n {100,200,300}\n(2 rows)\n\nSELECT a AS array, s AS subscript, a[s] AS value\nFROM (SELECT generate_subscripts(a, 1) AS s, a FROM arrays) foo;\n     array     | subscript | value\n---------------+-----------+-------\n {-1,-2}       |         1 |    -1\n {-1,-2}       |         2 |    -2\n {100,200,300} |         1 |   100\n {100,200,300} |         2 |   200\n {100,200,300} |         3 |   300\n(5 rows)\n\n-- unnest a 2D array\nCREATE OR REPLACE FUNCTION unnest2(anyarray)\nRETURNS SETOF anyelement AS $$\nselect $1[i][j]\n   from generate_subscripts($1,1) g1(i),\n        generate_subscripts($1,2) g2(j);\n$$ LANGUAGE sql IMMUTABLE;\nCREATE FUNCTION\npostgres=# SELECT * FROM unnest2(ARRAY[[1,2],[3,4]]);\n unnest2 \n---------\n       1\n       2\n       3\n       4\n(4 rows)\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12261(para) 
msgid "<function>generate_subscripts</function> is a convenience function that generates the set of valid subscripts for the specified dimension of the given array. Zero rows are returned for arrays that do not have the requested dimension, or for NULL arrays (but valid subscripts are returned for NULL array elements). Some examples follow: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12321(title) 
msgid "System Information Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12323(para) 
msgid "<xref linkend=\"functions-info-session-table\"/> shows several functions that extract session and system information."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12328(para) 
msgid "In addition to the functions listed in this section, there are a number of functions related to the statistics system that also provide system information. See <xref linkend=\"monitoring-stats-views\"/> for more information."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12336(title) 
msgid "Session Information Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12339(entry) /tmp/cicero-BGQN/func.xml:12664(entry) /tmp/cicero-BGQN/func.xml:13071(entry) /tmp/cicero-BGQN/func.xml:13284(entry) /tmp/cicero-BGQN/func.xml:13577(entry) /tmp/cicero-BGQN/func.xml:13667(entry) /tmp/cicero-BGQN/func.xml:13721(entry) /tmp/cicero-BGQN/func.xml:13783(entry) /tmp/cicero-BGQN/func.xml:13890(entry) /tmp/cicero-BGQN/func.xml:13995(entry) /tmp/cicero-BGQN/func.xml:14177(entry) /tmp/cicero-BGQN/func.xml:14257(entry) /tmp/cicero-BGQN/func.xml:14339(entry) /tmp/cicero-BGQN/func.xml:14517(entry) /tmp/cicero-BGQN/func.xml:14577(entry) /tmp/cicero-BGQN/func.xml:14676(entry) 
msgid "Name"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12344(function) /tmp/cicero-BGQN/func.xml:12476(primary) 
msgid "current_catalog"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12346(quote) 
msgid "catalog"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12346(entry) 
msgid "name of current database (called <placeholder-1/> in the SQL standard)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12350(function) 
msgid "current_database()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12352(entry) 
msgid "name of current database"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12356(function) 
msgid "current_query()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12358(entry) 
msgid "text of the currently executing query, as submitted by the client (might contain more than one statement)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12363(function) /tmp/cicero-BGQN/func.xml:12488(primary) 
msgid "current_schema"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12363(literal) 
msgid "<placeholder-1/>[()]"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12365(entry) 
msgid "name of current schema"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12369(function) 
msgid "current_schemas(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12370(type) 
msgid "name[]"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12371(entry) 
msgid "names of schemas in search path, optionally including implicit schemas"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12375(function) /tmp/cicero-BGQN/func.xml:12452(function) /tmp/cicero-BGQN/func.xml:12496(primary) 
msgid "current_user"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12377(entry) 
msgid "user name of current execution context"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12381(function) 
msgid "inet_client_addr()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12383(entry) 
msgid "address of the remote connection"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12387(function) 
msgid "inet_client_port()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12389(entry) 
msgid "port of the remote connection"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12393(function) 
msgid "inet_server_addr()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12395(entry) 
msgid "address of the local connection"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12399(function) 
msgid "inet_server_port()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12401(entry) 
msgid "port of the local connection"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12406(function) 
msgid "pg_backend_pid()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12408(entry) 
msgid "Process ID of the server process attached to the current session"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12414(function) 
msgid "pg_conf_load_time()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12416(entry) 
msgid "configuration load time"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12420(function) 
msgid "pg_is_other_temp_schema(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12422(entry) 
msgid "is schema another session's temporary schema?"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12426(function) 
msgid "pg_listening_channels()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12428(entry) 
msgid "channel names that the session is currently listening on"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12432(function) 
msgid "pg_my_temp_schema()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12434(entry) 
msgid "OID of session's temporary schema, or 0 if none"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12438(function) 
msgid "pg_postmaster_start_time()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12440(entry) 
msgid "server start time"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12444(function) /tmp/cicero-BGQN/func.xml:12514(primary) 
msgid "session_user"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12446(entry) 
msgid "session user name"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12450(function) /tmp/cicero-BGQN/func.xml:12518(primary) /tmp/cicero-BGQN/func.xml:12523(primary) /tmp/cicero-BGQN/func.xml:12669(parameter) /tmp/cicero-BGQN/func.xml:12684(parameter) /tmp/cicero-BGQN/func.xml:12701(parameter) /tmp/cicero-BGQN/func.xml:12716(parameter) /tmp/cicero-BGQN/func.xml:12731(parameter) /tmp/cicero-BGQN/func.xml:12746(parameter) /tmp/cicero-BGQN/func.xml:12761(parameter) /tmp/cicero-BGQN/func.xml:12776(parameter) /tmp/cicero-BGQN/func.xml:12791(parameter) /tmp/cicero-BGQN/func.xml:12806(parameter) /tmp/cicero-BGQN/func.xml:12821(parameter) /tmp/cicero-BGQN/func.xml:12836(parameter) 
msgid "user"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12456(function) 
msgid "version()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12458(entry) 
msgid "<placeholder-1/> version information"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12465(para) 
msgid "<function>current_catalog</function>, <function>current_schema</function>, <function>current_user</function>, <function>session_user</function>, and <function>user</function> have special syntactic status in <acronym>SQL</acronym>: they must be called without trailing parentheses. (In PostgreSQL, parentheses can optionally be used with <function>current_schema</function>, but not with the others.)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12480(primary) 
msgid "current_database"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12484(primary) 
msgid "current_query"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12492(primary) 
msgid "current_schemas"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12500(primary) 
msgid "pg_backend_pid"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12504(primary) /tmp/cicero-BGQN/func.xml:12762(parameter) /tmp/cicero-BGQN/func.xml:12769(parameter) 
msgid "schema"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12509(primary) 
msgid "search path"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12526(para) 
msgid "The <function>session_user</function> is normally the user who initiated the current database connection; but superusers can change this setting with <xref linkend=\"sql-set-session-authorization\"/>. The <function>current_user</function> is the user identifier that is applicable for permission checking. Normally it is equal to the session user, but it can be changed with <xref linkend=\"sql-set-role\"/>. It also changes during the execution of functions with the attribute <literal>SECURITY DEFINER</literal>. In Unix parlance, the session user is the <quote>real user</quote> and the current user is the <quote>effective user</quote>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12540(para) 
msgid "<function>current_schema</function> returns the name of the schema that is first in the search path (or a null value if the search path is empty). This is the schema that will be used for any tables or other named objects that are created without specifying a target schema. <function>current_schemas(boolean)</function> returns an array of the names of all schemas presently in the search path. The Boolean option determines whether or not implicitly included system schemas such as <literal>pg_catalog</literal> are included in the returned search path."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12554(programlisting) 
#, no-wrap
msgid "\nSET search_path TO <replaceable>schema</replaceable> <optional>, <replaceable>schema</replaceable>, ...</optional>\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12552(para) 
msgid "The search path can be altered at run time. The command is: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12561(primary) 
msgid "pg_listening_channels"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12564(para) 
msgid "<function>pg_listening_channels</function> returns a set of names of channels that the current session is listening to. See <xref linkend=\"sql-listen\"/> for more information."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12571(primary) 
msgid "inet_client_addr"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12575(primary) 
msgid "inet_client_port"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12579(primary) 
msgid "inet_server_addr"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12583(primary) 
msgid "inet_server_port"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12586(para) 
msgid "<function>inet_client_addr</function> returns the IP address of the current client, and <function>inet_client_port</function> returns the port number. <function>inet_server_addr</function> returns the IP address on which the server accepted the current connection, and <function>inet_server_port</function> returns the port number. All these functions return NULL if the current connection is via a Unix-domain socket."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12598(primary) 
msgid "pg_my_temp_schema"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12602(primary) 
msgid "pg_is_other_temp_schema"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12605(para) 
msgid "<function>pg_my_temp_schema</function> returns the OID of the current session's temporary schema, or zero if it has none (because it has not created any temporary tables). <function>pg_is_other_temp_schema</function> returns true if the given OID is the OID of another session's temporary schema. (This can be useful, for example, to exclude other sessions' temporary tables from a catalog display.)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12616(primary) 
msgid "pg_postmaster_start_time"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12619(para) 
msgid "<function>pg_postmaster_start_time</function> returns the <type>timestamp with time zone</type> when the server started."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12626(primary) 
msgid "pg_conf_load_time"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12629(para) 
msgid "<function>pg_conf_load_time</function> returns the <type>timestamp with time zone</type> when the server configuration files were last loaded. (If the current session was alive at the time, this will be the time when the session itself re-read the configuration files, so the reading will vary a little in different sessions. Otherwise it is the time when the postmaster process re-read the configuration files.)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12640(primary) 
msgid "version"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12643(para) 
msgid "<function>version</function> returns a string describing the <productname>PostgreSQL</productname> server's version."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12649(primary) /tmp/cicero-BGQN/func.xml:12671(parameter) /tmp/cicero-BGQN/func.xml:12678(parameter) /tmp/cicero-BGQN/func.xml:12687(parameter) /tmp/cicero-BGQN/func.xml:12695(parameter) /tmp/cicero-BGQN/func.xml:12703(parameter) /tmp/cicero-BGQN/func.xml:12710(parameter) /tmp/cicero-BGQN/func.xml:12718(parameter) /tmp/cicero-BGQN/func.xml:12725(parameter) /tmp/cicero-BGQN/func.xml:12733(parameter) /tmp/cicero-BGQN/func.xml:12740(parameter) /tmp/cicero-BGQN/func.xml:12748(parameter) /tmp/cicero-BGQN/func.xml:12755(parameter) /tmp/cicero-BGQN/func.xml:12763(parameter) /tmp/cicero-BGQN/func.xml:12770(parameter) /tmp/cicero-BGQN/func.xml:12778(parameter) /tmp/cicero-BGQN/func.xml:12785(parameter) /tmp/cicero-BGQN/func.xml:12793(parameter) /tmp/cicero-BGQN/func.xml:12800(parameter) /tmp/cicero-BGQN/func.xml:12808(parameter) /tmp/cicero-BGQN/func.xml:12815(parameter) /tmp/cicero-BGQN/func.xml:12823(parameter) /tmp/cicero-BGQN/func.xml:12830(parameter) /tmp/cicero-BGQN/func.xml:12838(parameter) /tmp/cicero-BGQN/func.xml:12845(parameter) 
msgid "privilege"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12650(secondary) 
msgid "querying"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12653(para) 
msgid "<xref linkend=\"functions-info-access-table\"/> lists functions that allow the user to query object access privileges programmatically. See <xref linkend=\"ddl-priv\"/> for more information about privileges."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12661(title) 
msgid "Access Privilege Inquiry Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12669(function) /tmp/cicero-BGQN/func.xml:12677(function) /tmp/cicero-BGQN/func.xml:12855(primary) 
msgid "has_any_column_privilege"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12670(parameter) /tmp/cicero-BGQN/func.xml:12677(parameter) /tmp/cicero-BGQN/func.xml:12685(parameter) /tmp/cicero-BGQN/func.xml:12693(parameter) /tmp/cicero-BGQN/func.xml:12807(parameter) /tmp/cicero-BGQN/func.xml:12814(parameter) 
msgid "table"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12674(entry) 
msgid "does user have privilege for any column of table"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12681(entry) 
msgid "does current user have privilege for any column of table"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12684(function) /tmp/cicero-BGQN/func.xml:12693(function) /tmp/cicero-BGQN/func.xml:12858(primary) 
msgid "has_column_privilege"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12686(parameter) /tmp/cicero-BGQN/func.xml:12694(parameter) 
msgid "column"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12684(literal) 
msgid "<placeholder-1/>(<placeholder-2/>, <placeholder-3/>, <placeholder-4/>, <placeholder-5/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12690(entry) 
msgid "does user have privilege for column"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12698(entry) 
msgid "does current user have privilege for column"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12701(function) /tmp/cicero-BGQN/func.xml:12709(function) /tmp/cicero-BGQN/func.xml:12861(primary) 
msgid "has_database_privilege"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12702(parameter) /tmp/cicero-BGQN/func.xml:12709(parameter) 
msgid "database"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12706(entry) 
msgid "does user have privilege for database"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12713(entry) 
msgid "does current user have privilege for database"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12716(function) /tmp/cicero-BGQN/func.xml:12724(function) /tmp/cicero-BGQN/func.xml:12867(primary) 
msgid "has_foreign_data_wrapper_privilege"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12717(parameter) /tmp/cicero-BGQN/func.xml:12724(parameter) 
msgid "fdw"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12721(entry) 
msgid "does user have privilege for foreign-data wrapper"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12728(entry) 
msgid "does current user have privilege for foreign-data wrapper"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12731(function) /tmp/cicero-BGQN/func.xml:12739(function) /tmp/cicero-BGQN/func.xml:12864(primary) 
msgid "has_function_privilege"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12736(entry) 
msgid "does user have privilege for function"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12743(entry) 
msgid "does current user have privilege for function"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12746(function) /tmp/cicero-BGQN/func.xml:12754(function) /tmp/cicero-BGQN/func.xml:12870(primary) 
msgid "has_language_privilege"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12747(parameter) /tmp/cicero-BGQN/func.xml:12754(parameter) 
msgid "language"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12751(entry) 
msgid "does user have privilege for language"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12758(entry) 
msgid "does current user have privilege for language"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12761(function) /tmp/cicero-BGQN/func.xml:12769(function) /tmp/cicero-BGQN/func.xml:12873(primary) 
msgid "has_schema_privilege"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12766(entry) 
msgid "does user have privilege for schema"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12773(entry) 
msgid "does current user have privilege for schema"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12776(function) /tmp/cicero-BGQN/func.xml:12784(function) /tmp/cicero-BGQN/func.xml:12879(primary) 
msgid "has_sequence_privilege"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12781(entry) 
msgid "does user have privilege for sequence"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12788(entry) 
msgid "does current user have privilege for sequence"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12791(function) /tmp/cicero-BGQN/func.xml:12799(function) /tmp/cicero-BGQN/func.xml:12876(primary) 
msgid "has_server_privilege"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12792(parameter) /tmp/cicero-BGQN/func.xml:12799(parameter) 
msgid "server"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12796(entry) 
msgid "does user have privilege for foreign server"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12803(entry) 
msgid "does current user have privilege for foreign server"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12806(function) /tmp/cicero-BGQN/func.xml:12814(function) /tmp/cicero-BGQN/func.xml:12882(primary) 
msgid "has_table_privilege"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12811(entry) 
msgid "does user have privilege for table"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12818(entry) 
msgid "does current user have privilege for table"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12821(function) /tmp/cicero-BGQN/func.xml:12829(function) /tmp/cicero-BGQN/func.xml:12885(primary) 
msgid "has_tablespace_privilege"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12822(parameter) /tmp/cicero-BGQN/func.xml:12829(parameter) 
msgid "tablespace"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12826(entry) 
msgid "does user have privilege for tablespace"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12833(entry) 
msgid "does current user have privilege for tablespace"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12836(function) /tmp/cicero-BGQN/func.xml:12844(function) /tmp/cicero-BGQN/func.xml:12888(primary) 
msgid "pg_has_role"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12837(parameter) /tmp/cicero-BGQN/func.xml:12844(parameter) 
msgid "role"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12841(entry) 
msgid "does user have privilege for role"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12848(entry) 
msgid "does current user have privilege for role"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12914(programlisting) 
#, no-wrap
msgid "\nSELECT has_table_privilege('myschema.mytable', 'select');\nSELECT has_table_privilege('joe', 'mytable', 'INSERT, SELECT WITH GRANT OPTION');\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12891(para) 
msgid "<function>has_table_privilege</function> checks whether a user can access a table in a particular way. The user can be specified by name, by OID (<literal>pg_authid.oid</literal>), <literal>public</literal> to indicate the PUBLIC pseudo-role, or if the argument is omitted <function>current_user</function> is assumed. The table can be specified by name or by OID. (Thus, there are actually six variants of <function>has_table_privilege</function>, which can be distinguished by the number and types of their arguments.) When specifying by name, the name can be schema-qualified if necessary. The desired access privilege type is specified by a text string, which must evaluate to one of the values <literal>SELECT</literal>, <literal>INSERT</literal>, <literal>UPDATE</literal>, <literal>DELETE</literal>, <literal>TRUNCATE</literal>, <literal>REFERENCES</literal>, or <literal>TRIGGER</literal>. Optionally, <literal>WITH GRANT OPTION</literal> can be added to a privilege type to test whether the privilege is held with grant option. Also, multiple privilege types can be listed separated by commas, in which case the result will be <literal>true</literal> if any of the listed privileges is held. (Case of the privilege string is not significant, and extra whitespace is allowed between but not within privilege names.) Some examples: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12920(para) 
msgid "<function>has_sequence_privilege</function> checks whether a user can access a sequence in a particular way. The possibilities for its arguments are analogous to <function>has_table_privilege</function>. The desired access privilege type must evaluate to one of <literal>USAGE</literal>, <literal>SELECT</literal>, or <literal>UPDATE</literal>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12930(para) 
msgid "<function>has_any_column_privilege</function> checks whether a user can access any column of a table in a particular way. Its argument possibilities are analogous to <function>has_table_privilege</function>, except that the desired access privilege type must evaluate to some combination of <literal>SELECT</literal>, <literal>INSERT</literal>, <literal>UPDATE</literal>, or <literal>REFERENCES</literal>. Note that having any of these privileges at the table level implicitly grants it for each column of the table, so <function>has_any_column_privilege</function> will always return <literal>true</literal> if <function>has_table_privilege</function> does for the same arguments. But <function>has_any_column_privilege</function> also succeeds if there is a column-level grant of the privilege for at least one column."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12948(para) 
msgid "<function>has_column_privilege</function> checks whether a user can access a column in a particular way. Its argument possibilities are analogous to <function>has_table_privilege</function>, with the addition that the column can be specified either by name or attribute number. The desired access privilege type must evaluate to some combination of <literal>SELECT</literal>, <literal>INSERT</literal>, <literal>UPDATE</literal>, or <literal>REFERENCES</literal>. Note that having any of these privileges at the table level implicitly grants it for each column of the table."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12963(para) 
msgid "<function>has_database_privilege</function> checks whether a user can access a database in a particular way. Its argument possibilities are analogous to <function>has_table_privilege</function>. The desired access privilege type must evaluate to some combination of <literal>CREATE</literal>, <literal>CONNECT</literal>, <literal>TEMPORARY</literal>, or <literal>TEMP</literal> (which is equivalent to <literal>TEMPORARY</literal>)."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12987(programlisting) 
#, no-wrap
msgid "\nSELECT has_function_privilege('joeuser', 'myfunc(int, text)', 'execute');\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12976(para) 
msgid "<function>has_function_privilege</function> checks whether a user can access a function in a particular way. Its argument possibilities are analogous to <function>has_table_privilege</function>. When specifying a function by a text string rather than by OID, the allowed input is the same as for the <type>regprocedure</type> data type (see <xref linkend=\"datatype-oid\"/>). The desired access privilege type must evaluate to <literal>EXECUTE</literal>. An example is: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:12992(para) 
msgid "<function>has_foreign_data_wrapper_privilege</function> checks whether a user can access a foreign-data wrapper in a particular way. Its argument possibilities are analogous to <function>has_table_privilege</function>. The desired access privilege type must evaluate to <literal>USAGE</literal>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13001(para) 
msgid "<function>has_language_privilege</function> checks whether a user can access a procedural language in a particular way. Its argument possibilities are analogous to <function>has_table_privilege</function>. The desired access privilege type must evaluate to <literal>USAGE</literal>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13010(para) 
msgid "<function>has_schema_privilege</function> checks whether a user can access a schema in a particular way. Its argument possibilities are analogous to <function>has_table_privilege</function>. The desired access privilege type must evaluate to some combination of <literal>CREATE</literal> or <literal>USAGE</literal>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13020(para) 
msgid "<function>has_server_privilege</function> checks whether a user can access a foreign server in a particular way. Its argument possibilities are analogous to <function>has_table_privilege</function>. The desired access privilege type must evaluate to <literal>USAGE</literal>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13029(para) 
msgid "<function>has_tablespace_privilege</function> checks whether a user can access a tablespace in a particular way. Its argument possibilities are analogous to <function>has_table_privilege</function>. The desired access privilege type must evaluate to <literal>CREATE</literal>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13038(para) 
msgid "<function>pg_has_role</function> checks whether a user can access a role in a particular way. Its argument possibilities are analogous to <function>has_table_privilege</function>, except that <literal>public</literal> is not allowed as a user name. The desired access privilege type must evaluate to some combination of <literal>MEMBER</literal> or <literal>USAGE</literal>. <literal>MEMBER</literal> denotes direct or indirect membership in the role (that is, the right to do <command>SET ROLE</command>), while <literal>USAGE</literal> denotes whether the privileges of the role are immediately available without doing <command>SET ROLE</command>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13062(programlisting) 
#, no-wrap
msgid "\nSELECT relname FROM pg_class WHERE pg_table_is_visible(oid);\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13053(para) 
msgid "<xref linkend=\"functions-info-schema-table\"/> shows functions that determine whether a certain object is <firstterm>visible</firstterm> in the current schema search path. For example, a table is said to be visible if its containing schema is in the search path and no table of the same name appears earlier in the search path. This is equivalent to the statement that the table can be referenced by name without explicit schema qualification. To list the names of all visible tables: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13068(title) 
msgid "Schema Visibility Inquiry Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13076(parameter) 
msgid "collation_oid"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13076(function) 
msgid "pg_collation_is_visible(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13079(entry) 
msgid "is collation visible in search path"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13082(parameter) 
msgid "conversion_oid"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13082(function) 
msgid "pg_conversion_is_visible(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13085(entry) 
msgid "is conversion visible in search path"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13088(parameter) 
msgid "function_oid"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13088(function) 
msgid "pg_function_is_visible(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13091(entry) 
msgid "is function visible in search path"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13094(parameter) 
msgid "opclass_oid"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13094(function) 
msgid "pg_opclass_is_visible(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13097(entry) 
msgid "is operator class visible in search path"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13100(parameter) 
msgid "operator_oid"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13100(function) 
msgid "pg_operator_is_visible(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13103(entry) 
msgid "is operator visible in search path"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13106(parameter) /tmp/cicero-BGQN/func.xml:13582(parameter) 
msgid "table_oid"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13106(function) 
msgid "pg_table_is_visible(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13109(entry) 
msgid "is table visible in search path"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13112(parameter) 
msgid "config_oid"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13112(function) 
msgid "pg_ts_config_is_visible(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13115(entry) 
msgid "is text search configuration visible in search path"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13118(parameter) 
msgid "dict_oid"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13118(function) 
msgid "pg_ts_dict_is_visible(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13121(entry) 
msgid "is text search dictionary visible in search path"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13124(function) 
msgid "pg_ts_parser_is_visible(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13127(entry) 
msgid "is text search parser visible in search path"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13130(parameter) 
msgid "template_oid"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13130(function) 
msgid "pg_ts_template_is_visible(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13133(entry) 
msgid "is text search template visible in search path"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13136(parameter) /tmp/cicero-BGQN/func.xml:13289(parameter) 
msgid "type_oid"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13136(function) 
msgid "pg_type_is_visible(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13139(entry) 
msgid "is type (or domain) visible in search path"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13146(primary) 
msgid "pg_collation_is_visible"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13149(primary) 
msgid "pg_conversion_is_visible"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13152(primary) 
msgid "pg_function_is_visible"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13155(primary) 
msgid "pg_opclass_is_visible"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13158(primary) 
msgid "pg_operator_is_visible"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13161(primary) 
msgid "pg_table_is_visible"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13164(primary) 
msgid "pg_ts_config_is_visible"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13167(primary) 
msgid "pg_ts_dict_is_visible"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13170(primary) 
msgid "pg_ts_parser_is_visible"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13173(primary) 
msgid "pg_ts_template_is_visible"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13176(primary) 
msgid "pg_type_is_visible"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13179(para) 
msgid "Each function performs the visibility check for one type of database object. Note that <function>pg_table_is_visible</function> can also be used with views, indexes and sequences; <function>pg_type_is_visible</function> can also be used with domains. For functions and operators, an object in the search path is visible if there is no object of the same name <emphasis>and argument data type(s)</emphasis> earlier in the path. For operator classes, both name and associated index access method are considered."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13196(programlisting) 
#, no-wrap
msgid "\nSELECT pg_type_is_visible('myschema.widget'::regtype);\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13189(para) 
msgid "All these functions require object OIDs to identify the object to be checked. If you want to test an object by name, it is convenient to use the OID alias types (<type>regclass</type>, <type>regtype</type>, <type>regprocedure</type>, <type>regoperator</type>, <type>regconfig</type>, or <type>regdictionary</type>), for example: <placeholder-1/> Note that it would not make much sense to test a non-schema-qualified type name in this way — if the name can be recognized at all, it must be visible."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13204(primary) 
msgid "format_type"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13208(primary) 
msgid "pg_describe_object"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13212(primary) 
msgid "pg_get_constraintdef"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13216(primary) 
msgid "pg_get_expr"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13220(primary) 
msgid "pg_get_functiondef"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13224(primary) 
msgid "pg_get_function_arguments"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13228(primary) 
msgid "pg_get_function_identity_arguments"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13232(primary) 
msgid "pg_get_function_result"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13236(primary) 
msgid "pg_get_indexdef"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13240(primary) 
msgid "pg_get_keywords"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13244(primary) 
msgid "pg_get_ruledef"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13248(primary) 
msgid "pg_get_serial_sequence"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13252(primary) /tmp/cicero-BGQN/func.xml:13374(function) /tmp/cicero-BGQN/func.xml:13379(function) 
msgid "pg_get_triggerdef"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13256(primary) 
msgid "pg_get_userbyid"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13260(primary) 
msgid "pg_get_viewdef"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13264(primary) 
msgid "pg_options_to_table"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13268(primary) 
msgid "pg_tablespace_databases"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13272(primary) 
msgid "pg_typeof"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13275(para) 
msgid "<xref linkend=\"functions-info-catalog-table\"/> lists functions that extract information from the system catalogs."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13281(title) 
msgid "System Catalog Information Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13289(parameter) 
msgid "typemod"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13289(function) 
msgid "format_type(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13291(entry) 
msgid "get SQL name of a data type"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13294(parameter) 
msgid "catalog_id"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13294(parameter) 
msgid "object_id"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13294(parameter) 
msgid "object_sub_id"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13294(function) 
msgid "pg_describe_object(<placeholder-1/>, <placeholder-2/>, <placeholder-3/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13296(entry) 
msgid "get description of a database object"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13299(parameter) /tmp/cicero-BGQN/func.xml:13304(parameter) 
msgid "constraint_oid"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13299(function) 
msgid "pg_get_constraintdef(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13301(entry) /tmp/cicero-BGQN/func.xml:13306(entry) 
msgid "get definition of a constraint"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13304(parameter) /tmp/cicero-BGQN/func.xml:13315(parameter) /tmp/cicero-BGQN/func.xml:13346(parameter) /tmp/cicero-BGQN/func.xml:13363(parameter) /tmp/cicero-BGQN/func.xml:13379(parameter) /tmp/cicero-BGQN/func.xml:13394(parameter) /tmp/cicero-BGQN/func.xml:13404(parameter) 
msgid "pretty_bool"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13304(function) 
msgid "pg_get_constraintdef(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13309(parameter) /tmp/cicero-BGQN/func.xml:13315(parameter) 
msgid "pg_node_tree"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13309(parameter) /tmp/cicero-BGQN/func.xml:13315(parameter) 
msgid "relation_oid"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13309(function) 
msgid "pg_get_expr(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13311(entry) /tmp/cicero-BGQN/func.xml:13317(entry) 
msgid "decompile internal form of an expression, assuming that any Vars in it refer to the relation indicated by the second parameter"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13315(function) 
msgid "pg_get_expr(<placeholder-1/>, <placeholder-2/>, <placeholder-3/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13321(parameter) /tmp/cicero-BGQN/func.xml:13326(parameter) /tmp/cicero-BGQN/func.xml:13331(parameter) /tmp/cicero-BGQN/func.xml:13336(parameter) 
msgid "func_oid"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13321(function) 
msgid "pg_get_functiondef(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13323(entry) 
msgid "get definition of a function"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13326(function) 
msgid "pg_get_function_arguments(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13328(entry) 
msgid "get argument list of function's definition (with default values)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13331(function) 
msgid "pg_get_function_identity_arguments(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13333(entry) 
msgid "get argument list to identify a function (without default values)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13336(function) 
msgid "pg_get_function_result(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13338(literal) 
msgid "RETURNS"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13338(entry) 
msgid "get <placeholder-1/> clause for function"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13341(parameter) /tmp/cicero-BGQN/func.xml:13346(parameter) 
msgid "index_oid"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13341(function) 
msgid "pg_get_indexdef(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13343(command) /tmp/cicero-BGQN/func.xml:13348(command) 
msgid "CREATE INDEX"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13343(entry) 
msgid "get <placeholder-1/> command for index"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13346(parameter) /tmp/cicero-BGQN/func.xml:13350(parameter) 
msgid "column_no"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13346(function) 
msgid "pg_get_indexdef(<placeholder-1/>, <placeholder-2/>, <placeholder-3/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13348(entry) 
msgid "get <placeholder-1/> command for index, or definition of just one index column when <placeholder-2/> is not zero"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13353(function) 
msgid "pg_get_keywords()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13355(entry) 
msgid "get list of SQL keywords and their categories"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13358(parameter) /tmp/cicero-BGQN/func.xml:13363(parameter) 
msgid "rule_oid"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13358(function) 
msgid "pg_get_ruledef(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13360(command) /tmp/cicero-BGQN/func.xml:13365(command) 
msgid "CREATE RULE"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13360(entry) /tmp/cicero-BGQN/func.xml:13365(entry) 
msgid "get <placeholder-1/> command for rule"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13363(function) 
msgid "pg_get_ruledef(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13368(parameter) 
msgid "table_name"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13368(parameter) 
msgid "column_name"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13368(function) 
msgid "pg_get_serial_sequence(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13370(type) 
msgid "serial"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13370(type) 
msgid "bigserial"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13370(entry) 
msgid "get name of the sequence that a <placeholder-1/> or <placeholder-2/> column uses"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13374(parameter) /tmp/cicero-BGQN/func.xml:13379(parameter) 
msgid "trigger_oid"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13376(command) /tmp/cicero-BGQN/func.xml:13381(command) 
msgid "CREATE [ CONSTRAINT ] TRIGGER"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13376(entry) /tmp/cicero-BGQN/func.xml:13381(entry) 
msgid "get <placeholder-1/> command for trigger"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13384(parameter) 
msgid "role_oid"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13384(function) 
msgid "pg_get_userbyid(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13386(entry) 
msgid "get role name with given OID"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13389(parameter) /tmp/cicero-BGQN/func.xml:13394(parameter) 
msgid "view_name"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13389(function) /tmp/cicero-BGQN/func.xml:13399(function) 
msgid "pg_get_viewdef(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13391(emphasis) /tmp/cicero-BGQN/func.xml:13396(emphasis) /tmp/cicero-BGQN/func.xml:13594(emphasis) 
msgid "deprecated"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13391(entry) /tmp/cicero-BGQN/func.xml:13396(entry) 
msgid "get underlying <placeholder-1/> command for view (<placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13394(function) /tmp/cicero-BGQN/func.xml:13404(function) 
msgid "pg_get_viewdef(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13399(parameter) /tmp/cicero-BGQN/func.xml:13404(parameter) 
msgid "view_oid"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13401(entry) /tmp/cicero-BGQN/func.xml:13406(entry) 
msgid "get underlying <placeholder-1/> command for view"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13409(parameter) 
msgid "reloptions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13409(function) 
msgid "pg_options_to_table(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13411(entry) 
msgid "get the set of storage option name/value pairs"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13414(parameter) 
msgid "tablespace_oid"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13414(function) 
msgid "pg_tablespace_databases(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13415(type) 
msgid "setof oid"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13416(entry) 
msgid "get the set of database OIDs that have objects in the tablespace"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13419(function) 
msgid "pg_typeof(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13420(type) 
msgid "regtype"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13421(entry) 
msgid "get the data type of any value"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13427(para) 
msgid "<function>format_type</function> returns the SQL name of a data type that is identified by its type OID and possibly a type modifier. Pass NULL for the type modifier if no specific modifier is known."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13433(para) 
msgid "<function>pg_get_keywords</function> returns a set of records describing the SQL keywords recognized by the server. The <structfield>word</structfield> column contains the keyword. The <structfield>catcode</structfield> column contains a category code: <literal>U</literal> for unreserved, <literal>C</literal> for column name, <literal>T</literal> for type or function name, or <literal>R</literal> for reserved. The <structfield>catdesc</structfield> column contains a possibly-localized string describing the category."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13443(para) 
msgid "<function>pg_get_constraintdef</function>, <function>pg_get_indexdef</function>, <function>pg_get_ruledef</function>, and <function>pg_get_triggerdef</function>, respectively reconstruct the creating command for a constraint, index, rule, or trigger. (Note that this is a decompiled reconstruction, not the original text of the command.) <function>pg_get_expr</function> decompiles the internal form of an individual expression, such as the default value for a column. It can be useful when examining the contents of system catalogs. If the expression might contain Vars, specify the OID of the relation they refer to as the second parameter; if no Vars are expected, zero is sufficient. <function>pg_get_viewdef</function> reconstructs the <command>SELECT</command> query that defines a view. Most of these functions come in two variants, one of which can optionally <quote>pretty-print</quote> the result. The pretty-printed format is more readable, but the default format is more likely to be interpreted the same way by future versions of <productname>PostgreSQL</productname>; avoid using pretty-printed output for dump purposes. Passing <literal>false</literal> for the pretty-print parameter yields the same result as the variant that does not have the parameter at all."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13464(para) 
msgid "<function>pg_get_functiondef</function> returns a complete <command>CREATE OR REPLACE FUNCTION</command> statement for a function. <function>pg_get_function_arguments</function> returns the argument list of a function, in the form it would need to appear in within <command>CREATE FUNCTION</command>. <function>pg_get_function_result</function> similarly returns the appropriate <literal>RETURNS</literal> clause for the function. <function>pg_get_function_identity_arguments</function> returns the argument list necessary to identify a function, in the form it would need to appear in within <command>ALTER FUNCTION</command>, for instance. This form omits default values."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13478(para) 
msgid "<function>pg_get_serial_sequence</function> returns the name of the sequence associated with a column, or NULL if no sequence is associated with the column. The first input parameter is a table name with optional schema, and the second parameter is a column name. Because the first parameter is potentially a schema and table, it is not treated as a double-quoted identifier, meaning it is lower cased by default, while the second parameter, being just a column name, is treated as double-quoted and has its case preserved. The function returns a value suitably formatted for passing to sequence functions (see <xref linkend=\"functions-sequence\"/>). This association can be modified or removed with <command>ALTER SEQUENCE OWNED BY</command>. (The function probably should have been called <function>pg_get_owned_sequence</function>; its current name reflects the fact that it's typically used with <type>serial</type> or <type>bigserial</type> columns.)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13496(para) 
msgid "<function>pg_get_userbyid</function> extracts a role's name given its OID."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13501(para) 
msgid "<function>pg_options_to_table</function> returns the set of storage option name/value pairs (<literal>option_name</literal>/<literal>option_value</literal>) when passed <structname>pg_class</structname>.<structfield>reloptions</structfield> or <structname>pg_attribute</structname>.<structfield>attoptions</structfield>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13509(para) 
msgid "<function>pg_tablespace_databases</function> allows a tablespace to be examined. It returns the set of OIDs of databases that have objects stored in the tablespace. If this function returns any rows, the tablespace is not empty and cannot be dropped. To display the specific objects populating the tablespace, you will need to connect to the databases identified by <function>pg_tablespace_databases</function> and query their <structname>pg_class</structname> catalogs."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13519(para) 
msgid "<function>pg_describe_object</function> returns a description of a database object specified by catalog OID, object OID and a (possibly zero) sub-object ID. This is useful to determine the identity of an object as stored in the <structname>pg_depend</structname> catalog."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13533(programlisting) 
#, no-wrap
msgid "\nSELECT pg_typeof(33);\n\n pg_typeof \n-----------\n integer\n(1 row)\n\nSELECT typlen FROM pg_type WHERE oid = pg_typeof(33);\n typlen \n--------\n      4\n(1 row)\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13526(para) 
msgid "<function>pg_typeof</function> returns the OID of the data type of the value that is passed to it. This can be helpful for troubleshooting or dynamically constructing SQL queries. The function is declared as returning <type>regtype</type>, which is an OID alias type (see <xref linkend=\"datatype-oid\"/>); this means that it is the same as an OID for comparison purposes but displays as a type name. For example: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13550(primary) 
msgid "col_description"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13554(primary) 
msgid "obj_description"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13558(primary) 
msgid "shobj_description"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13562(primary) 
msgid "comment"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13563(secondary) 
msgid "about database objects"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13566(para) 
msgid "The functions shown in <xref linkend=\"functions-info-comment-table\"/> extract comments previously stored with the <xref linkend=\"sql-comment\"/> command. A null value is returned if no comment could be found for the specified parameters."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13574(title) 
msgid "Comment Information Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13582(parameter) 
msgid "column_number"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13582(function) 
msgid "col_description(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13584(entry) 
msgid "get comment for a table column"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13587(parameter) /tmp/cicero-BGQN/func.xml:13592(parameter) /tmp/cicero-BGQN/func.xml:13597(parameter) 
msgid "object_oid"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13587(parameter) /tmp/cicero-BGQN/func.xml:13597(parameter) 
msgid "catalog_name"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13587(function) 
msgid "obj_description(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13589(entry) 
msgid "get comment for a database object"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13592(function) 
msgid "obj_description(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13594(entry) 
msgid "get comment for a database object (<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13597(function) 
msgid "shobj_description(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13599(entry) 
msgid "get comment for a shared database object"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13605(para) 
msgid "<function>col_description</function> returns the comment for a table column, which is specified by the OID of its table and its column number. (<function>obj_description</function> cannot be used for table columns since columns do not have OIDs of their own.)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13612(para) 
msgid "The two-parameter form of <function>obj_description</function> returns the comment for a database object specified by its OID and the name of the containing system catalog. For example, <literal>obj_description(123456,'pg_class')</literal> would retrieve the comment for the table with OID 123456. The one-parameter form of <function>obj_description</function> requires only the object OID. It is deprecated since there is no guarantee that OIDs are unique across different system catalogs; therefore, the wrong comment might be returned."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13624(para) 
msgid "<function>shobj_description</function> is used just like <function>obj_description</function> except it is used for retrieving comments on shared objects. Some system catalogs are global to all databases within each cluster, and the descriptions for objects in them are stored globally as well."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13633(primary) 
msgid "txid_current"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13637(primary) 
msgid "txid_current_snapshot"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13641(primary) 
msgid "txid_snapshot_xip"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13645(primary) 
msgid "txid_snapshot_xmax"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13649(primary) 
msgid "txid_snapshot_xmin"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13653(primary) 
msgid "txid_visible_in_snapshot"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13656(para) 
msgid "The functions shown in <xref linkend=\"functions-txid-snapshot\"/> provide server transaction information in an exportable form. The main use of these functions is to determine which transactions were committed between two snapshots."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13664(title) 
msgid "Transaction IDs and Snapshots"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13672(function) 
msgid "txid_current()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13674(entry) 
msgid "get current transaction ID"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13677(function) 
msgid "txid_current_snapshot()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13678(type) /tmp/cicero-BGQN/func.xml:13682(parameter) /tmp/cicero-BGQN/func.xml:13687(parameter) /tmp/cicero-BGQN/func.xml:13692(parameter) /tmp/cicero-BGQN/func.xml:13697(parameter) 
msgid "txid_snapshot"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13679(entry) 
msgid "get current snapshot"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13682(function) 
msgid "txid_snapshot_xip(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13684(entry) 
msgid "get in-progress transaction IDs in snapshot"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13687(function) 
msgid "txid_snapshot_xmax(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13689(literal) /tmp/cicero-BGQN/func.xml:13738(type) /tmp/cicero-BGQN/func.xml:13750(literal) /tmp/cicero-BGQN/func.xml:13751(literal) 
msgid "xmax"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13689(entry) /tmp/cicero-BGQN/func.xml:13694(entry) 
msgid "get <placeholder-1/> of snapshot"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13692(function) 
msgid "txid_snapshot_xmin(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13694(literal) /tmp/cicero-BGQN/func.xml:13729(type) /tmp/cicero-BGQN/func.xml:13749(literal) 
msgid "xmin"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13697(function) 
msgid "txid_visible_in_snapshot(<placeholder-1/>, <placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13699(entry) 
msgid "is transaction ID visible in snapshot? (do not use with subtransaction ids)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13705(para) 
msgid "The internal transaction ID type (<type>xid</type>) is 32 bits wide and wraps around every 4 billion transactions. However, these functions export a 64-bit format that is extended with an <quote>epoch</quote> counter so it will not wrap around during the life of an installation. The data type used by these functions, <type>txid_snapshot</type>, stores information about transaction ID visibility at a particular moment in time. Its components are described in <xref linkend=\"functions-txid-snapshot-parts\"/>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13717(title) 
msgid "Snapshot Components"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13730(entry) 
msgid "Earliest transaction ID (txid) that is still active. All earlier transactions will either be committed and visible, or rolled back and dead."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13739(entry) 
msgid "First as-yet-unassigned txid. All txids greater than or equal to this are not yet started as of the time of the snapshot, and thus invisible."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13746(type) 
msgid "xip_list"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13751(literal) 
msgid "xmin &lt;= txid &lt; xmax"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13747(entry) 
msgid "Active txids at the time of the snapshot. The list includes only those active txids between <placeholder-1/> and <placeholder-2/>; there might be active txids higher than <placeholder-3/>. A txid that is <placeholder-4/> and not in this list was already completed at the time of the snapshot, and thus either visible or dead according to its commit status. The list does not include txids of subtransactions."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13763(para) 
msgid "<type>txid_snapshot</type>'s textual representation is <literal><replaceable>xmin</replaceable>:<replaceable>xmax</replaceable>:<replaceable>xip_list</replaceable></literal>. For example <literal>10:20:10,14,15</literal> means <literal>xmin=10, xmax=20, xip_list=10, 14, 15</literal>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13772(title) 
msgid "System Administration Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13774(para) 
msgid "<xref linkend=\"functions-admin-set-table\"/> shows the functions available to query and alter run-time configuration parameters."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13780(title) 
msgid "Configuration Settings Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13790(primary) 
msgid "current_setting"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13792(parameter) /tmp/cicero-BGQN/func.xml:13802(parameter) 
msgid "setting_name"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13792(function) 
msgid "current_setting(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13795(entry) 
msgid "get current value of setting"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13800(primary) 
msgid "set_config"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13803(parameter) 
msgid "new_value"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13804(parameter) 
msgid "is_local"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13802(function) 
msgid "set_config(<placeholder-1/>, <placeholder-2/>, <placeholder-3/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13807(entry) 
msgid "set parameter and return new value"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13814(primary) 
msgid "SET"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13818(primary) 
msgid "SHOW"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13822(primary) 
msgid "configuration"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13823(secondary) 
msgid "of the server"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13832(programlisting) 
#, no-wrap
msgid "\nSELECT current_setting('datestyle');\n\n current_setting\n-----------------\n ISO, MDY\n(1 row)\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13827(para) 
msgid "The function <function>current_setting</function> yields the current value of the setting <parameter>setting_name</parameter>. It corresponds to the <acronym>SQL</acronym> command <command>SHOW</command>. An example: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13851(programlisting) 
#, no-wrap
msgid "\nSELECT set_config('log_statement_stats', 'off', false);\n\n set_config\n------------\n off\n(1 row)\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13842(para) 
msgid "<function>set_config</function> sets the parameter <parameter>setting_name</parameter> to <parameter>new_value</parameter>. If <parameter>is_local</parameter> is <literal>true</literal>, the new value will only apply to the current transaction. If you want the new value to apply for the current session, use <literal>false</literal> instead. The function corresponds to the SQL command <command>SET</command>. An example: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13862(primary) 
msgid "pg_cancel_backend"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13865(primary) 
msgid "pg_reload_conf"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13868(primary) 
msgid "pg_rotate_logfile"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13871(primary) 
msgid "pg_terminate_backend"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13875(primary) 
msgid "signal"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13876(secondary) 
msgid "backend processes"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13879(para) 
msgid "The functions shown in <xref linkend=\"functions-admin-signal-table\"/> send control signals to other server processes. Use of these functions is restricted to superusers."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13887(title) 
msgid "Server Signalling Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13897(parameter) /tmp/cicero-BGQN/func.xml:13918(parameter) 
msgid "pid"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13897(function) 
msgid "pg_cancel_backend(<placeholder-1/><placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13900(entry) 
msgid "Cancel a backend's current query"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13904(function) 
msgid "pg_reload_conf()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13907(entry) 
msgid "Cause server processes to reload their configuration files"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13911(function) 
msgid "pg_rotate_logfile()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13914(entry) 
msgid "Rotate server's log file"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13918(function) 
msgid "pg_terminate_backend(<placeholder-1/><placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13921(entry) 
msgid "Terminate a backend"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13927(para) 
msgid "Each of these functions returns <literal>true</literal> if successful and <literal>false</literal> otherwise."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13932(para) 
msgid "<function>pg_cancel_backend</function> and <function>pg_terminate_backend</function> send signals (<systemitem>SIGINT</systemitem> or <systemitem>SIGTERM</systemitem> respectively) to backend processes identified by process ID. The process ID of an active backend can be found from the <structfield>procpid</structfield> column of the <structname>pg_stat_activity</structname> view, or by listing the <command>postgres</command> processes on the server (using <application>ps</application> on Unix or the <application>Task Manager</application> on <productname>Windows</productname>)."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13944(para) 
msgid "<function>pg_reload_conf</function> sends a <systemitem>SIGHUP</systemitem> signal to the server, causing configuration files to be reloaded by all server processes."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13950(para) 
msgid "<function>pg_rotate_logfile</function> signals the log-file manager to switch to a new output file immediately. This works only when the built-in log collector is running, since otherwise there is no log-file manager subprocess."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13958(primary) 
msgid "backup"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13961(primary) 
msgid "pg_create_restore_point"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13964(primary) 
msgid "pg_current_xlog_insert_location"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13967(primary) 
msgid "pg_current_xlog_location"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13970(primary) 
msgid "pg_start_backup"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13973(primary) 
msgid "pg_stop_backup"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13976(primary) 
msgid "pg_switch_xlog"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13979(primary) 
msgid "pg_xlogfile_name"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13982(primary) 
msgid "pg_xlogfile_name_offset"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13985(para) 
msgid "The functions shown in <xref linkend=\"functions-admin-backup-table\"/> assist in making on-line backups. These functions cannot be executed during recovery."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:13992(title) 
msgid "Backup Control Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14002(function) 
msgid "pg_create_restore_point(<placeholder-1/><placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14005(entry) 
msgid "Create a named point for performing restore (restricted to superusers)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14009(function) 
msgid "pg_current_xlog_insert_location()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14012(entry) 
msgid "Get current transaction log insert location"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14016(function) 
msgid "pg_current_xlog_location()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14019(entry) 
msgid "Get current transaction log write location"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14023(parameter) 
msgid "label"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14023(parameter) 
msgid "fast"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14023(function) 
msgid "pg_start_backup(<placeholder-1/><placeholder-2/><placeholder-3/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14026(entry) 
msgid "Prepare for performing on-line backup (restricted to superusers or replication roles)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14030(function) 
msgid "pg_stop_backup()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14033(entry) 
msgid "Finish performing on-line backup (restricted to superusers or replication roles)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14037(function) 
msgid "pg_switch_xlog()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14040(entry) 
msgid "Force switch to a new transaction log file (restricted to superusers)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14044(parameter) /tmp/cicero-BGQN/func.xml:14051(parameter) 
msgid "location"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14044(function) 
msgid "pg_xlogfile_name(<placeholder-1/><placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14047(entry) 
msgid "Convert transaction log location string to file name"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14051(function) 
msgid "pg_xlogfile_name_offset(<placeholder-1/><placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14054(entry) 
msgid "Convert transaction log location string to file name and decimal byte offset within file"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14069(programlisting) 
#, no-wrap
msgid "\npostgres=# select pg_start_backup('label_goes_here');\n pg_start_backup\n-----------------\n 0/D4445B8\n(1 row)\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14060(para) 
msgid "<function>pg_start_backup</function> accepts an arbitrary user-defined label for the backup. (Typically this would be the name under which the backup dump file will be stored.) The function writes a backup label file (<filename>backup_label</filename>) into the database cluster's data directory, performs a checkpoint, and then returns the backup's starting transaction log location as text. The user can ignore this result value, but it is provided in case it is useful. <placeholder-1/> There is an optional second parameter of type <type>boolean</type>. If <literal>true</literal>, it specifies executing <function>pg_start_backup</function> as quickly as possible. This forces an immediate checkpoint which will cause a spike in I/O operations, slowing any concurrently executing queries."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14082(para) 
msgid "<function>pg_stop_backup</function> removes the label file created by <function>pg_start_backup</function>, and creates a backup history file in the transaction log archive area. The history file includes the label given to <function>pg_start_backup</function>, the starting and ending transaction log locations for the backup, and the starting and ending times of the backup. The return value is the backup's ending transaction log location (which again can be ignored). After recording the ending location, the current transaction log insertion point is automatically advanced to the next transaction log file, so that the ending transaction log file can be archived immediately to complete the backup."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14095(para) 
msgid "<function>pg_switch_xlog</function> moves to the next transaction log file, allowing the current file to be archived (assuming you are using continuous archiving). The return value is the ending transaction log location + 1 within the just-completed transaction log file. If there has been no transaction log activity since the last transaction log switch, <function>pg_switch_xlog</function> does nothing and returns the start location of the transaction log file currently in use."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14104(para) 
msgid "<function>pg_create_restore_point</function> creates a named transaction log record that can be used as recovery target, and returns the corresponding transaction log location. The given name can then be used with <xref linkend=\"recovery-target-name\"/> to specify the point up to which recovery will proceed. Avoid creating multiple restore points with the same name, since recovery will stop at the first one whose name matches the recovery target."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14114(para) 
msgid "<function>pg_current_xlog_location</function> displays the current transaction log write location in the same format used by the above functions. Similarly, <function>pg_current_xlog_insert_location</function> displays the current transaction log insertion point. The insertion point is the <quote>logical</quote> end of the transaction log at any instant, while the write location is the end of what has actually been written out from the server's internal buffers. The write location is the end of what can be examined from outside the server, and is usually what you want if you are interested in archiving partially-complete transaction log files. The insertion point is made available primarily for server debugging purposes. These are both read-only operations and do not require superuser permissions."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14133(programlisting) 
#, no-wrap
msgid "\npostgres=# SELECT * FROM pg_xlogfile_name_offset(pg_stop_backup());\n        file_name         | file_offset \n--------------------------+-------------\n 00000001000000000000000D |     4039624\n(1 row)\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14129(para) 
msgid "You can use <function>pg_xlogfile_name_offset</function> to extract the corresponding transaction log file name and byte offset from the results of any of the above functions. For example: <placeholder-1/> Similarly, <function>pg_xlogfile_name</function> extracts just the transaction log file name. When the given transaction log location is exactly at a transaction log file boundary, both these functions return the name of the preceding transaction log file. This is usually the desired behavior for managing transaction log archiving behavior, since the preceding file is the last one that currently needs to be archived."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14148(para) 
msgid "For details about proper usage of these functions, see <xref linkend=\"continuous-archiving\"/>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14154(primary) 
msgid "pg_is_in_recovery"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14157(primary) 
msgid "pg_last_xlog_receive_location"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14160(primary) 
msgid "pg_last_xlog_replay_location"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14163(primary) 
msgid "pg_last_xact_replay_timestamp"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14166(para) 
msgid "The functions shown in <xref linkend=\"functions-recovery-info-table\"/> provide information about the current status of the standby. These functions may be executed during both recovery and in normal running."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14174(title) 
msgid "Recovery Information Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14184(function) 
msgid "pg_is_in_recovery()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14187(entry) 
msgid "True if recovery is still in progress."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14192(function) 
msgid "pg_last_xlog_receive_location()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14195(entry) 
msgid "Get last transaction log location received and synced to disk by streaming replication. While streaming replication is in progress this will increase monotonically. If recovery has completed this will remain static at the value of the last WAL record received and synced to disk during recovery. If streaming replication is disabled, or if it has not yet started, the function returns NULL."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14206(function) 
msgid "pg_last_xlog_replay_location()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14209(entry) 
msgid "Get last transaction log location replayed during recovery. If recovery is still in progress this will increase monotonically. If recovery has completed then this value will remain static at the value of the last WAL record applied during that recovery. When the server has been started normally without recovery the function returns NULL."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14219(function) 
msgid "pg_last_xact_replay_timestamp()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14222(entry) 
msgid "Get time stamp of last transaction replayed during recovery. This is the time at which the commit or abort WAL record for that transaction was generated on the primary. If no transactions have been replayed during recovery, this function returns NULL. Otherwise, if recovery is still in progress this will increase monotonically. If recovery has completed then this value will remain static at the value of the last transaction applied during that recovery. When the server has been started normally without recovery the function returns NULL."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14238(primary) 
msgid "pg_is_xlog_replay_paused"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14241(primary) 
msgid "pg_xlog_replay_pause"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14244(primary) 
msgid "pg_xlog_replay_resume"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14247(para) 
msgid "The functions shown in <xref linkend=\"functions-recovery-control-table\"/> control the progress of recovery. These functions may be executed only during recovery."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14254(title) 
msgid "Recovery Control Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14264(function) 
msgid "pg_is_xlog_replay_paused()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14267(entry) 
msgid "True if recovery is paused."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14272(function) 
msgid "pg_xlog_replay_pause()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14275(entry) 
msgid "Pauses recovery immediately."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14280(function) 
msgid "pg_xlog_replay_resume()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14283(entry) 
msgid "Restarts recovery if it was paused."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14290(para) 
msgid "While recovery is paused no further database changes are applied. If in hot standby, all new queries will see the same consistent snapshot of the database, and no further query conflicts will be generated until recovery is resumed."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14297(para) 
msgid "If streaming replication is disabled, the paused state may continue indefinitely without problem. While streaming replication is in progress WAL records will continue to be received, which will eventually fill available disk space, depending upon the duration of the pause, the rate of WAL generation and available disk space."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14305(para) 
msgid "The functions shown in <xref linkend=\"functions-admin-dbsize\"/> calculate the disk space usage of database objects."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14311(primary) 
msgid "pg_column_size"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14314(primary) 
msgid "pg_database_size"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14317(primary) 
msgid "pg_indexes_size"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14320(primary) 
msgid "pg_relation_size"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14323(primary) 
msgid "pg_size_pretty"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14326(primary) 
msgid "pg_table_size"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14329(primary) 
msgid "pg_tablespace_size"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14332(primary) 
msgid "pg_total_relation_size"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14336(title) 
msgid "Database Object Size Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14345(function) 
msgid "pg_column_size(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14347(entry) 
msgid "Number of bytes used to store a particular value (possibly compressed)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14351(function) /tmp/cicero-BGQN/func.xml:14358(function) 
msgid "pg_database_size(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14354(entry) 
msgid "Disk space used by the database with the specified OID"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14361(entry) 
msgid "Disk space used by the database with the specified name"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14365(function) 
msgid "pg_indexes_size(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14368(entry) 
msgid "Total disk space used by indexes attached to the specified table"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14374(parameter) /tmp/cicero-BGQN/func.xml:14385(parameter) /tmp/cicero-BGQN/func.xml:14524(parameter) /tmp/cicero-BGQN/func.xml:14533(parameter) 
msgid "relation"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14374(parameter) 
msgid "fork"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14374(function) 
msgid "pg_relation_size(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14378(literal) 
msgid "'main'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14379(literal) 
msgid "'fsm'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14379(literal) 
msgid "'vm'"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14377(entry) 
msgid "Disk space used by the specified fork (<placeholder-1/>, <placeholder-2/> or <placeholder-3/>) of the specified table or index"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14385(function) 
msgid "pg_relation_size(<placeholder-1/><placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14389(literal) 
msgid "pg_relation_size(..., 'main')"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14388(entry) 
msgid "Shorthand for <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14394(function) 
msgid "pg_size_pretty(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14397(entry) 
msgid "Converts a size in bytes into a human-readable format with size units"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14401(function) 
msgid "pg_table_size(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14404(entry) 
msgid "Disk space used by the specified table, excluding indexes (but including TOAST, free space map, and visibility map)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14411(function) /tmp/cicero-BGQN/func.xml:14418(function) 
msgid "pg_tablespace_size(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14414(entry) 
msgid "Disk space used by the tablespace with the specified OID"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14421(entry) 
msgid "Disk space used by the tablespace with the specified name"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14425(function) 
msgid "pg_total_relation_size(<placeholder-1/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14430(acronym) 
msgid "TOAST"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14428(entry) 
msgid "Total disk space used by the specified table, including all indexes and <placeholder-1/> data"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14437(para) 
msgid "<function>pg_column_size</function> shows the space used to store any individual data value."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14442(para) 
msgid "<function>pg_total_relation_size</function> accepts the OID or name of a table or toast table, and returns the total on-disk space used for that table, including all associated indexes. This function is equivalent to <function>pg_table_size</function><literal>+</literal><function>pg_indexes_size</function>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14450(para) 
msgid "<function>pg_table_size</function> accepts the OID or name of a table and returns the disk space needed for that table, exclusive of indexes. (TOAST space, free space map, and visibility map are included.)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14456(para) 
msgid "<function>pg_indexes_size</function> accepts the OID or name of a table and returns the total disk space used by all the indexes attached to that table."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14462(para) 
msgid "<function>pg_database_size</function> and <function>pg_tablespace_size</function> accept the OID or name of a database or tablespace, and return the total disk space used therein."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14468(para) 
msgid "<function>pg_relation_size</function> accepts the OID or name of a table, index or toast table, and returns the on-disk size in bytes. Specifying <literal>'main'</literal> or leaving out the second argument returns the size of the main data fork of the relation. Specifying <literal>'fsm'</literal> returns the size of the Free Space Map (see <xref linkend=\"storage-fsm\"/>) associated with the relation. Specifying <literal>'vm'</literal> returns the size of the Visibility Map (see <xref linkend=\"storage-vm\"/>) associated with the relation. Note that this function shows the size of only one fork; for most purposes it is more convenient to use the higher-level functions <function>pg_total_relation_size</function> or <function>pg_table_size</function>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14483(para) 
msgid "<function>pg_size_pretty</function> can be used to format the result of one of the other functions in a human-readable way, using kB, MB, GB or TB as appropriate."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14489(para) 
msgid "The functions above that operate on tables or indexes accept a <type>regclass</type> argument, which is simply the OID of the table or index in the <structname>pg_class</structname> system catalog. You do not have to look up the OID by hand, however, since the <type>regclass</type> data type's input converter will do the work for you. Just write the table name enclosed in single quotes so that it looks like a literal constant. For compatibility with the handling of ordinary <acronym>SQL</acronym> names, the string will be converted to lower case unless it contains double quotes around the table name."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14501(para) 
msgid "The functions shown in <xref linkend=\"functions-admin-dblocation\"/> assist in identifying the specific disk files associated with database objects."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14507(primary) 
msgid "pg_relation_filenode"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14510(primary) 
msgid "pg_relation_filepath"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14514(title) 
msgid "Database Object Location Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14524(function) 
msgid "pg_relation_filenode(<placeholder-1/><placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14527(entry) 
msgid "Filenode number of the specified relation"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14533(function) 
msgid "pg_relation_filepath(<placeholder-1/><placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14536(entry) 
msgid "File path name of the specified relation"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14544(para) 
msgid "<function>pg_relation_filenode</function> accepts the OID or name of a table, index, sequence, or toast table, and returns the <quote>filenode</quote> number currently assigned to it. The filenode is the base component of the file name(s) used for the relation (see <xref linkend=\"storage-file-layout\"/> for more information). For most tables the result is the same as <structname>pg_class</structname>.<structfield>relfilenode</structfield>, but for certain system catalogs <structfield>relfilenode</structfield> is zero and this function must be used to get the correct value. The function returns NULL if passed a relation that does not have storage, such as a view."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14556(para) 
msgid "<function>pg_relation_filepath</function> is similar to <function>pg_relation_filenode</function>, but it returns the entire file path name (relative to the database cluster's data directory <varname>PGDATA</varname>) of the relation."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14563(para) 
msgid "The functions shown in <xref linkend=\"functions-admin-genfile\"/> provide native access to files on the machine hosting the server. Only files within the database cluster directory and the <varname>log_directory</varname> can be accessed. Use a relative path for files in the cluster directory, and a path matching the <varname>log_directory</varname> configuration setting for log files. Use of these functions is restricted to superusers."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14574(title) 
msgid "Generic File Access Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14584(parameter) 
msgid "dirname"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14584(function) 
msgid "pg_ls_dir(<placeholder-1/><placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14587(entry) 
msgid "List the contents of a directory"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14591(parameter) /tmp/cicero-BGQN/func.xml:14598(parameter) /tmp/cicero-BGQN/func.xml:14605(parameter) 
msgid "filename"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14591(function) 
msgid "pg_read_file(<placeholder-1/><placeholder-2/> [, <placeholder-3/><placeholder-4/>, <placeholder-5/><placeholder-6/>])"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14594(entry) 
msgid "Return the contents of a text file"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14598(function) 
msgid "pg_read_binary_file(<placeholder-1/><placeholder-2/> [, <placeholder-3/><placeholder-4/>, <placeholder-5/><placeholder-6/>])"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14601(entry) 
msgid "Return the contents of a file"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14605(function) 
msgid "pg_stat_file(<placeholder-1/><placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14607(type) 
msgid "record"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14608(entry) 
msgid "Return information about a file"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14615(primary) 
msgid "pg_ls_dir"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14617(para) 
msgid "<function>pg_ls_dir</function> returns all the names in the specified directory, except the special entries <quote><literal>.</literal></quote> and <quote><literal>..</literal></quote>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14624(primary) 
msgid "pg_read_file"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14626(para) 
msgid "<function>pg_read_file</function> returns part of a text file, starting at the given <parameter>offset</parameter>, returning at most <parameter>length</parameter> bytes (less if the end of file is reached first). If <parameter>offset</parameter> is negative, it is relative to the end of the file. If <parameter>offset</parameter> and <parameter>length</parameter> are omitted, the entire file is returned. The bytes read from the file are interpreted as a string in the server encoding; an error is thrown if they are not valid in that encoding."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14638(primary) 
msgid "pg_read_binary_file"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14646(programlisting) 
#, no-wrap
msgid "\nSELECT convert_from(pg_read_binary_file('file_in_utf8.txt'), 'UTF8');\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14640(para) 
msgid "<function>pg_read_binary_file</function> is similar to <function>pg_read_file</function>, except that the result is a <type>bytea</type> value; accordingly, no encoding checks are performed. In combination with the <function>convert_from</function> function, this function can be used to read a file in a specified encoding: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14652(primary) 
msgid "pg_stat_file"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14660(programlisting) 
#, no-wrap
msgid "\nSELECT * FROM pg_stat_file('filename');\nSELECT (pg_stat_file('filename')).modification;\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14654(para) 
msgid "<function>pg_stat_file</function> returns a record containing the file size, last accessed time stamp, last modified time stamp, last file status change time stamp (Unix platforms only), file creation time stamp (Windows only), and a <type>boolean</type> indicating if it is a directory. Typical usages include: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14666(para) 
msgid "The functions shown in <xref linkend=\"functions-advisory-locks\"/> manage advisory locks. For details about proper use of these functions, see <xref linkend=\"advisory-locks\"/>."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14673(title) 
msgid "Advisory Lock Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14683(parameter) /tmp/cicero-BGQN/func.xml:14697(parameter) /tmp/cicero-BGQN/func.xml:14711(parameter) /tmp/cicero-BGQN/func.xml:14732(parameter) /tmp/cicero-BGQN/func.xml:14746(parameter) /tmp/cicero-BGQN/func.xml:14760(parameter) /tmp/cicero-BGQN/func.xml:14774(parameter) /tmp/cicero-BGQN/func.xml:14788(parameter) /tmp/cicero-BGQN/func.xml:14802(parameter) /tmp/cicero-BGQN/func.xml:14816(parameter) 
msgid "key"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14683(function) 
msgid "pg_advisory_lock(<placeholder-1/><placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14686(entry) /tmp/cicero-BGQN/func.xml:14693(entry) 
msgid "Obtain exclusive session level advisory lock"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14690(parameter) /tmp/cicero-BGQN/func.xml:14704(parameter) /tmp/cicero-BGQN/func.xml:14718(parameter) /tmp/cicero-BGQN/func.xml:14739(parameter) /tmp/cicero-BGQN/func.xml:14753(parameter) /tmp/cicero-BGQN/func.xml:14767(parameter) /tmp/cicero-BGQN/func.xml:14781(parameter) /tmp/cicero-BGQN/func.xml:14795(parameter) /tmp/cicero-BGQN/func.xml:14809(parameter) /tmp/cicero-BGQN/func.xml:14823(parameter) 
msgid "key1"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14690(parameter) /tmp/cicero-BGQN/func.xml:14704(parameter) /tmp/cicero-BGQN/func.xml:14718(parameter) /tmp/cicero-BGQN/func.xml:14739(parameter) /tmp/cicero-BGQN/func.xml:14753(parameter) /tmp/cicero-BGQN/func.xml:14767(parameter) /tmp/cicero-BGQN/func.xml:14781(parameter) /tmp/cicero-BGQN/func.xml:14795(parameter) /tmp/cicero-BGQN/func.xml:14809(parameter) /tmp/cicero-BGQN/func.xml:14823(parameter) 
msgid "key2"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14690(function) 
msgid "pg_advisory_lock(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14697(function) 
msgid "pg_advisory_lock_shared(<placeholder-1/><placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14700(entry) /tmp/cicero-BGQN/func.xml:14707(entry) 
msgid "Obtain shared session level advisory lock"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14704(function) 
msgid "pg_advisory_lock_shared(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14711(function) 
msgid "pg_advisory_unlock(<placeholder-1/><placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14714(entry) /tmp/cicero-BGQN/func.xml:14721(entry) 
msgid "Release an exclusive session level advisory lock"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14718(function) 
msgid "pg_advisory_unlock(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14725(function) 
msgid "pg_advisory_unlock_all()"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14728(entry) 
msgid "Release all session level advisory locks held by the current session"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14732(function) 
msgid "pg_advisory_unlock_shared(<placeholder-1/><placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14735(entry) /tmp/cicero-BGQN/func.xml:14742(entry) 
msgid "Release a shared session level advisory lock"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14739(function) 
msgid "pg_advisory_unlock_shared(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14746(function) 
msgid "pg_advisory_xact_lock(<placeholder-1/><placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14749(entry) /tmp/cicero-BGQN/func.xml:14756(entry) 
msgid "Obtain exclusive transaction level advisory lock"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14753(function) 
msgid "pg_advisory_xact_lock(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14760(function) 
msgid "pg_advisory_xact_lock_shared(<placeholder-1/><placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14763(entry) 
msgid "Obtain shared transaction level advisory lock"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14767(function) 
msgid "pg_advisory_xact_lock_shared(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14770(entry) 
msgid "Obtain shared advisory lock for the current transaction"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14774(function) 
msgid "pg_try_advisory_lock(<placeholder-1/><placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14777(entry) /tmp/cicero-BGQN/func.xml:14784(entry) 
msgid "Obtain exclusive session level advisory lock if available"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14781(function) 
msgid "pg_try_advisory_lock(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14788(function) 
msgid "pg_try_advisory_lock_shared(<placeholder-1/><placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14791(entry) /tmp/cicero-BGQN/func.xml:14798(entry) 
msgid "Obtain shared session level advisory lock if available"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14795(function) 
msgid "pg_try_advisory_lock_shared(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14802(function) 
msgid "pg_try_advisory_xact_lock(<placeholder-1/><placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14805(entry) /tmp/cicero-BGQN/func.xml:14812(entry) 
msgid "Obtain exclusive transaction level advisory lock if available"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14809(function) 
msgid "pg_try_advisory_xact_lock(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14816(function) 
msgid "pg_try_advisory_xact_lock_shared(<placeholder-1/><placeholder-2/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14819(entry) /tmp/cicero-BGQN/func.xml:14826(entry) 
msgid "Obtain shared transaction level advisory lock if available"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14823(function) 
msgid "pg_try_advisory_xact_lock_shared(<placeholder-1/><placeholder-2/>, <placeholder-3/><placeholder-4/>)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14833(primary) 
msgid "pg_advisory_lock"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14835(para) 
msgid "<function>pg_advisory_lock</function> locks an application-defined resource, which can be identified either by a single 64-bit key value or two 32-bit key values (note that these two key spaces do not overlap). The key type is specified in <literal>pg_locks.objid</literal>. If another session already holds a lock on the same resource, the function will wait until the resource becomes available. The lock is exclusive. Multiple lock requests stack, so that if the same resource is locked three times it must be also unlocked three times to be released for other sessions' use."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14848(primary) 
msgid "pg_advisory_lock_shared"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14850(para) 
msgid "<function>pg_advisory_lock_shared</function> works the same as <function>pg_advisory_lock</function>, except the lock can be shared with other sessions requesting shared locks. Only would-be exclusive lockers are locked out."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14858(primary) 
msgid "pg_try_advisory_lock"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14860(para) 
msgid "<function>pg_try_advisory_lock</function> is similar to <function>pg_advisory_lock</function>, except the function will not wait for the lock to become available. It will either obtain the lock immediately and return <literal>true</literal>, or return <literal>false</literal> if the lock cannot be acquired immediately."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14869(primary) 
msgid "pg_try_advisory_lock_shared"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14871(para) 
msgid "<function>pg_try_advisory_lock_shared</function> works the same as <function>pg_try_advisory_lock</function>, except it attempts to acquire a shared rather than an exclusive lock."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14878(primary) 
msgid "pg_advisory_xact_lock"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14880(para) 
msgid "<function>pg_advisory_xact_lock</function> works the same as <function>pg_advisory_lock</function>, expect the lock is automatically released at the end of the current transaction and can not be released explicitly."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14887(primary) 
msgid "pg_advisory_xact_lock_shared"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14889(para) 
msgid "<function>pg_advisory_xact_lock_shared</function> works the same as <function>pg_advisory_lock_shared</function>, expect the lock is automatically released at the end of the current transaction and can not be released explicitly."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14896(primary) 
msgid "pg_try_advisory_xact_lock"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14898(para) 
msgid "<function>pg_try_advisory_xact_lock</function> works the same as <function>pg_try_advisory_lock</function>, expect the lock, if acquired, is automatically released at the end of the current transaction and can not be released explicitly."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14906(primary) 
msgid "pg_try_advisory_xact_lock_shared"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14908(para) 
msgid "<function>pg_try_advisory_xact_lock_shared</function> works the same as <function>pg_try_advisory_lock_shared</function>, expect the lock, if acquired, is automatically released at the end of the current transaction and can not be released explicitly."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14916(primary) 
msgid "pg_advisory_unlock"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14918(para) 
msgid "<function>pg_advisory_unlock</function> will release a previously-acquired exclusive session level advisory lock. It returns <literal>true</literal> if the lock is successfully released. If the lock was not held, it will return <literal>false</literal>, and in addition, an SQL warning will be raised by the server."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14927(primary) 
msgid "pg_advisory_unlock_shared"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14929(para) 
msgid "<function>pg_advisory_unlock_shared</function> works the same as <function>pg_advisory_unlock</function>, except it releases a shared session level advisory lock."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14936(primary) 
msgid "pg_advisory_unlock_all"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14938(para) 
msgid "<function>pg_advisory_unlock_all</function> will release all session level advisory locks held by the current session. (This function is implicitly invoked at session end, even if the client disconnects ungracefully.)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14947(title) 
msgid "Trigger Functions"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14950(primary) 
msgid "suppress_redundant_updates_trigger"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14953(para) 
msgid "Currently <productname>PostgreSQL</productname> provides one built in trigger function, <function>suppress_redundant_updates_trigger</function>, which will prevent any update that does not actually change the data in the row from taking place, in contrast to the normal behavior which always performs the update regardless of whether or not the data has changed. (This normal behavior makes updates run faster, since no checking is required, and is also useful in certain cases.)"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14964(para) 
msgid "Ideally, you should normally avoid running updates that don't actually change the data in the record. Redundant updates can cost considerable unnecessary time, especially if there are lots of indexes to alter, and space in dead rows that will eventually have to be vacuumed. However, detecting such situations in client code is not always easy, or even possible, and writing expressions to detect them can be error-prone. An alternative is to use <function>suppress_redundant_updates_trigger</function>, which will skip updates that don't change the data. You should use this with care, however. The trigger takes a small but non-trivial time for each record, so if most of the records affected by an update are actually changed, use of this trigger will actually make the update run slower."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14982(programlisting) 
#, no-wrap
msgid "\nCREATE TRIGGER z_min_update\nBEFORE UPDATE ON tablename\nFOR EACH ROW EXECUTE PROCEDURE suppress_redundant_updates_trigger();\n"
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14979(para) 
msgid "The <function>suppress_redundant_updates_trigger</function> function can be added to a table like this: <placeholder-1/> In most cases, you would want to fire this trigger last for each row. Bearing in mind that triggers fire in name order, you would then choose a trigger name that comes after the name of any other trigger you might have on the table."
msgstr ""

#: /tmp/cicero-BGQN/func.xml:14992(para) 
msgid "For more information about creating triggers, see <xref linkend=\"sql-createtrigger\"/>."
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2.
#: /tmp/cicero-BGQN/func.xml:0(None) 
msgid "translator-credits"
msgstr ""

