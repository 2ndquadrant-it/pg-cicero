msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2011-09-01 06:56+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: /tmp/cicero-yKZa/gin.xml:5(title) 
msgid "GIN Indexes"
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:8(primary) 
msgid "index"
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:9(secondary) 
msgid "GIN"
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:13(title) 
msgid "Introduction"
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:15(para) 
msgid "<acronym>GIN</acronym> stands for Generalized Inverted Index. <acronym>GIN</acronym> is designed for handling cases where the items to be indexed are composite values, and the queries to be handled by the index need to search for element values that appear within the composite items. For example, the items could be documents, and the queries could be searches for documents containing specific words."
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:24(para) 
msgid "We use the word <firstterm>item</firstterm> to refer to a composite value that is to be indexed, and the word <firstterm>key</firstterm> to refer to an element value. <acronym>GIN</acronym> always stores and searches for keys, not item values per se."
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:31(para) 
msgid "A <acronym>GIN</acronym> index stores a set of (key, posting list) pairs, where a <firstterm>posting list</firstterm> is a set of row IDs in which the key occurs. The same row ID can appear in multiple posting lists, since an item can contain more than one key. Each key value is stored only once, so a <acronym>GIN</acronym> index is very compact for cases where the same key appears many times."
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:40(para) 
msgid "<acronym>GIN</acronym> is generalized in the sense that the <acronym>GIN</acronym> access method code does not need to know the specific operations that it accelerates. Instead, it uses custom strategies defined for particular data types. The strategy defines how keys are extracted from indexed items and query conditions, and how to determine whether a row that contains some of the key values in a query actually satisfies the query."
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:50(para) 
msgid "One advantage of <acronym>GIN</acronym> is that it allows the development of custom data types with the appropriate access methods, by an expert in the domain of the data type, rather than a database expert. This is much the same advantage as using <acronym>GiST</acronym>."
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:57(para) 
msgid "The <acronym>GIN</acronym> implementation in <productname>PostgreSQL</productname> is primarily maintained by Teodor Sigaev and Oleg Bartunov. There is more information about <acronym>GIN</acronym> on their <ulink url=\"http://www.sai.msu.su/~megera/wiki/Gin\">website</ulink>."
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:67(title) 
msgid "Extensibility"
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:69(para) 
msgid "The <acronym>GIN</acronym> interface has a high level of abstraction, requiring the access method implementer only to implement the semantics of the data type being accessed. The <acronym>GIN</acronym> layer itself takes care of concurrency, logging and searching the tree structure."
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:76(para) 
msgid "All it takes to get a <acronym>GIN</acronym> access method working is to implement four (or five) user-defined methods, which define the behavior of keys in the tree and the relationships between keys, indexed items, and indexable queries. In short, <acronym>GIN</acronym> combines extensibility with generality, code reuse, and a clean interface."
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:90(function) 
msgid "int compare(Datum a, Datum b)"
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:92(para) 
msgid "Compares two keys (not indexed items!) and returns an integer less than zero, zero, or greater than zero, indicating whether the first key is less than, equal to, or greater than the second. Null keys are never passed to this function."
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:102(function) 
msgid "Datum *extractValue(Datum itemValue, int32 *nkeys, bool **nullFlags)"
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:105(para) 
msgid "Returns a palloc'd array of keys given an item to be indexed. The number of returned keys must be stored into <literal>*nkeys</literal>. If any of the keys can be null, also palloc an array of <literal>*nkeys</literal> booleans, store its address at <literal>*nullFlags</literal>, and set these null flags as needed. <literal>*nullFlags</literal> can be left NULL (its initial value) if all keys are non-null. The return value can be NULL if the item contains no keys."
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:119(function) 
msgid "Datum *extractQuery(Datum query, int32 *nkeys, StrategyNumber n, bool **pmatch, Pointer **extra_data, bool **nullFlags, int32 *searchMode)"
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:123(para) 
msgid "Returns a palloc'd array of keys given a value to be queried; that is, <literal>query</literal> is the value on the right-hand side of an indexable operator whose left-hand side is the indexed column. <literal>n</literal> is the strategy number of the operator within the operator class (see <xref linkend=\"xindex-strategies\"/>). Often, <function>extractQuery</function> will need to consult <literal>n</literal> to determine the data type of <literal>query</literal> and the method it should use to extract key values. The number of returned keys must be stored into <literal>*nkeys</literal>. If any of the keys can be null, also palloc an array of <literal>*nkeys</literal> booleans, store its address at <literal>*nullFlags</literal>, and set these null flags as needed. <literal>*nullFlags</literal> can be left NULL (its initial value) if all keys are non-null. The return value can be NULL if the <literal>query</literal> contains no keys."
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:141(para) 
msgid "<literal>searchMode</literal> is an output argument that allows <function>extractQuery</function> to specify details about how the search will be done. If <literal>*searchMode</literal> is set to <literal>GIN_SEARCH_MODE_DEFAULT</literal> (which is the value it is initialized to before call), only items that match at least one of the returned keys are considered candidate matches. If <literal>*searchMode</literal> is set to <literal>GIN_SEARCH_MODE_INCLUDE_EMPTY</literal>, then in addition to items containing at least one matching key, items that contain no keys at all are considered candidate matches. (This mode is useful for implementing is-subset-of operators, for example.) If <literal>*searchMode</literal> is set to <literal>GIN_SEARCH_MODE_ALL</literal>, then all non-null items in the index are considered candidate matches, whether they match any of the returned keys or not. (This mode is much slower than the other two choices, since it requires scanning essentially the entire index, but it may be necessary to implement corner cases correctly. An operator that needs this mode in most cases is probably not a good candidate for a GIN operator class.) The symbols to use for setting this mode are defined in <filename>access/gin.h</filename>."
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:166(para) 
msgid "<literal>pmatch</literal> is an output argument for use when partial match is supported. To use it, <function>extractQuery</function> must allocate an array of <literal>*nkeys</literal> booleans and store its address at <literal>*pmatch</literal>. Each element of the array should be set to TRUE if the corresponding key requires partial match, FALSE if not. If <literal>*pmatch</literal> is set to NULL then GIN assumes partial match is not required. The variable is initialized to NULL before call, so this argument can simply be ignored by operator classes that do not support partial match."
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:178(para) 
msgid "<literal>extra_data</literal> is an output argument that allows <function>extractQuery</function> to pass additional data to the <function>consistent</function> and <function>comparePartial</function> methods. To use it, <function>extractQuery</function> must allocate an array of <literal>*nkeys</literal> Pointers and store its address at <literal>*extra_data</literal>, then store whatever it wants to into the individual pointers. The variable is initialized to NULL before call, so this argument can simply be ignored by operator classes that do not require extra data. If <literal>*extra_data</literal> is set, the whole array is passed to the <function>consistent</function> method, and the appropriate element to the <function>comparePartial</function> method."
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:196(function) 
msgid "bool consistent(bool check[], StrategyNumber n, Datum query, int32 nkeys, Pointer extra_data[], bool *recheck, Datum queryKeys[], bool nullFlags[])"
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:200(para) 
msgid "Returns TRUE if an indexed item satisfies the query operator with strategy number <literal>n</literal> (or might satisfy it, if the recheck indication is returned). This function does not have direct access to the indexed item's value, since <acronym>GIN</acronym> does not store items explicitly. Rather, what is available is knowledge about which key values extracted from the query appear in a given indexed item. The <literal>check</literal> array has length <literal>nkeys</literal>, which is the same as the number of keys previously returned by <function>extractQuery</function> for this <literal>query</literal> datum. Each element of the <literal>check</literal> array is TRUE if the indexed item contains the corresponding query key, ie, if (check[i] == TRUE) the i-th key of the <function>extractQuery</function> result array is present in the indexed item. The original <literal>query</literal> datum is passed in case the <function>consistent</function> method needs to consult it, and so are the <literal>queryKeys[]</literal> and <literal>nullFlags[]</literal> arrays previously returned by <function>extractQuery</function>. <literal>extra_data</literal> is the extra-data array returned by <function>extractQuery</function>, or NULL if none."
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:222(para) 
msgid "When <function>extractQuery</function> returns a null key in <literal>queryKeys[]</literal>, the corresponding <literal>check[]</literal> element is TRUE if the indexed item contains a null key; that is, the semantics of <literal>check[]</literal> are like <literal>IS NOT DISTINCT FROM</literal>. The <function>consistent</function> function can examine the corresponding <literal>nullFlags[]</literal> element if it needs to tell the difference between a regular value match and a null match."
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:232(para) 
msgid "On success, <literal>*recheck</literal> should be set to TRUE if the heap tuple needs to be rechecked against the query operator, or FALSE if the index test is exact. That is, a FALSE return value guarantees that the heap tuple does not match the query; a TRUE return value with <literal>*recheck</literal> set to FALSE guarantees that the heap tuple does match the query; and a TRUE return value with <literal>*recheck</literal> set to TRUE means that the heap tuple might match the query, so it needs to be fetched and rechecked by evaluating the query operator directly against the originally indexed item."
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:252(function) 
msgid "int comparePartial(Datum partial_key, Datum key, StrategyNumber n, Pointer extra_data)"
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:255(para) 
msgid "Compare a partial-match query key to an index key. Returns an integer whose sign indicates the result: less than zero means the index key does not match the query, but the index scan should continue; zero means that the index key does match the query; greater than zero indicates that the index scan should stop because no more matches are possible. The strategy number <literal>n</literal> of the operator that generated the partial match query is provided, in case its semantics are needed to determine when to end the scan. Also, <literal>extra_data</literal> is the corresponding element of the extra-data array made by <function>extractQuery</function>, or NULL if none. Null keys are never passed to this function."
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:84(para) 
msgid "The four methods that an operator class for <acronym>GIN</acronym> must provide are: <placeholder-1/> Optionally, an operator class for <acronym>GIN</acronym> can supply a fifth method: <placeholder-2/>"
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:273(para) 
msgid "To support <quote>partial match</quote> queries, an operator class must provide the <function>comparePartial</function> method, and its <function>extractQuery</function> method must set the <literal>pmatch</literal> parameter when a partial-match query is encountered. See <xref linkend=\"gin-partial-match\"/> for details."
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:281(para) 
msgid "The actual data types of the various <literal>Datum</literal> values mentioned above vary depending on the operator class. The item values passed to <function>extractValue</function> are always of the operator class's input type, and all key values must be of the class's <literal>STORAGE</literal> type. The type of the <literal>query</literal> argument passed to <function>extractQuery</function> and <function>consistent</function> is whatever is specified as the right-hand input type of the class member operator identified by the strategy number. This need not be the same as the item type, so long as key values of the correct type can be extracted from it."
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:296(title) 
msgid "Implementation"
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:298(para) 
msgid "Internally, a <acronym>GIN</acronym> index contains a B-tree index constructed over keys, where each key is an element of one or more indexed items (a member of an array, for example) and where each tuple in a leaf page contains either a pointer to a B-tree of heap pointers (a <quote>posting tree</quote>), or a simple list of heap pointers (a <quote>posting list</quote>) when the list is small enough to fit into a single index tuple along with the key value."
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:308(para) 
msgid "As of <productname>PostgreSQL</productname> 9.1, NULL key values can be included in the index. Also, placeholder NULLs are included in the index for indexed items that are NULL or contain no keys according to <function>extractValue</function>. This allows searches that should find empty items to do so."
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:316(para) 
msgid "Multi-column <acronym>GIN</acronym> indexes are implemented by building a single B-tree over composite values (column number, key value). The key values for different columns can be of different types."
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:323(title) 
msgid "GIN Fast Update Technique"
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:325(para) 
msgid "Updating a <acronym>GIN</acronym> index tends to be slow because of the intrinsic nature of inverted indexes: inserting or updating one heap row can cause many inserts into the index (one for each key extracted from the indexed item). As of <productname>PostgreSQL</productname> 8.4, <acronym>GIN</acronym> is capable of postponing much of this work by inserting new tuples into a temporary, unsorted list of pending entries. When the table is vacuumed, or if the pending list becomes too large (larger than <xref linkend=\"guc-work-mem\"/>), the entries are moved to the main <acronym>GIN</acronym> data structure using the same bulk insert techniques used during initial index creation. This greatly improves <acronym>GIN</acronym> index update speed, even counting the additional vacuum overhead. Moreover the overhead work can be done by a background process instead of in foreground query processing."
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:341(para) 
msgid "The main disadvantage of this approach is that searches must scan the list of pending entries in addition to searching the regular index, and so a large list of pending entries will slow searches significantly. Another disadvantage is that, while most updates are fast, an update that causes the pending list to become <quote>too large</quote> will incur an immediate cleanup cycle and thus be much slower than other updates. Proper use of autovacuum can minimize both of these problems."
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:351(para) 
msgid "If consistent response time is more important than update speed, use of pending entries can be disabled by turning off the <literal>FASTUPDATE</literal> storage parameter for a <acronym>GIN</acronym> index. See <xref linkend=\"sql-createindex\"/> for details."
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:361(title) 
msgid "Partial Match Algorithm"
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:363(para) 
msgid "GIN can support <quote>partial match</quote> queries, in which the query does not determine an exact match for one or more keys, but the possible matches fall within a reasonably narrow range of key values (within the key sorting order determined by the <function>compare</function> support method). The <function>extractQuery</function> method, instead of returning a key value to be matched exactly, returns a key value that is the lower bound of the range to be searched, and sets the <literal>pmatch</literal> flag true. The key range is then scanned using the <function>comparePartial</function> method. <function>comparePartial</function> must return zero for a matching index key, less than zero for a non-match that is still within the range to be searched, or greater than zero if the index key is past the range that could match."
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:382(title) 
msgid "GIN Tips and Tricks"
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:386(term) 
msgid "Create vs. insert"
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:388(para) 
msgid "Insertion into a <acronym>GIN</acronym> index can be slow due to the likelihood of many keys being inserted for each item. So, for bulk insertions into a table it is advisable to drop the GIN index and recreate it after finishing bulk insertion."
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:395(para) 
msgid "As of <productname>PostgreSQL</productname> 8.4, this advice is less necessary since delayed indexing is used (see <xref linkend=\"gin-fast-update\"/> for details). But for very large updates it may still be best to drop and recreate the index."
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:407(para) 
msgid "Build time for a <acronym>GIN</acronym> index is very sensitive to the <varname>maintenance_work_mem</varname> setting; it doesn't pay to skimp on work memory during index creation."
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:418(para) 
msgid "During a series of insertions into an existing <acronym>GIN</acronym> index that has <literal>FASTUPDATE</literal> enabled, the system will clean up the pending-entry list whenever the list grows larger than <varname>work_mem</varname>. To avoid fluctuations in observed response time, it's desirable to have pending-list cleanup occur in the background (i.e., via autovacuum). Foreground cleanup operations can be avoided by increasing <varname>work_mem</varname> or making autovacuum more aggressive. However, enlarging <varname>work_mem</varname> means that if a foreground cleanup does occur, it will take even longer."
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:435(para) 
msgid "The primary goal of developing <acronym>GIN</acronym> indexes was to create support for highly scalable full-text search in <productname>PostgreSQL</productname>, and there are often situations when a full-text search returns a very large set of results. Moreover, this often happens when the query contains very frequent words, so that the large result set is not even useful. Since reading many tuples from the disk and sorting them could take a lot of time, this is unacceptable for production. (Note that the index search itself is very fast.)"
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:446(para) 
msgid "To facilitate controlled execution of such queries, <acronym>GIN</acronym> has a configurable soft upper limit on the number of rows returned: the <varname>gin_fuzzy_search_limit</varname> configuration parameter. It is set to 0 (meaning no limit) by default. If a non-zero limit is set, then the returned set is a subset of the whole result set, chosen at random."
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:455(para) 
msgid "<quote>Soft</quote> means that the actual number of returned results could differ somewhat from the specified limit, depending on the query and the quality of the system's random number generator."
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:460(para) 
msgid "From experience, values in the thousands (e.g., 5000 — 20000) work well."
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:471(title) 
msgid "Limitations"
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:473(para) 
msgid "<acronym>GIN</acronym> assumes that indexable operators are strict. This means that <function>extractValue</function> will not be called at all on a NULL item value (instead, a placeholder index entry is created automatically), and <function>extractQuery</function> will not be called on a NULL query value either (instead, the query is presumed to be unsatisfiable). Note however that NULL key values contained within a non-null composite item or query value are supported."
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:485(title) 
msgid "Examples"
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:498(filename) 
msgid "btree_gin"
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:500(para) 
msgid "B-tree equivalent functionality for several data types"
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:505(filename) 
msgid "hstore"
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:507(para) 
msgid "Module for storing (key, value) pairs"
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:512(filename) 
msgid "intarray"
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:514(para) 
msgid "Enhanced support for <type>int[]</type>"
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:519(filename) 
msgid "pg_trgm"
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:521(para) 
msgid "Text similarity using trigram matching"
msgstr ""

#: /tmp/cicero-yKZa/gin.xml:487(para) 
msgid "The <productname>PostgreSQL</productname> source distribution includes <acronym>GIN</acronym> operator classes for <type>tsvector</type> and for one-dimensional arrays of all internal types. Prefix searching in <type>tsvector</type> is implemented using the <acronym>GIN</acronym> partial match feature. The following <filename>contrib</filename> modules also contain <acronym>GIN</acronym> operator classes: <placeholder-1/>"
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2.
#: /tmp/cicero-yKZa/gin.xml:0(None) 
msgid "translator-credits"
msgstr ""

