msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2011-08-29 06:59+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: /tmp/cicero-qMnb/tablefunc.xml:6(title) /tmp/cicero-qMnb/tablefunc.xml:9(primary) 
msgid "tablefunc"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:12(para) 
msgid "The <filename>tablefunc</filename> module includes various functions that return tables (that is, multiple rows). These functions are useful both in their own right and as examples of how to write C functions that return multiple rows."
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:20(title) 
msgid "Functions Provided"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:22(para) 
msgid "<xref linkend=\"tablefunc-functions\"/> shows the functions provided by the <filename>tablefunc</filename> module."
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:28(title) 
msgid "<filename>tablefunc</filename> Functions"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:32(entry) 
msgid "Function"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:33(entry) 
msgid "Returns"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:34(entry) /tmp/cicero-qMnb/tablefunc.xml:632(entry) 
msgid "Description"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:39(function) 
msgid "normal_rand(int numvals, float8 mean, float8 stddev)"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:40(type) 
msgid "setof float8"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:41(entry) 
msgid "Produces a set of normally distributed random values"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:46(function) 
msgid "crosstab(text sql)"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:47(type) /tmp/cicero-qMnb/tablefunc.xml:68(type) /tmp/cicero-qMnb/tablefunc.xml:76(type) /tmp/cicero-qMnb/tablefunc.xml:92(type) 
msgid "setof record"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:49(quote) /tmp/cicero-qMnb/tablefunc.xml:59(quote) /tmp/cicero-qMnb/tablefunc.xml:70(quote) 
msgid "pivot table"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:50(replaceable) /tmp/cicero-qMnb/tablefunc.xml:51(replaceable) /tmp/cicero-qMnb/tablefunc.xml:56(replaceable) /tmp/cicero-qMnb/tablefunc.xml:57(replaceable) /tmp/cicero-qMnb/tablefunc.xml:60(replaceable) /tmp/cicero-qMnb/tablefunc.xml:63(replaceable) /tmp/cicero-qMnb/tablefunc.xml:292(replaceable) /tmp/cicero-qMnb/tablefunc.xml:295(replaceable) 
msgid "N"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:48(entry) 
msgid "Produces a <placeholder-1/> containing row names plus <placeholder-2/> value columns, where <placeholder-3/> is determined by the row type specified in the calling query"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:56(function) 
msgid "crosstab<placeholder-1/>(text sql)"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:57(type) 
msgid "setof table_crosstab_<placeholder-1/>"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:61(function) 
msgid "crosstab2"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:61(function) 
msgid "crosstab3"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:62(function) 
msgid "crosstab4"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:63(function) 
msgid "crosstab<placeholder-1/>"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:58(entry) 
msgid "Produces a <placeholder-1/> containing row names plus <placeholder-2/> value columns. <placeholder-3/>, <placeholder-4/>, and <placeholder-5/> are predefined, but you can create additional <placeholder-6/> functions as described below"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:67(function) 
msgid "crosstab(text source_sql, text category_sql)"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:69(entry) 
msgid "Produces a <placeholder-1/> with the value columns specified by a second query"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:75(function) 
msgid "crosstab(text sql, int N)"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:78(para) 
msgid "Obsolete version of <function>crosstab(text)</function>. The parameter <replaceable>N</replaceable> is now ignored, since the number of value columns is always determined by the calling query"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:86(function) 
msgid "connectby(text relname, text keyid_fld, text parent_keyid_fld [, text orderby_fld ], text start_with, int max_depth [, text branch_delim ])"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:93(entry) 
msgid "Produces a representation of a hierarchical tree structure"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:102(function) 
msgid "normal_rand"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:104(synopsis) 
#, no-wrap
msgid "\nnormal_rand(int numvals, float8 mean, float8 stddev) returns setof float8\n"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:108(para) 
msgid "<function>normal_rand</function> produces a set of normally distributed random values (Gaussian distribution)."
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:113(para) 
msgid "<parameter>numvals</parameter> is the number of values to be returned from the function. <parameter>mean</parameter> is the mean of the normal distribution of values and <parameter>stddev</parameter> is the standard deviation of the normal distribution of values."
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:120(para) 
msgid "For example, this call requests 1000 values with a mean of 5 and a standard deviation of 3:"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:125(screen) 
#, no-wrap
msgid "\ntest=# SELECT * FROM normal_rand(1000, 5, 3);\n     normal_rand\n----------------------\n     1.56556322244898\n     9.10040991424657\n     5.36957140345079\n   -0.369151492880995\n    0.283600703686639\n       .\n       .\n       .\n     4.82992125404908\n     9.71308014517282\n     2.49639286969028\n(1000 rows)\n"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:145(function) 
msgid "crosstab(text)"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:147(synopsis) 
#, no-wrap
msgid "\ncrosstab(text sql)\ncrosstab(text sql, int N)\n"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:156(programlisting) 
#, no-wrap
msgid "\nrow1    val11\nrow1    val12\nrow1    val13\n...\nrow2    val21\nrow2    val22\nrow2    val23\n...\n"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:167(programlisting) 
#, no-wrap
msgid "\nrow1    val11   val12   val13   ...\nrow2    val21   val22   val23   ...\n...\n"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:152(para) 
msgid "The <function>crosstab</function> function is used to produce <quote>pivot</quote> displays, wherein data is listed across the page rather than down. For example, we might have data like <placeholder-1/> which we wish to display like <placeholder-2/> The <function>crosstab</function> function takes a text parameter that is a SQL query producing raw data formatted in the first way, and produces a table formatted in the second way."
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:177(para) 
msgid "The <parameter>sql</parameter> parameter is a SQL statement that produces the source set of data. This statement must return one <structfield>row_name</structfield> column, one <structfield>category</structfield> column, and one <structfield>value</structfield> column. <parameter>N</parameter> is an obsolete parameter, ignored if supplied (formerly this had to match the number of output value columns, but now that is determined by the calling query)."
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:190(programlisting) 
#, no-wrap
msgid "\n row_name    cat    value\n----------+-------+-------\n  row1      cat1    val1\n  row1      cat2    val2\n  row1      cat3    val3\n  row1      cat4    val4\n  row2      cat1    val5\n  row2      cat2    val6\n  row2      cat3    val7\n  row2      cat4    val8\n"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:188(para) 
msgid "For example, the provided query might produce a set something like: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:209(programlisting) 
#, no-wrap
msgid "\nSELECT * FROM crosstab('...') AS ct(row_name text, category_1 text, category_2 text);\n"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:213(programlisting) 
#, no-wrap
msgid "\n           &lt;== value  columns  ==&gt;\n row_name   category_1   category_2\n----------+------------+------------\n  row1        val1         val2\n  row2        val5         val6\n"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:204(para) 
msgid "The <function>crosstab</function> function is declared to return <type>setof record</type>, so the actual names and types of the output columns must be defined in the <literal>FROM</literal> clause of the calling <command>SELECT</command> statement, for example: <placeholder-1/> This example produces a set something like: <placeholder-2/>"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:222(para) 
msgid "The <literal>FROM</literal> clause must define the output as one <structfield>row_name</structfield> column (of the same data type as the first result column of the SQL query) followed by N <structfield>value</structfield> columns (all of the same data type as the third result column of the SQL query). You can set up as many output value columns as you wish. The names of the output columns are up to you."
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:231(para) 
msgid "The <function>crosstab</function> function produces one output row for each consecutive group of input rows with the same <structfield>row_name</structfield> value. It fills the output <structfield>value</structfield> columns, left to right, with the <structfield>value</structfield> fields from these rows. If there are fewer rows in a group than there are output <structfield>value</structfield> columns, the extra output columns are filled with nulls; if there are more rows, the extra input rows are skipped."
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:242(para) 
msgid "In practice the SQL query should always specify <literal>ORDER BY 1,2</literal> to ensure that the input rows are properly ordered, that is, values with the same <structfield>row_name</structfield> are brought together and correctly ordered within the row. Notice that <function>crosstab</function> itself does not pay any attention to the second column of the query result; it's just there to be ordered by, to control the order in which the third-column values appear across the page."
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:254(programlisting) 
#, no-wrap
msgid "\nCREATE TABLE ct(id SERIAL, rowid TEXT, attribute TEXT, value TEXT);\nINSERT INTO ct(rowid, attribute, value) VALUES('test1','att1','val1');\nINSERT INTO ct(rowid, attribute, value) VALUES('test1','att2','val2');\nINSERT INTO ct(rowid, attribute, value) VALUES('test1','att3','val3');\nINSERT INTO ct(rowid, attribute, value) VALUES('test1','att4','val4');\nINSERT INTO ct(rowid, attribute, value) VALUES('test2','att1','val5');\nINSERT INTO ct(rowid, attribute, value) VALUES('test2','att2','val6');\nINSERT INTO ct(rowid, attribute, value) VALUES('test2','att3','val7');\nINSERT INTO ct(rowid, attribute, value) VALUES('test2','att4','val8');\n\nSELECT *\nFROM crosstab(\n  'select rowid, attribute, value\n   from ct\n   where attribute = ''att2'' or attribute = ''att3''\n   order by 1,2')\nAS ct(row_name text, category_1 text, category_2 text, category_3 text);\n\n row_name | category_1 | category_2 | category_3\n----------+------------+------------+------------\n test1    | val2       | val3       |\n test2    | val6       | val7       |\n(2 rows)\n"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:252(para) 
msgid "Here is a complete example: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:281(para) 
msgid "You can avoid always having to write out a <literal>FROM</literal> clause to define the output columns, by setting up a custom crosstab function that has the desired output row type wired into its definition. This is described in the next section. Another possibility is to embed the required <literal>FROM</literal> clause in a view definition."
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:292(function) 
msgid "crosstab<placeholder-1/>(text)"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:294(synopsis) 
#, no-wrap
msgid "\ncrosstab<placeholder-1/>(text sql)\n"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:298(para) 
msgid "The <function>crosstab<replaceable>N</replaceable></function> functions are examples of how to set up custom wrappers for the general <function>crosstab</function> function, so that you need not write out column names and types in the calling <command>SELECT</command> query. The <filename>tablefunc</filename> module includes <function>crosstab2</function>, <function>crosstab3</function>, and <function>crosstab4</function>, whose output row types are defined as"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:307(programlisting) 
#, no-wrap
msgid "\nCREATE TYPE tablefunc_crosstab_N AS (\n    row_name TEXT,\n    category_1 TEXT,\n    category_2 TEXT,\n        .\n        .\n        .\n    category_N TEXT\n);\n"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:319(para) 
msgid "Thus, these functions can be used directly when the input query produces <structfield>row_name</structfield> and <structfield>value</structfield> columns of type <type>text</type>, and you want 2, 3, or 4 output values columns. In all other ways they behave exactly as described above for the general <function>crosstab</function> function."
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:330(programlisting) 
#, no-wrap
msgid "\nSELECT *\nFROM crosstab3(\n  'select rowid, attribute, value\n   from ct\n   where attribute = ''att2'' or attribute = ''att3''\n   order by 1,2');\n"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:327(para) 
msgid "For instance, the example given in the previous section would also work as <placeholder-1/>"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:358(programlisting) 
#, no-wrap
msgid "\nCREATE TYPE my_crosstab_float8_5_cols AS (\n    my_row_name text,\n    my_category_1 float8,\n    my_category_2 float8,\n    my_category_3 float8,\n    my_category_4 float8,\n    my_category_5 float8\n);\n\nCREATE OR REPLACE FUNCTION crosstab_float8_5_cols(text)\n    RETURNS setof my_crosstab_float8_5_cols\n    AS '$libdir/tablefunc','crosstab' LANGUAGE C STABLE STRICT;\n"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:348(para) 
msgid "Create a composite type describing the desired output columns, similar to the examples in <filename>contrib/tablefunc/tablefunc--1.0.sql</filename>. Then define a unique function name accepting one <type>text</type> parameter and returning <type>setof your_type_name</type>, but linking to the same underlying <function>crosstab</function> C function. For example, if your source data produces row names that are <type>text</type>, and values that are <type>float8</type>, and you want 5 value columns: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:379(programlisting) 
#, no-wrap
msgid "\nCREATE OR REPLACE FUNCTION crosstab_float8_5_cols(\n    IN text,\n    OUT my_row_name text,\n    OUT my_category_1 float8,\n    OUT my_category_2 float8,\n    OUT my_category_3 float8,\n    OUT my_category_4 float8,\n    OUT my_category_5 float8)\n  RETURNS setof record\n  AS '$libdir/tablefunc','crosstab' LANGUAGE C STABLE STRICT;\n"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:376(para) 
msgid "Use <literal>OUT</literal> parameters to define the return type implicitly. The same example could also be done this way: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:340(para) 
msgid "These functions are provided mostly for illustration purposes. You can create your own return types and functions based on the underlying <function>crosstab()</function> function. There are two ways to do it: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:399(function) 
msgid "crosstab(text, text)"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:401(synopsis) 
#, no-wrap
msgid "\ncrosstab(text source_sql, text category_sql)\n"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:405(para) 
msgid "The main limitation of the single-parameter form of <function>crosstab</function> is that it treats all values in a group alike, inserting each value into the first available column. If you want the value columns to correspond to specific categories of data, and some groups might not have data for some of the categories, that doesn't work well. The two-parameter form of <function>crosstab</function> handles this case by providing an explicit list of the categories corresponding to the output columns."
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:416(para) 
msgid "<parameter>source_sql</parameter> is a SQL statement that produces the source set of data. This statement must return one <structfield>row_name</structfield> column, one <structfield>category</structfield> column, and one <structfield>value</structfield> column. It may also have one or more <quote>extra</quote> columns. The <structfield>row_name</structfield> column must be first. The <structfield>category</structfield> and <structfield>value</structfield> columns must be the last two columns, in that order. Any columns between <structfield>row_name</structfield> and <structfield>category</structfield> are treated as <quote>extra</quote>. The <quote>extra</quote> columns are expected to be the same for all rows with the same <structfield>row_name</structfield> value."
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:435(programlisting) 
#, no-wrap
msgid "\nSELECT row_name, extra_col, cat, value FROM foo ORDER BY 1;\n\n row_name    extra_col   cat    value\n----------+------------+-----+---------\n  row1         extra1    cat1    val1\n  row1         extra1    cat2    val2\n  row1         extra1    cat4    val4\n  row2         extra2    cat1    val5\n  row2         extra2    cat2    val6\n  row2         extra2    cat3    val7\n  row2         extra2    cat4    val8\n"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:432(para) 
msgid "For example, <parameter>source_sql</parameter> might produce a set something like: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:457(programlisting) 
#, no-wrap
msgid "\nSELECT DISTINCT cat FROM foo ORDER BY 1;\n    cat\n  -------\n    cat1\n    cat2\n    cat3\n    cat4\n"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:450(para) 
msgid "<parameter>category_sql</parameter> is a SQL statement that produces the set of categories. This statement must return only one column. It must produce at least one row, or an error will be generated. Also, it must not produce duplicate values, or an error will be generated. <parameter>category_sql</parameter> might be something like: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:474(programlisting) 
#, no-wrap
msgid "\nSELECT * FROM crosstab('...', '...')\n    AS ct(row_name text, extra text, cat1 text, cat2 text, cat3 text, cat4 text);\n"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:468(para) 
msgid "The <function>crosstab</function> function is declared to return <type>setof record</type>, so the actual names and types of the output columns must be defined in the <literal>FROM</literal> clause of the calling <command>SELECT</command> statement, for example: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:482(programlisting) 
#, no-wrap
msgid "\n                  &lt;==  value  columns   ==&gt;\nrow_name   extra   cat1   cat2   cat3   cat4\n---------+-------+------+------+------+------\n  row1     extra1  val1   val2          val4\n  row2     extra2  val5   val6   val7   val8\n"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:480(para) 
msgid "This will produce a result something like: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:491(para) 
msgid "The <literal>FROM</literal> clause must define the proper number of output columns of the proper data types. If there are <replaceable>N</replaceable> columns in the <parameter>source_sql</parameter> query's result, the first <replaceable>N</replaceable>-2 of them must match up with the first <replaceable>N</replaceable>-2 output columns. The remaining output columns must have the type of the last column of the <parameter>source_sql</parameter> query's result, and there must be exactly as many of them as there are rows in the <parameter>category_sql</parameter> query's result."
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:502(para) 
msgid "The <function>crosstab</function> function produces one output row for each consecutive group of input rows with the same <structfield>row_name</structfield> value. The output <structfield>row_name</structfield> column, plus any <quote>extra</quote> columns, are copied from the first row of the group. The output <structfield>value</structfield> columns are filled with the <structfield>value</structfield> fields from rows having matching <structfield>category</structfield> values. If a row's <structfield>category</structfield> does not match any output of the <parameter>category_sql</parameter> query, its <structfield>value</structfield> is ignored. Output columns whose matching category is not present in any input row of the group are filled with nulls."
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:517(para) 
msgid "In practice the <parameter>source_sql</parameter> query should always specify <literal>ORDER BY 1</literal> to ensure that values with the same <structfield>row_name</structfield> are brought together. However, ordering of the categories within a group is not important. Also, it is essential to be sure that the order of the <parameter>category_sql</parameter> query's output matches the specified output column order."
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:529(programlisting) 
#, no-wrap
msgid "\ncreate table sales(year int, month int, qty int);\ninsert into sales values(2007, 1, 1000);\ninsert into sales values(2007, 2, 1500);\ninsert into sales values(2007, 7, 500);\ninsert into sales values(2007, 11, 1500);\ninsert into sales values(2007, 12, 2000);\ninsert into sales values(2008, 1, 1000);\n\nselect * from crosstab(\n  'select year, month, qty from sales order by 1',\n  'select m from generate_series(1,12) m'\n) as (\n  year int,\n  \"Jan\" int,\n  \"Feb\" int,\n  \"Mar\" int,\n  \"Apr\" int,\n  \"May\" int,\n  \"Jun\" int,\n  \"Jul\" int,\n  \"Aug\" int,\n  \"Sep\" int,\n  \"Oct\" int,\n  \"Nov\" int,\n  \"Dec\" int\n);\n year | Jan  | Feb  | Mar | Apr | May | Jun | Jul | Aug | Sep | Oct | Nov  | Dec\n------+------+------+-----+-----+-----+-----+-----+-----+-----+-----+------+------\n 2007 | 1000 | 1500 |     |     |     |     | 500 |     |     |     | 1500 | 2000\n 2008 | 1000 |      |     |     |     |     |     |     |     |     |      |\n(2 rows)\n"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:563(programlisting) 
#, no-wrap
msgid "\nCREATE TABLE cth(rowid text, rowdt timestamp, attribute text, val text);\nINSERT INTO cth VALUES('test1','01 March 2003','temperature','42');\nINSERT INTO cth VALUES('test1','01 March 2003','test_result','PASS');\nINSERT INTO cth VALUES('test1','01 March 2003','volts','2.6987');\nINSERT INTO cth VALUES('test2','02 March 2003','temperature','53');\nINSERT INTO cth VALUES('test2','02 March 2003','test_result','FAIL');\nINSERT INTO cth VALUES('test2','02 March 2003','test_startdate','01 March 2003');\nINSERT INTO cth VALUES('test2','02 March 2003','volts','3.1234');\n\nSELECT * FROM crosstab\n(\n  'SELECT rowid, rowdt, attribute, val FROM cth ORDER BY 1',\n  'SELECT DISTINCT attribute FROM cth ORDER BY 1'\n)\nAS\n(\n       rowid text,\n       rowdt timestamp,\n       temperature int4,\n       test_result text,\n       test_startdate timestamp,\n       volts float8\n);\n rowid |          rowdt           | temperature | test_result |      test_startdate      | volts\n-------+--------------------------+-------------+-------------+--------------------------+--------\n test1 | Sat Mar 01 00:00:00 2003 |          42 | PASS        |                          | 2.6987\n test2 | Sun Mar 02 00:00:00 2003 |          53 | FAIL        | Sat Mar 01 00:00:00 2003 | 3.1234\n(2 rows)\n"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:527(para) 
msgid "Here are two complete examples: <placeholder-1/><placeholder-2/>"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:595(para) 
msgid "You can create predefined functions to avoid having to write out the result column names and types in each query. See the examples in the previous section. The underlying C function for this form of <function>crosstab</function> is named <literal>crosstab_hash</literal>."
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:605(function) 
msgid "connectby"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:607(synopsis) 
#, no-wrap
msgid "\nconnectby(text relname, text keyid_fld, text parent_keyid_fld\n          [, text orderby_fld ], text start_with, int max_depth\n          [, text branch_delim ])\n"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:613(para) 
msgid "The <function>connectby</function> function produces a display of hierarchical data that is stored in a table. The table must have a key field that uniquely identifies rows, and a parent-key field that references the parent (if any) of each row. <function>connectby</function> can display the sub-tree descending from any row."
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:621(para) 
msgid "<xref linkend=\"tablefunc-connectby-parameters\"/> explains the parameters."
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:627(title) 
msgid "<function>connectby</function> Parameters"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:631(entry) 
msgid "Parameter"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:637(parameter) 
msgid "relname"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:638(entry) 
msgid "Name of the source relation"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:641(parameter) 
msgid "keyid_fld"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:642(entry) 
msgid "Name of the key field"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:645(parameter) 
msgid "parent_keyid_fld"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:646(entry) 
msgid "Name of the parent-key field"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:649(parameter) 
msgid "orderby_fld"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:650(entry) 
msgid "Name of the field to order siblings by (optional)"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:653(parameter) 
msgid "start_with"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:654(entry) 
msgid "Key value of the row to start at"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:657(parameter) 
msgid "max_depth"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:658(entry) 
msgid "Maximum depth to descend to, or zero for unlimited depth"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:661(parameter) 
msgid "branch_delim"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:662(entry) 
msgid "String to separate keys with in branch output (optional)"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:668(para) 
msgid "The key and parent-key fields can be any data type, but they must be the same type. Note that the <parameter>start_with</parameter> value must be entered as a text string, regardless of the type of the key field."
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:674(para) 
msgid "The <function>connectby</function> function is declared to return <type>setof record</type>, so the actual names and types of the output columns must be defined in the <literal>FROM</literal> clause of the calling <command>SELECT</command> statement, for example:"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:681(programlisting) 
#, no-wrap
msgid "\nSELECT * FROM connectby('connectby_tree', 'keyid', 'parent_keyid', 'pos', 'row2', 0, '~')\n    AS t(keyid text, parent_keyid text, level int, branch text, pos int);\n"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:686(para) 
msgid "The first two output columns are used for the current row's key and its parent row's key; they must match the type of the table's key field. The third output column is the depth in the tree and must be of type <type>integer</type>. If a <parameter>branch_delim</parameter> parameter was given, the next output column is the branch display and must be of type <type>text</type>. Finally, if an <parameter>orderby_fld</parameter> parameter was given, the last output column is a serial number, and must be of type <type>integer</type>."
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:697(para) 
msgid "The <quote>branch</quote> output column shows the path of keys taken to reach the current row. The keys are separated by the specified <parameter>branch_delim</parameter> string. If no branch display is wanted, omit both the <parameter>branch_delim</parameter> parameter and the branch column in the output column list."
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:705(para) 
msgid "If the ordering of siblings of the same parent is important, include the <parameter>orderby_fld</parameter> parameter to specify which field to order siblings by. This field can be of any sortable data type. The output column list must include a final integer serial-number column, if and only if <parameter>orderby_fld</parameter> is specified."
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:714(para) 
msgid "The parameters representing table and field names are copied as-is into the SQL queries that <function>connectby</function> generates internally. Therefore, include double quotes if the names are mixed-case or contain special characters. You may also need to schema-qualify the table name."
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:721(para) 
msgid "In large tables, performance will be poor unless there is an index on the parent-key field."
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:726(para) 
msgid "It is important that the <parameter>branch_delim</parameter> string not appear in any key values, else <function>connectby</function> may incorrectly report an infinite-recursion error. Note that if <parameter>branch_delim</parameter> is not provided, a default value of <literal>~</literal> is used for recursion detection purposes."
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:737(programlisting) 
#, no-wrap
msgid "\nCREATE TABLE connectby_tree(keyid text, parent_keyid text, pos int);\n\nINSERT INTO connectby_tree VALUES('row1',NULL, 0);\nINSERT INTO connectby_tree VALUES('row2','row1', 0);\nINSERT INTO connectby_tree VALUES('row3','row1', 0);\nINSERT INTO connectby_tree VALUES('row4','row2', 1);\nINSERT INTO connectby_tree VALUES('row5','row2', 0);\nINSERT INTO connectby_tree VALUES('row6','row4', 0);\nINSERT INTO connectby_tree VALUES('row7','row3', 0);\nINSERT INTO connectby_tree VALUES('row8','row6', 0);\nINSERT INTO connectby_tree VALUES('row9','row5', 0);\n\n-- with branch, without orderby_fld (order of results is not guaranteed)\nSELECT * FROM connectby('connectby_tree', 'keyid', 'parent_keyid', 'row2', 0, '~')\n AS t(keyid text, parent_keyid text, level int, branch text);\n keyid | parent_keyid | level |       branch\n-------+--------------+-------+---------------------\n row2  |              |     0 | row2\n row4  | row2         |     1 | row2~row4\n row6  | row4         |     2 | row2~row4~row6\n row8  | row6         |     3 | row2~row4~row6~row8\n row5  | row2         |     1 | row2~row5\n row9  | row5         |     2 | row2~row5~row9\n(6 rows)\n\n-- without branch, without orderby_fld (order of results is not guaranteed)\nSELECT * FROM connectby('connectby_tree', 'keyid', 'parent_keyid', 'row2', 0)\n AS t(keyid text, parent_keyid text, level int);\n keyid | parent_keyid | level\n-------+--------------+-------\n row2  |              |     0\n row4  | row2         |     1\n row6  | row4         |     2\n row8  | row6         |     3\n row5  | row2         |     1\n row9  | row5         |     2\n(6 rows)\n\n-- with branch, with orderby_fld (notice that row5 comes before row4)\nSELECT * FROM connectby('connectby_tree', 'keyid', 'parent_keyid', 'pos', 'row2', 0, '~')\n AS t(keyid text, parent_keyid text, level int, branch text, pos int);\n keyid | parent_keyid | level |       branch        | pos\n-------+--------------+-------+---------------------+-----\n row2  |              |     0 | row2                |   1\n row5  | row2         |     1 | row2~row5           |   2\n row9  | row5         |     2 | row2~row5~row9      |   3\n row4  | row2         |     1 | row2~row4           |   4\n row6  | row4         |     2 | row2~row4~row6      |   5\n row8  | row6         |     3 | row2~row4~row6~row8 |   6\n(6 rows)\n\n-- without branch, with orderby_fld (notice that row5 comes before row4)\nSELECT * FROM connectby('connectby_tree', 'keyid', 'parent_keyid', 'pos', 'row2', 0)\n AS t(keyid text, parent_keyid text, level int, pos int);\n keyid | parent_keyid | level | pos\n-------+--------------+-------+-----\n row2  |              |     0 |   1\n row5  | row2         |     1 |   2\n row9  | row5         |     2 |   3\n row4  | row2         |     1 |   4\n row6  | row4         |     2 |   5\n row8  | row6         |     3 |   6\n(6 rows)\n"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:735(para) 
msgid "Here is an example: <placeholder-1/>"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:808(title) 
msgid "Author"
msgstr ""

#: /tmp/cicero-qMnb/tablefunc.xml:810(para) 
msgid "Joe Conway"
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2.
#: /tmp/cicero-qMnb/tablefunc.xml:0(None) 
msgid "translator-credits"
msgstr ""

