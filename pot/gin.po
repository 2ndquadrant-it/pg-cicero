msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2011-05-26 12:14+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:5(title)
msgid "GIN Indexes"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:8(primary)
msgid "index"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:9(secondary)
msgid "GIN"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:13(title)
msgid "Introduction"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:15(para)
msgid "<acronym>GIN</acronym> stands for Generalized Inverted Index. It is an index structure storing a set of (key, posting list) pairs, where a <quote>posting list</quote> is a set of rows in which the key occurs. Each indexed value can contain many keys, so the same row ID can appear in multiple posting lists."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:23(para)
msgid "It is generalized in the sense that a <acronym>GIN</acronym> index does not need to be aware of the operation that it accelerates. Instead, it uses custom strategies defined for particular data types."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:29(para)
msgid "One advantage of <acronym>GIN</acronym> is that it allows the development of custom data types with the appropriate access methods, by an expert in the domain of the data type, rather than a database expert. This is much the same advantage as using <acronym>GiST</acronym>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:36(para)
msgid "The <acronym>GIN</acronym> implementation in <productname>PostgreSQL</productname> is primarily maintained by Teodor Sigaev and Oleg Bartunov. There is more information about <acronym>GIN</acronym> on their <ulink url=\"http://www.sai.msu.su/~megera/wiki/Gin\">website</ulink>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:46(title)
msgid "Extensibility"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:48(para)
msgid "The <acronym>GIN</acronym> interface has a high level of abstraction, requiring the access method implementer only to implement the semantics of the data type being accessed. The <acronym>GIN</acronym> layer itself takes care of concurrency, logging and searching the tree structure."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:55(para)
msgid "All it takes to get a <acronym>GIN</acronym> access method working is to implement four (or five) user-defined methods, which define the behavior of keys in the tree and the relationships between keys, indexed values, and indexable queries. In short, <acronym>GIN</acronym> combines extensibility with generality, code reuse, and a clean interface."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:69(function)
msgid "int compare(Datum a, Datum b)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:71(para)
msgid "Compares keys (not indexed values!) and returns an integer less than zero, zero, or greater than zero, indicating whether the first key is less than, equal to, or greater than the second."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:80(function)
msgid "Datum *extractValue(Datum inputValue, int32 *nkeys)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:82(para)
msgid "Returns an array of keys given a value to be indexed. The number of returned keys must be stored into <literal>*nkeys</literal>."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:90(function)
msgid "Datum *extractQuery(Datum query, int32 *nkeys, StrategyNumber n, bool **pmatch, Pointer **extra_data)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:93(para)
msgid "Returns an array of keys given a value to be queried; that is, <literal>query</literal> is the value on the right-hand side of an indexable operator whose left-hand side is the indexed column. <literal>n</literal> is the strategy number of the operator within the operator class (see <xref linkend=\"xindex-strategies\"/>). Often, <function>extractQuery</function> will need to consult <literal>n</literal> to determine the data type of <literal>query</literal> and the key values that need to be extracted. The number of returned keys must be stored into <literal>*nkeys</literal>. If the query contains no keys then <function>extractQuery</function> should store 0 or -1 into <literal>*nkeys</literal>, depending on the semantics of the operator. 0 means that every value matches the <literal>query</literal> and a full-index scan should be performed (but see <xref linkend=\"gin-limit\"/>). -1 means that nothing can match the <literal>query</literal>, and so the index scan can be skipped entirely. <literal>pmatch</literal> is an output argument for use when partial match is supported. To use it, <function>extractQuery</function> must allocate an array of <literal>*nkeys</literal> Booleans and store its address at <literal>*pmatch</literal>. Each element of the array should be set to TRUE if the corresponding key requires partial match, FALSE if not. If <literal>*pmatch</literal> is set to NULL then GIN assumes partial match is not required. The variable is initialized to NULL before call, so this argument can simply be ignored by operator classes that do not support partial match. <literal>extra_data</literal> is an output argument that allows <function>extractQuery</function> to pass additional data to the <function>consistent</function> and <function>comparePartial</function> methods. To use it, <function>extractQuery</function> must allocate an array of <literal>*nkeys</literal> Pointers and store its address at <literal>*extra_data</literal>, then store whatever it wants to into the individual pointers. The variable is initialized to NULL before call, so this argument can simply be ignored by operator classes that do not require extra data. If <literal>*extra_data</literal> is set, the whole array is passed to the <function>consistent</function> method, and the appropriate element to the <function>comparePartial</function> method."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:136(function)
msgid "bool consistent(bool check[], StrategyNumber n, Datum query, int32 nkeys, Pointer extra_data[], bool *recheck)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:139(para)
msgid "Returns TRUE if the indexed value satisfies the query operator with strategy number <literal>n</literal> (or might satisfy, if the recheck indication is returned). The <literal>check</literal> array has length <literal>nkeys</literal>, which is the same as the number of keys previously returned by <function>extractQuery</function> for this <literal>query</literal> datum. Each element of the <literal>check</literal> array is TRUE if the indexed value contains the corresponding query key, ie, if (check[i] == TRUE) the i-th key of the <function>extractQuery</function> result array is present in the indexed value. The original <literal>query</literal> datum (not the extracted key array!) is passed in case the <function>consistent</function> method needs to consult it. <literal>extra_data</literal> is the extra-data array returned by <function>extractQuery</function>, or NULL if none. On success, <literal>*recheck</literal> should be set to TRUE if the heap tuple needs to be rechecked against the query operator, or FALSE if the index test is exact."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:166(function)
msgid "int comparePartial(Datum partial_key, Datum key, StrategyNumber n, Pointer extra_data)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:169(para)
msgid "Compare a partial-match query to an index key. Returns an integer whose sign indicates the result: less than zero means the index key does not match the query, but the index scan should continue; zero means that the index key does match the query; greater than zero indicates that the index scan should stop because no more matches are possible. The strategy number <literal>n</literal> of the operator that generated the partial match query is provided, in case its semantics are needed to determine when to end the scan. Also, <literal>extra_data</literal> is the corresponding element of the extra-data array made by <function>extractQuery</function>, or NULL if none."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:63(para)
msgid "The four methods that an operator class for <acronym>GIN</acronym> must provide are: <placeholder-1/> Optionally, an operator class for <acronym>GIN</acronym> can supply a fifth method: <placeholder-2/>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:186(para)
msgid "To support <quote>partial match</quote> queries, an operator class must provide the <function>comparePartial</function> method, and its <function>extractQuery</function> method must set the <literal>pmatch</literal> parameter when a partial-match query is encountered. See <xref linkend=\"gin-partial-match\"/> for details."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:197(title)
msgid "Implementation"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:199(para)
msgid "Internally, a <acronym>GIN</acronym> index contains a B-tree index constructed over keys, where each key is an element of the indexed value (a member of an array, for example) and where each tuple in a leaf page is either a pointer to a B-tree over heap pointers (PT, posting tree), or a list of heap pointers (PL, posting list) if the list is small enough."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:208(title)
msgid "GIN fast update technique"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:210(para)
msgid "Updating a <acronym>GIN</acronym> index tends to be slow because of the intrinsic nature of inverted indexes: inserting or updating one heap row can cause many inserts into the index (one for each key extracted from the indexed value). As of <productname>PostgreSQL</productname> 8.4, <acronym>GIN</acronym> is capable of postponing much of this work by inserting new tuples into a temporary, unsorted list of pending entries. When the table is vacuumed, or if the pending list becomes too large (larger than <xref linkend=\"guc-work-mem\"/>), the entries are moved to the main <acronym>GIN</acronym> data structure using the same bulk insert techniques used during initial index creation. This greatly improves <acronym>GIN</acronym> index update speed, even counting the additional vacuum overhead. Moreover the overhead can be done by a background process instead of in foreground query processing."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:226(para)
msgid "The main disadvantage of this approach is that searches must scan the list of pending entries in addition to searching the regular index, and so a large list of pending entries will slow searches significantly. Another disadvantage is that, while most updates are fast, an update that causes the pending list to become <quote>too large</quote> will incur an immediate cleanup cycle and thus be much slower than other updates. Proper use of autovacuum can minimize both of these problems."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:236(para)
msgid "If consistent response time is more important than update speed, use of pending entries can be disabled by turning off the <literal>FASTUPDATE</literal> storage parameter for a <acronym>GIN</acronym> index. See <xref linkend=\"sql-createindex\"/> for details."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:246(title)
msgid "Partial match algorithm"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:248(para)
msgid "GIN can support <quote>partial match</quote> queries, in which the query does not determine an exact match for one or more keys, but the possible matches fall within a reasonably narrow range of key values (within the key sorting order determined by the <function>compare</function> support method). The <function>extractQuery</function> method, instead of returning a key value to be matched exactly, returns a key value that is the lower bound of the range to be searched, and sets the <literal>pmatch</literal> flag true. The key range is then searched using the <function>comparePartial</function> method. <function>comparePartial</function> must return zero for an actual match, less than zero for a non-match that is still within the range to be searched, or greater than zero if the index key is past the range that could match."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:267(title)
msgid "GIN tips and tricks"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:271(term)
msgid "Create vs insert"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:273(para)
msgid "Insertion into a <acronym>GIN</acronym> index can be slow due to the likelihood of many keys being inserted for each value. So, for bulk insertions into a table it is advisable to drop the GIN index and recreate it after finishing bulk insertion."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:280(para)
msgid "As of <productname>PostgreSQL</productname> 8.4, this advice is less necessary since delayed indexing is used (see <xref linkend=\"gin-fast-update\"/> for details). But for very large updates it may still be best to drop and recreate the index."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:292(para)
msgid "Build time for a <acronym>GIN</acronym> index is very sensitive to the <varname>maintenance_work_mem</varname> setting; it doesn't pay to skimp on work memory during index creation."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:303(para)
msgid "During a series of insertions into an existing <acronym>GIN</acronym> index that has <literal>FASTUPDATE</literal> enabled, the system will clean up the pending-entry list whenever it grows larger than <varname>work_mem</varname>. To avoid fluctuations in observed response time, it's desirable to have pending-list cleanup occur in the background (i.e., via autovacuum). Foreground cleanup operations can be avoided by increasing <varname>work_mem</varname> or making autovacuum more aggressive. However, enlarging <varname>work_mem</varname> means that if a foreground cleanup does occur, it will take even longer."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:320(para)
msgid "The primary goal of developing <acronym>GIN</acronym> indexes was to create support for highly scalable, full-text search in <productname>PostgreSQL</productname>, and there are often situations when a full-text search returns a very large set of results. Moreover, this often happens when the query contains very frequent words, so that the large result set is not even useful. Since reading many tuples from the disk and sorting them could take a lot of time, this is unacceptable for production. (Note that the index search itself is very fast.)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:331(para)
msgid "To facilitate controlled execution of such queries <acronym>GIN</acronym> has a configurable soft upper limit on the number of rows returned, the <varname>gin_fuzzy_search_limit</varname> configuration parameter. It is set to 0 (meaning no limit) by default. If a non-zero limit is set, then the returned set is a subset of the whole result set, chosen at random."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:340(para)
msgid "<quote>Soft</quote> means that the actual number of returned results could differ slightly from the specified limit, depending on the query and the quality of the system's random number generator."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:352(title)
msgid "Limitations"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:354(para)
msgid "<acronym>GIN</acronym> doesn't support full index scans. The reason for this is that <function>extractValue</function> is allowed to return zero keys, as for example might happen with an empty string or empty array. In such a case the indexed value will be unrepresented in the index. It is therefore impossible for <acronym>GIN</acronym> to guarantee that a scan of the index can find every row in the table."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:363(para)
msgid "Because of this limitation, when <function>extractQuery</function> returns <literal>nkeys = 0</literal> to indicate that all values match the query, <acronym>GIN</acronym> will emit an error. (If there are multiple ANDed indexable operators in the query, this happens only if they all return zero for <literal>nkeys</literal>.)"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:371(para)
msgid "It is possible for an operator class to circumvent the restriction against full index scan. To do that, <function>extractValue</function> must return at least one (possibly dummy) key for every indexed value, and <function>extractQuery</function> must convert an unrestricted search into a partial-match query that will scan the whole index. This is inefficient but might be necessary to avoid corner-case failures with operators such as <literal>LIKE</literal> or subset inclusion."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:381(para)
msgid "<acronym>GIN</acronym> assumes that indexable operators are strict. This means that <function>extractValue</function> will not be called at all on a NULL value (so the value will go unindexed), and <function>extractQuery</function> will not be called on a NULL comparison value either (instead, the query is presumed to be unmatchable)."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:389(para)
msgid "A possibly more serious limitation is that <acronym>GIN</acronym> cannot handle NULL keys — for example, an array containing a NULL cannot be handled except by ignoring the NULL."
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:397(title)
msgid "Examples"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:410(filename)
msgid "btree_gin"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:412(para)
msgid "B-tree equivalent functionality for several data types"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:417(filename)
msgid "hstore"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:419(para)
msgid "Module for storing (key, value) pairs"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:424(filename)
msgid "intarray"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:426(para)
msgid "Enhanced support for <type>int[]</type>"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:431(filename)
msgid "pg_trgm"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:433(para)
msgid "Text similarity using trigram matching"
msgstr ""

#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:399(para)
msgid "The <productname>PostgreSQL</productname> source distribution includes <acronym>GIN</acronym> operator classes for <type>tsvector</type> and for one-dimensional arrays of all internal types. Prefix searching in <type>tsvector</type> is implemented using the <acronym>GIN</acronym> partial match feature. The following <filename>contrib</filename> modules also contain <acronym>GIN</acronym> operator classes: <placeholder-1/>"
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: /home/carloratm/progetti/postgresql-source/doc-9.0.4/gin.xml:0(None)
msgid "translator-credits"
msgstr ""

